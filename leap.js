// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);
  Module['arguments'] = ["hello"];

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  console.log("hello", Module['arguments']);

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 60280;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });

var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/* memory initializer */ allocate([1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,40,84,82,85,69,61,84,82,85,69,41,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,216,91,0,0,0,0,0,0,1,0,0,0,160,109,0,0,1,0,0,0,2,0,0,0,136,86,0,0,1,0,0,0,3,0,0,0,24,73,0,0,1,0,0,0,4,0,0,0,56,58,0,0,1,0,0,0,5,0,0,0,168,45,0,0,1,0,0,0,6,0,0,0,240,33,0,0,1,0,0,0,7,0,0,0,240,24,0,0,1,0,0,0,8,0,0,0,224,15,0,0,1,0,0,0,9,0,0,0,208,9,0,0,1,0,0,0,10,0,0,0,16,119,0,0,1,0,0,0,11,0,0,0,56,113,0,0,1,0,0,0,12,0,0,0,8,108,0,0,1,0,0,0,13,0,0,0,208,104,0,0,1,0,0,0,14,0,0,0,0,101,0,0,1,0,0,0,15,0,0,0,200,97,0,0,1,0,0,0,16,0,0,0,120,95,0,0,1,0,0,0,17,0,0,0,208,92,0,0,1,0,0,0,18,0,0,0,248,90,0,0,1,0,0,0,19,0,0,0,168,89,0,0,1,0,0,0,20,0,0,0,152,88,0,0,1,0,0,0,21,0,0,0,136,87,0,0,1,0,0,0,22,0,0,0,200,85,0,0,1,0,0,0,23,0,0,0,120,84,0,0,1,0,0,0,24,0,0,0,192,82,0,0,1,0,0,0,25,0,0,0,160,81,0,0,1,0,0,0,26,0,0,0,8,80,0,0,1,0,0,0,27,0,0,0,240,78,0,0,1,0,0,0,28,0,0,0,168,77,0,0,1,0,0,0,29,0,0,0,160,76,0,0,1,0,0,0,30,0,0,0,136,75,0,0,1,0,0,0,31,0,0,0,72,74,0,0,1,0,0,0,32,0,0,0,24,72,0,0,1,0,0,0,33,0,0,0,248,70,0,0,1,0,0,0,34,0,0,0,56,69,0,0,1,0,0,0,35,0,0,0,224,67,0,0,1,0,0,0,36,0,0,0,168,66,0,0,1,0,0,0,37,0,0,0,88,65,0,0,1,0,0,0,38,0,0,0,32,64,0,0,1,0,0,0,39,0,0,0,200,62,0,0,1,0,0,0,40,0,0,0,48,61,0,0,1,0,0,0,41,0,0,0,184,59,0,0,1,0,0,0,42,0,0,0,112,57,0,0,2,0,0,0,43,0,0,0,184,55,0,0,0,0,0,0,44,0,0,0,96,54,0,0,0,0,0,0,45,0,0,0,56,53,0,0,0,0,0,0,46,0,0,0,232,51,0,0,2,0,0,0,47,0,0,0,248,50,0,0,0,0,0,0,48,0,0,0,32,50,0,0,0,0,0,0,49,0,0,0,8,49,0,0,0,0,0,0,50,0,0,0,232,47,0,0,0,0,0,0,51,0,0,0,240,46,0,0,0,0,0,0,52,0,0,0,72,45,0,0,0,0,0,0,54,0,0,0,16,44,0,0,0,0,0,0,55,0,0,0,56,43,0,0,0,0,0,0,53,0,0,0,32,42,0,0,0,0,0,0,56,0,0,0,208,40,0,0,0,0,0,0,57,0,0,0,168,39,0,0,0,0,0,0,58,0,0,0,104,38,0,0,0,0,0,0,59,0,0,0,144,37,0,0,0,0,0,0,60,0,0,0,168,36,0,0,0,0,0,0,231,3,0,0,120,35,0,0,1,0,0,0,32,10,0,0,12,0,0,0,200,89,0,0,40,0,0,0,208,76,0,0,40,0,0,0,224,62,0,0,40,0,0,0,40,49,0,0,40,0,0,0,176,37,0,0,62,0,0,0,128,27,0,0,1,0,0,0,80,18,0,0,11,0,0,0,168,11,0,0,30,0,0,0,48,6,0,0,59,0,0,0,40,115,0,0,76,0,0,0,96,109,0,0,76,0,0,0,248,105,0,0,50,0,0,0,48,102,0,0,53,0,0,0,184,98,0,0,51,0,0,0,160,96,0,0,16,0,0,0,232,93,0,0,31,0,0,0,0,92,0,0,77,0,0,0,136,90,0,0,34,0,0,0,40,89,0,0,29,0,0,0,48,88,0,0,36,0,0,0,128,86,0,0,66,0,0,0,96,85,0,0,7,0,0,0,128,83,0,0,24,0,0,0,56,82,0,0,21,0,0,0,16,81,0,0,46,0,0,0,112,79,0,0,5,0,0,0,88,78,0,0,10,0,0,0,24,77,0,0,67,0,0,0,32,76,0,0,52,0,0,0,232,74,0,0,66,0,0,0,16,73,0,0,11,0,0,0,136,71,0,0,56,0,0,0,88,70,0,0,28,0,0,0,168,68,0,0,1,0,0,0,72,67,0,0,26,0,0,0,200,65,0,0,18,0,0,0,160,64,0,0,19,0,0,0,104,63,0,0,8,0,0,0,0,62,0,0,8,0,0,0,160,60,0,0,37,0,0,0,40,58,0,0,71,0,0,0,120,56,0,0,20,0,0,0,240,54,0,0,47,0,0,0,160,53,0,0,54,0,0,0,48,52,0,0,14,0,0,0,48,51,0,0,60,0,0,0,88,50,0,0,4,0,0,0,120,49,0,0,2,0,0,0,88,48,0,0,15,0,0,0,72,47,0,0,21,0,0,0,160,45,0,0,63,0,0,0,136,44,0,0,25,0,0,0,104,43,0,0,49,0,0,0,136,42,0,0,55,0,0,0,24,41,0,0,5,0,0,0,224,39,0,0,22,0,0,0,192,38,0,0,9,0,0,0,208,37,0,0,33,0,0,0,240,36,0,0,56,0,0,0,184,35,0,0,70,0,0,0,224,33,0,0,68,0,0,0,8,33,0,0,4,0,0,0,24,32,0,0,48,0,0,0,40,31,0,0,41,0,0,0,32,30,0,0,23,0,0,0,32,29,0,0,69,0,0,0,64,28,0,0,32,0,0,0,160,27,0,0,23,0,0,0,232,26,0,0,61,0,0,0,80,26,0,0,27,0,0,0,232,24,0,0,11,0,0,0,176,23,0,0,3,0,0,0,152,22,0,0,4,0,0,0,168,21,0,0,17,0,0,0,192,20,0,0,35,0,0,0,248,19,0,0,56,0,0,0,48,19,0,0,75,0,0,0,104,18,0,0,74,0,0,0,144,17,0,0,74,0,0,0,216,16,0,0,73,0,0,0,216,15,0,0,42,0,0,0,64,15,0,0,13,0,0,0,224,14,0,0,72,0,0,0,208,14,0,0,45,0,0,0,64,14,0,0,43,0,0,0,176,13,0,0,64,0,0,0,32,13,0,0,64,0,0,0,104,12,0,0,38,0,0,0,176,11,0,0,38,0,0,0,32,11,0,0,58,0,0,0,160,10,0,0,44,0,0,0,91,83,85,83,93,32,0,0,82,105,103,104,116,58,0,0,82,101,115,101,116,116,105,110,103,32,97,108,108,32,117,112,100,97,116,101,100,32,102,108,97,103,115,58,32,0,0,0,97,100,100,114,101,115,115,101,115,0,0,0,0,0,0,0,37,115,37,115,0,0,0,0,119,97,114,114,97,110,116,121,0,0,0,0,0,0,0,0,91,68,69,76,93,32,0,0,76,101,102,116,32,58,0,0,100,101,108,101,116,105,110,103,32,116,101,109,112,111,114,97,114,121,32,42,37,112,32,91,37,115,93,10,0,0,0,0,47,116,109,112,47,0,0,0,37,100,46,37,100,46,37,100,10,0,0,0,0,0,0,0,91,79,75,32,93,32,0,0,112,108,116,117,112,108,101,32,91,37,112,93,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,100,105,115,112,111,115,101,10,0,0,0,0,0,0,116,117,112,108,101,115,46,116,117,112,108,101,95,112,114,101,112,97,114,101,46,105,116,101,109,0,0,0,0,0,0,0,101,114,114,111,114,115,0,0,118,101,114,115,105,111,110,111,110,108,121,0,0,0,0,0,69,110,100,32,111,102,32,114,101,108,97,116,105,111,110,32,114,101,97,99,104,101,100,10,0,0,0,0,0,0,0,0,70,105,110,97,108,32,81,117,97,108,105,102,105,99,97,116,105,111,110,58,32,37,115,10,0,0,0,0,0,0,0,0,40,114,101,108,97,116,105,111,110,95,100,105,115,112,111,115,101,41,0,0,0,0,0,0,101,114,114,111,114,115,47,0,118,101,114,115,105,111,110,0,108,101,97,112,97,116,116,114,105,98,117,116,101,115,0,0,82,101,108,97,116,105,111,110,32,83,116,114,117,99,116,117,114,101,32,114,101,97,100,32,111,107,33,10,0,0,0,0,81,117,97,108,105,102,105,99,97,116,105,111,110,58,32,37,115,10,0,0,0,0,0,0,100,105,115,112,111,115,105,110,103,32,114,101,108,97,116,105,111,110,32,42,37,112,32,91,37,115,93,10,0,0,0,0,37,115,37,115,37,115,0,0,84,114,97,99,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,32,101,110,97,98,108,101,100,10,0,0,0,0,68,97,116,97,32,115,105,122,101,47,116,117,112,108,101,58,32,37,100,32,98,121,116,101,115,10,10,0,0,0,0,0,32,97,110,100,32,40,37,115,46,37,115,61,37,115,46,37,115,41,0,0,0,0,0,0,73,110,115,101,114,116,105,110,103,32,116,101,109,112,111,114,97,114,121,32,114,101,108,97,116,105,111,110,32,91,37,115,93,32,105,110,32,116,101,109,112,100,98,46,10,0,0,0,42,42,42,32,100,105,115,112,111,115,105,110,103,32,111,102,32,104,97,115,104,116,97,98,108,101,32,42,37,112,32,91,37,115,93,10,0,0,0,0,47,0,0,0,0,0,0,0,116,114,97,99,105,110,103,0,80,114,111,99,101,115,115,105,110,103,32,112,97,114,115,101,32,116,114,101,101,46,46,46,0,0,0,0,0,0,0,0,83,116,97,116,117,115,32,109,97,114,107,101,114,58,32,32,32,32,37,100,32,98,121,116,101,115,10,0,0,0,0,0,40,37,115,46,37,115,61,37,115,46,37,115,41,0,0,0,104,115,104,32,32,32,32,32,32,123,37,112,125,10,0,0,65,99,116,105,118,105,116,121,32,70,105,108,101,0,0,0,116,114,97,99,101,0,0,0,117,110,100,101,114,32,99,101,114,116,97,105,110,32,99,111,110,100,105,116,105,111,110,115,59,32,116,121,112,101,32,34,99,111,112,121,105,110,103,34,32,102,111,114,32,100,101,116,97,105,108,115,46,0,0,0,65,116,116,114,105,98,117,116,101,32,35,37,100,32,45,32,75,101,121,67,58,32,60,37,100,62,10,10,0,0,0,0,80,114,105,109,97,114,121,47,70,111,114,101,105,103,110,32,107,101,121,115,58,0,0,0,114,101,108,32,91,37,115,93,32,123,37,112,125,10,0,0,35,35,35,10,35,32,65,99,116,105,118,105,116,121,32,102,105,108,101,32,83,84,79,80,80,69,68,32,97,116,58,32,37,115,35,35,35,10,0,0,116,105,109,105,110,103,0,0,67,97,110,110,111,116,32,102,105,110,100,32,114,101,108,97,116,105,111,110,32,91,37,115,93,46,10,0,0,0,0,0,65,116,116,114,105,98,117,116,101,32,35,37,100,32,45,32,83,105,122,101,58,32,60,37,100,62,10,0,0,0,0,0,40,84,82,85,69,61,84,82,85,69,41,0,0,0,0,0,33,0,0,0,0,0,0,0,42,42,42,10,114,101,108,32,91,37,115,93,32,123,37,112,58,58,42,37,112,125,10,0,117,110,109,97,116,99,104,101,100,32,40,41,0,0,0,0,42,42,42,32,78,111,100,101,32,98,97,108,97,110,99,101,58,32,37,100,10,0,0,0,65,99,99,101,115,115,32,111,102,32,37,115,0,0,0,0,83,116,97,114,116,58,32,100,111,95,115,116,114,105,110,103,95,101,118,97,108,10,0,0,37,115,10,0,0,0,0,0,108,111,110,103,0,0,0,0,119,104,97,116,0,0,0,0,116,105,109,101,0,0,0,0,65,116,116,114,105,98,117,116,101,32,35,37,100,32,45,32,84,121,112,101,58,32,60,37,100,62,10,0,0,0,0,0,65,115,115,117,109,105,110,103,32,97,108,119,97,121,115,32,84,82,85,69,32,99,111,110,100,105,116,105,111,110,46,0,68,97,116,97,98,97,115,101,32,91,37,115,93,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,32,40,118,105,97,32,91,37,115,93,41,46,10,0,0,119,97,114,114,97,110,116,121,0,0,0,0,0,0,0,0,83,116,97,116,117,115,32,109,101,115,115,97,103,101,115,32,101,110,97,98,108,101,100,10,0,0,0,0,0,0,0,0,65,116,116,114,105,98,117,116,101,32,35,37,100,32,45,32,78,97,109,101,58,32,60,37,115,62,10,0,0,0,0,0,114,101,108,115,104,105,112,0,69,88,73,84,105,110,103,32,40,85,78,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,115,95,100,100,111,112,101,110,10,0,0,0,0,0,0,97,100,100,0,0,0,0,0,118,101,114,115,105,111,110,0,115,116,97,116,117,115,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,107,101,121,32,99,111,109,112,111,110,101,110,116,32,40,35,32,37,100,41,10,0,0,0,78,111,32,106,111,105,110,32,99,111,110,100,105,116,105,111,110,32,99,97,110,32,98,101,32,100,101,116,101,114,109,105,110,101,100,32,102,114,111,109,32,99,111,109,109,97,110,100,32,108,105,110,101,32,111,114,32,37,115,32,114,101,108,97,116,105,111,110,46,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,115,95,100,100,111,112,101,110,10,0,0,0,0,0,0,0,0,118,101,114,0,0,0,0,0,82,101,103,114,101,115,115,105,111,110,32,116,101,115,116,32,109,111,100,101,32,111,110,10,0,0,0,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,115,105,122,101,32,40,35,32,37,100,41,10,0,0,0,0,68,68,32,76,111,111,107,117,112,58,32,78,111,32,101,110,116,114,121,32,102,111,117,110,100,32,105,110,32,114,101,108,115,104,105,112,46,10,0,0,79,112,101,110,105,110,103,32,116,104,101,32,91,37,115,93,32,100,97,116,97,98,97,115,101,46,46,46,0,0,0,0,116,117,112,108,101,115,46,116,117,112,108,101,95,112,114,101,112,97,114,101,40,97,114,114,97,121,41,0,0,0,0,0,118,97,114,115,0,0,0,0,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,116,121,112,101,32,40,35,32,37,100,41,10,0,0,0,0,68,68,32,76,111,111,107,117,112,58,32,82,101,108,97,116,105,111,110,115,104,105,112,32,110,111,116,32,102,111,117,110,100,46,32,82,101,118,101,114,115,105,110,103,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,115,95,100,100,111,112,101,110,10,0,0,0,0,0,0,118,97,114,105,97,98,108,101,115,0,0,0,0,0,0,0,113,117,105,101,116,0,0,0,97,100,100,32,40,37,115,41,32,40,37,115,44,37,115,44,37,115,44,37,100,41,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,110,97,109,101,32,40,35,32,37,100,41,10,0,0,0,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,110,97,116,117,114,97,108,106,111,105,110,10,0,69,88,73,84,105,110,103,32,114,101,108,97,116,105,111,110,115,95,111,112,101,110,10,0,117,115,116,105,109,101,0,0,80,114,111,100,117,99,116,32,112,101,114,102,111,114,109,101,100,32,105,110,32,110,111,45,99,111,110,100,105,116,105,111,110,32,106,111,105,110,10,0,86,101,114,115,105,111,110,32,116,97,103,58,32,37,100,10,0,0,0,0,0,0,0,0,78,111,32,117,112,100,97,116,105,110,103,32,105,110,102,111,32,111,110,32,108,101,97,112,114,101,108,32,45,32,99,97,117,115,101,115,32,114,101,99,117,114,115,105,111,110,33,0,116,101,109,112,100,98,0,0,78,111,32,37,115,32,114,101,108,97,116,105,111,110,0,0,117,115,101,0,0,0,0,0,112,106,111,105,110,0,0,0,117,112,100,97,116,101,0,0,82,101,116,117,114,110,101,100,32,116,111,32,100,101,112,116,104,58,32,37,105,32,69,120,112,114,101,115,115,105,111,110,58,32,37,115,0,0,0,0,78,111,32,65,116,116,114,105,98,117,116,101,115,58,32,37,100,10,0,0,0,0,0,0,84,82,85,69,0,0,0,0,112,114,111,100,117,99,116,45,106,111,105,110,0,0,0,0,117,110,105,111,110,0,0,0,84,104,105,115,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,44,32,97,110,100,32,121,111,117,32,97,114,101,32,119,101,108,99,111,109,101,32,116,111,32,114,101,100,105,115,116,114,105,98,117,116,101,32,105,116,0,0,0,97,32,85,83,69,82,32,114,101,108,97,116,105,111,110,46,10,0,0,0,0,0,0,0,85,80,68,65,84,69,68,0,82,69,76,65,84,73,79,78,0,0,0,0,0,0,0,0,82,101,108,97,116,105,111,110,32,78,97,109,101,32,80,97,100,100,105,110,103,32,101,110,97,98,108,101,100,10,0,0,116,105,109,105,110,103,0,0,85,110,97,98,108,101,32,116,111,32,101,114,97,115,101,32,102,105,108,101,32,91,37,115,93,46,10,0,0,0,0,0,97,32,83,89,83,84,69,77,32,114,101,108,97,116,105,111,110,46,10,0,0,0,0,0,78,65,77,69,0,0,0,0,100,101,108,101,116,101,32,40,37,115,41,32,40,37,115,61,39,37,115,39,41,0,0,0,116,111,111,32,109,97,110,121,32,40,41,0,0,0,0,0,78,111,100,101,32,91,37,112,93,58,32,65,108,114,101,97,100,121,32,112,114,101,115,101,110,116,32,105,110,32,116,104,101,32,99,104,97,105,110,32,45,32,78,101,119,32,110,111,100,101,32,100,105,115,112,111,115,101,100,10,0,0,0,0,45,0,0,0,0,0,0,0,69,110,100,32,40,79,107,41,58,32,100,111,95,105,110,116,95,101,118,97,108,10,0,0,68,68,77,97,105,110,116,101,110,97,110,99,101,32,99,111,109,109,97,110,100,58,32,91,37,115,93,10,0,0,0,0,112,97,100,100,105,110,103,0,112,97,100,100,105,110,103,0,116,101,114,109,105,110,97,116,101,110,111,119,0,0,0,0,112,101,114,109,97,110,101,110,116,10,0,0,0,0,0,0,117,112,100,97,116,101,32,40,37,115,41,32,40,37,115,61,39,37,115,39,41,32,40,37,115,61,39,37,115,39,41,0,84,69,77,80,78,65,77,69,0,0,0,0,0,0,0,0,80,79,83,83,73,66,73,76,73,84,89,32,79,70,32,83,85,67,72,32,68,65,77,65,71,69,83,46,10,0,0,0,115,116,100,101,114,114,32,119,105,108,108,32,98,101,32,109,101,114,103,101,100,32,105,110,116,111,32,115,116,100,111,117,116,10,0,0,0,0,0,0,83,116,97,114,116,117,112,32,115,101,113,117,101,110,99,101,32,105,110,105,116,105,97,116,101,100,46,0,0,0,0,0,115,117,109,109,97,114,105,122,101,0,0,0,0,0,0,0,116,101,109,112,111,114,97,114,121,10,0,0,0,0,0,0,85,112,100,97,116,105,110,103,32,108,101,97,112,114,101,108,32,105,110,102,111,0,0,0,69,82,82,79,82,58,32,82,101,108,97,116,105,111,110,32,91,37,115,93,32,110,111,32,108,111,110,103,101,114,32,101,120,105,115,116,115,46,32,85,112,100,97,116,105,110,103,58,32,37,115,44,32,37,115,46,10,0,0,0,0,0,0,0,80,82,79,71,82,65,77,83,41,44,32,69,86,69,78,32,73,70,32,83,85,67,72,32,72,79,76,68,69,82,32,79,82,32,79,84,72,69,82,32,80,65,82,84,89,32,72,65,83,32,66,69,69,78,32,65,68,86,73,83,69,68,32,79,70,32,84,72,69,10,0,0,64,0,0,0,0,0,0,0,109,101,114,103,101,45,115,116,100,101,114,114,0,0,0,0,115,117,109,109,97,114,105,115,101,0,0,0,0,0,0,0,82,101,108,97,116,105,111,110,32,105,115,32,0,0,0,0,108,101,97,112,114,101,108,0,69,82,82,79,82,58,32,82,101,108,97,116,105,111,110,32,91,37,115,93,32,110,111,32,108,111,110,103,101,114,32,101,120,105,115,116,115,46,32,85,112,100,97,116,105,110,103,32,40,37,115,41,46,10,0,0,89,79,85,32,79,82,32,84,72,73,82,68,32,80,65,82,84,73,69,83,32,79,82,32,65,32,70,65,73,76,85,82,69,32,79,70,32,84,72,69,32,80,82,79,71,82,65,77,32,84,79,32,79,80,69,82,65,84,69,32,87,73,84,72,32,65,78,89,32,79,84,72,69,82,10,0,0,0,0,0,76,111,110,103,32,99,111,109,109,97,110,100,115,32,101,110,97,98,108,101,100,10,0,0,115,117,109,0,0,0,0,0,82,101,108,97,116,105,111,110,32,78,97,109,101,58,32,37,115,10,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,58,32,114,108,95,117,112,100,97,116,101,10,0,0,0,0,0,0,0,112,114,111,106,101,99,116,32,40,37,115,41,32,40,37,115,41,0,0,0,0,0,0,0,116,117,112,108,101,115,46,116,117,112,108,101,95,112,114,101,112,97,114,101,0,0,0,0,84,79,32,76,79,83,83,32,79,70,32,68,65,84,65,32,79,82,32,68,65,84,65,32,66,69,73,78,71,32,82,69,78,68,69,82,69,68,32,73,78,65,67,67,85,82,65,84,69,32,79,82,32,76,79,83,83,69,83,32,83,85,83,84,65,73,78,69,68,32,66,89,10,0,0,0,0,0,0,0,108,111,110,103,0,0,0,0,115,116,111,112,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,110,111,32,97,116,116,114,105,98,117,116,101,115,10,0,0,0,0,84,117,112,108,101,32,119,105,108,108,32,42,42,78,79,84,42,42,32,98,101,32,117,112,100,97,116,101,100,10,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,115,95,111,112,101,110,10,0,0,0,0,0,0,0,0,79,85,84,32,79,70,32,84,72,69,32,85,83,69,32,79,82,32,73,78,65,66,73,76,73,84,89,32,84,79,32,85,83,69,32,84,72,69,32,80,82,79,71,82,65,77,32,40,73,78,67,76,85,68,73,78,71,32,66,85,84,32,78,79,84,32,76,73,77,73,84,69,68,10,0,0,0,0,0,0,108,111,110,103,45,99,111,109,109,97,110,100,115,0,0,0,115,116,97,116,117,115,0,0,116,101,109,112,100,98,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,114,101,108,97,116,105,111,110,32,115,121,115,116,101,109,32,115,116,97,116,117,115,10,0,0,0,80,79,83,84,45,85,112,100,97,116,101,32,116,117,112,108,101,58,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,110,101,119,95,114,101,97,100,10,0,0,0,0,0,0,0,73,78,67,76,85,68,73,78,71,32,65,78,89,32,71,69,78,69,82,65,76,44,32,83,80,69,67,73,65,76,44,32,73,78,67,73,68,69,78,84,65,76,32,79,82,32,67,79,78,83,69,81,85,69,78,84,73,65,76,32,68,65,77,65,71,69,83,32,65,82,73,83,73,78,71,10,0,0,0,0,84,105,109,101,32,108,111,103,103,105,110,103,32,100,105,115,97,98,108,101,100,10,0,0,115,112,101,99,105,100,120,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,114,101,108,97,116,105,111,110,32,116,101,109,112,111,114,97,114,121,32,115,116,97,116,117,115,10,0,0,0,0,0,0,0,0,84,117,112,108,101,32,42,42,42,85,80,68,65,84,69,68,42,42,42,10,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,105,110,115,101,114,116,32,91,37,115,93,10,0,0,67,114,101,97,116,105,110,103,32,104,97,115,104,32,116,97,98,108,101,32,102,111,114,32,91,37,115,93,46,0,0,0,82,69,68,73,83,84,82,73,66,85,84,69,32,84,72,69,32,80,82,79,71,82,65,77,32,65,83,32,80,69,82,77,73,84,84,69,68,32,65,66,79,86,69,44,32,66,69,32,76,73,65,66,76,69,32,84,79,32,89,79,85,32,70,79,82,32,68,65,77,65,71,69,83,44,10,0,0,0,0,0,116,105,109,101,45,108,111,103,103,105,110,103,0,0,0,0,115,112,95,104,101,108,112,0,82,101,115,117,108,116,58,32,60,78,79,84,32,75,78,79,87,78,62,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,114,101,108,97,116,105,111,110,32,110,97,109,101,10,0,0,0,0,76,101,110,103,116,104,32,111,102,32,110,101,120,116,32,117,112,100,97,116,101,32,40,115,101,116,41,32,115,116,97,116,101,109,101,110,116,58,32,91,37,100,93,10,0,0,0,0,76,111,97,100,105,110,103,32,104,97,115,104,32,116,97,98,108,101,32,102,111,114,32,114,101,108,97,116,105,111,110,32,91,37,115,93,0,0,0,0,87,73,76,76,32,65,78,89,32,67,79,80,89,82,73,71,72,84,32,72,79,76,68,69,82,44,32,79,82,32,65,78,89,32,79,84,72,69,82,32,80,65,82,84,89,32,87,72,79,32,77,65,89,32,77,79,68,73,70,89,32,65,78,68,47,79,82,10,0,0,0,0,69,78,84,69,82,105,110,103,32,116,117,112,108,101,95,100,105,115,112,111,115,101,10,0,84,105,109,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,32,101,110,97,98,108,101,100,10,0,0,0,0,0,115,111,117,114,99,101,115,0,76,69,65,80,32,99,111,109,101,115,32,119,105,116,104,32,65,66,83,79,76,85,84,69,76,89,32,78,79,32,87,65,82,82,65,78,84,89,59,32,102,111,114,32,100,101,116,97,105,108,115,32,116,121,112,101,32,34,119,97,114,114,97,110,116,121,34,46,0,0,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,112,114,105,110,116,114,101,108,105,110,102,111,10,0,0,79,108,100,32,118,97,108,58,32,91,37,115,93,32,45,32,78,101,119,32,118,97,108,58,32,91,37,115,93,10,0,0,69,88,73,84,105,110,103,32,40,85,78,115,117,99,99,101,115,102,117,108,108,121,32,45,32,78,111,32,102,104,97,110,100,108,101,33,41,32,114,101,108,97,116,105,111,110,95,110,101,119,95,114,101,97,100,32,45,32,70,105,108,101,32,91,37,115,93,10,0,0,0,0,32,32,49,50,46,32,73,78,32,78,79,32,69,86,69,78,84,32,85,78,76,69,83,83,32,82,69,81,85,73,82,69,68,32,66,89,32,65,80,80,76,73,67,65,66,76,69,32,76,65,87,32,79,82,32,65,71,82,69,69,68,32,84,79,32,73,78,32,87,82,73,84,73,78,71,10,0,0,0,0,104,101,108,112,0,0,0,0,115,111,117,114,99,101,0,0,85,110,105,111,110,32,99,111,109,112,97,116,105,98,105,108,105,116,121,32,100,111,101,115,32,110,111,116,32,104,111,108,100,46,10,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,118,101,114,115,105,111,110,32,105,100,101,110,116,105,102,105,101,114,10,0,0,0,0,0,0,0,39,34,0,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,102,114,111,109,32,114,101,108,97,116,105,111,110,32,102,105,108,101,0,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,102,111,117,108,117,112,0,82,69,80,65,73,82,32,79,82,32,67,79,82,82,69,67,84,73,79,78,46,10,10,0,78,111,100,101,32,91,37,112,93,58,32,73,110,115,101,114,116,101,100,32,105,110,32,116,104,101,32,77,73,68,83,84,32,111,102,32,116,104,101,32,99,104,97,105,110,10,0,0,40,37,115,61,34,37,115,34,41,0,0,0,0,0,0,0,83,111,109,101,116,104,105,110,103,32,83,116,114,97,110,103,101,32,104,97,115,32,104,97,112,112,101,110,101,110,101,100,32,40,81,117,101,114,121,32,101,118,97,108,117,97,116,105,111,110,41,0,0,0,0,0,69,120,101,99,117,116,105,110,103,32,99,111,109,109,97,110,100,32,102,114,111,109,32,100,100,114,101,100,105,114,101,99,116,105,111,110,58,32,91,37,115,93,10,0,0,0,0,0,116,105,109,101,108,111,103,0,101,118,101,110,116,0,0,0,115,109,106,111,105,110,0,0,114,98,0,0,0,0,0,0,85,112,100,97,116,101,32,110,111,116,32,100,105,115,112,111,115,105,110,103,32,111,102,32,109,101,109,111,114,121,0,0,114,0,0,0,0,0,0,0,80,82,79,71,82,65,77,32,80,82,79,86,69,32,68,69,70,69,67,84,73,86,69,44,32,89,79,85,32,65,83,83,85,77,69,32,84,72,69,32,67,79,83,84,32,79,70,32,65,76,76,32,78,69,67,69,83,83,65,82,89,32,83,69,82,86,73,67,73,78,71,44,10,0,0,0,0,0,0,0,101,118,101,110,116,115,0,0,37,115,0,0,0,0,0,0,115,101,116,0,0,0,0,0,68,105,115,107,32,114,101,108,97,116,105,111,110,32,100,97,116,97,46,46,46,10,0,0,84,117,112,108,101,32,116,111,32,98,101,32,117,112,100,97,116,101,100,32,42,42,70,79,85,78,68,42,42,10,0,0,108,101,97,112,115,99,114,105,112,116,115,0,0,0,0,0,84,79,32,84,72,69,32,81,85,65,76,73,84,89,32,65,78,68,32,80,69,82,70,79,82,77,65,78,67,69,32,79,70,32,84,72,69,32,80,82,79,71,82,65,77,32,73,83,32,87,73,84,72,32,89,79,85,46,32,32,83,72,79,85,76,68,32,84,72,69,10,0,63,0,0,0,0,0,0,0,68,101,98,117,103,32,109,101,115,115,97,103,101,115,32,101,110,97,98,108,101,100,10,0,115,101,108,101,99,116,0,0,69,78,84,69,82,105,110,103,32,112,114,105,110,116,114,101,108,105,110,102,111,10,0,0,80,82,69,45,85,112,100,97,116,101,32,116,117,112,108,101,58,0,0,0,0,0,0,0,108,101,97,112,116,121,112,101,115,0,0,0,0,0,0,0,77,69,82,67,72,65,78,84,65,66,73,76,73,84,89,32,65,78,68,32,70,73,84,78,69,83,83,32,70,79,82,32,65,32,80,65,82,84,73,67,85,76,65,82,32,80,85,82,80,79,83,69,46,32,32,84,72,69,32,69,78,84,73,82,69,32,82,73,83,75,32,65,83,10,0,0,0,0,0,0,100,101,98,117,103,0,0,0,114,109,118,116,109,112,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,114,101,97,100,95,101,111,104,95,109,97,114,107,101,114,10,0,0,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,69,114,114,58,32,114,108,95,117,112,100,97,116,101,10,0,0,0,0,108,101,97,112,97,116,116,114,105,98,117,116,101,115,0,0,69,88,73,84,105,110,103,32,116,117,112,108,101,95,100,105,115,112,111,115,101,10,0,0,79,82,32,73,77,80,76,73,69,68,44,32,73,78,67,76,85,68,73,78,71,44,32,66,85,84,32,78,79,84,32,76,73,77,73,84,69,68,32,84,79,44,32,84,72,69,32,73,77,80,76,73,69,68,32,87,65,82,82,65,78,84,73,69,83,32,79,70,10,0,0,0,100,97,116,97,98,97,115,101,0,0,0,0,0,0,0,0,114,101,118,101,114,115,101,0,82,101,97,100,32,109,97,114,107,101,114,32,118,97,108,58,32,37,100,46,32,69,120,112,101,99,116,101,100,32,118,97,108,58,32,37,100,10,0,0,73,110,118,97,108,105,100,32,115,101,116,32,111,112,101,114,97,116,105,111,110,0,0,0,108,101,97,112,100,97,116,97,0,0,0,0,0,0,0,0,80,82,79,86,73,68,69,32,84,72,69,32,80,82,79,71,82,65,77,32,34,65,83,32,73,83,34,32,87,73,84,72,79,85,84,32,87,65,82,82,65,78,84,89,32,79,70,32,65,78,89,32,75,73,78,68,44,32,69,73,84,72,69,82,32,69,88,80,82,69,83,83,69,68,10,0,0,0,0,0,76,69,65,80,32,116,101,114,109,105,110,97,116,101,100,32,97,98,110,111,114,109,97,108,108,121,46,10,0,0,0,0,69,82,82,79,82,58,32,78,111,32,100,105,114,101,99,116,111,114,121,32,115,112,101,99,105,102,105,101,100,32,97,102,116,101,114,32,100,105,114,101,99,116,111,114,121,32,102,108,97,103,46,10,0,0,0,0,114,101,115,116,114,105,99,116,0,0,0,0,0,0,0,0,32,32,102,115,101,101,107,32,114,101,116,117,114,110,101,100,32,91,37,100,93,10,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,114,101,97,100,95,101,111,104,95,109,97,114,107,101,114,10,0,0,0,0,0,0,81,117,97,108,105,102,105,99,97,116,105,111,110,58,32,37,115,10,68,101,115,116,105,110,97,116,105,111,110,58,32,32,37,115,10,83,101,116,32,115,116,114,105,110,103,58,32,32,32,37,115,10,0,0,0,0,114,101,108,115,104,105,112,0,79,84,72,69,82,87,73,83,69,32,83,84,65,84,69,68,32,73,78,32,87,82,73,84,73,78,71,32,84,72,69,32,67,79,80,89,82,73,71,72,84,32,72,79,76,68,69,82,83,32,65,78,68,47,79,82,32,79,84,72,69,82,32,80,65,82,84,73,69,83,10,0,91,37,115,93,32,35,37,100,32,45,32,37,115,0,0,0,100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,114,101,112,111,114,116,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,109,97,114,107,101,114,10,0,0,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,117,112,100,97,116,101,10,0,0,0,0,0,0,69,88,73,84,105,110,103,32,100,101,108,101,116,101,95,114,101,108,97,116,105,111,110,10,0,0,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,85,78,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,110,101,119,95,114,101,97,100,10,0,0,0,0,0,70,79,82,32,84,72,69,32,80,82,79,71,82,65,77,44,32,84,79,32,84,72,69,32,69,88,84,69,78,84,32,80,69,82,77,73,84,84,69,68,32,66,89,32,65,80,80,76,73,67,65,66,76,69,32,76,65,87,46,32,32,69,88,67,69,80,84,32,87,72,69,78,10,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,100,105,114,0,0,0,0,0,114,101,110,97,109,101,0,0,69,120,112,114,101,115,115,105,111,110,58,32,37,115,0,0,65,116,58,32,37,108,100,10,0,0,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,69,114,114,58,32,114,108,95,101,114,97,115,101,10,0,0,0,0,0,78,111,116,32,97,32,114,101,108,97,116,105,111,110,63,32,83,111,109,101,116,104,105,110,103,32,115,116,114,97,110,103,101,32,104,97,115,32,104,97,112,112,101,110,101,100,0,0,32,32,49,49,46,32,66,69,67,65,85,83,69,32,84,72,69,32,80,82,79,71,82,65,77,32,73,83,32,76,73,67,69,78,83,69,68,32,70,82,69,69,32,79,70,32,67,72,65,82,71,69,44,32,84,72,69,82,69,32,73,83,32,78,79,32,87,65,82,82,65,78,84,89,10,0,0,0,0,0,70,65,84,65,76,0,0,0,83,116,97,114,116,117,112,32,67,108,101,97,110,117,112,32,101,110,97,98,108,101,100,46,46,46,10,0,0,0,0,0,114,101,108,97,116,105,111,110,115,0,0,0,0,0,0,0,10,37,115,10,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,114,101,97,100,95,101,111,104,95,109,97,114,107,101,114,10,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,58,32,114,108,95,101,114,97,115,101,10,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,81,117,101,114,121,32,103,101,110,101,114,97,116,101,100,32,98,121,32,118,112,114,111,99,101,115,115,95,113,117,101,114,121,58,32,37,115,10,0,0,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,79,32,87,65,82,82,65,78,84,89,10,0,0,0,0,0,0,0,78,79,78,45,70,65,84,65,76,0,0,0,0,0,0,0,99,108,101,97,110,117,112,0,114,101,108,97,116,105,111,110,0,0,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,105,116,101,109,32,91,37,115,93,32,101,120,105,115,116,115,46,10,0,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,101,111,104,95,109,97,114,107,101,114,10,0,0,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,101,114,97,115,101,10,0,0,0,0,0,0,0,114,101,108,97,116,105,111,110,46,114,101,108,97,116,105,111,110,95,114,101,97,100,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,40,69,114,114,111,114,41,58,32,112,114,111,99,101,115,115,95,113,117,101,114,121,32,91,37,115,93,10,0,0,0,0,0,0,0,99,111,114,114,117,112,116,101,100,32,112,111,105,110,116,101,114,115,0,0,0,0,0,0,108,105,115,116,32,104,116,116,112,58,47,47,108,105,115,116,115,46,115,111,117,114,99,101,102,111,114,103,101,46,110,101,116,47,108,105,115,116,115,47,108,105,115,116,105,110,102,111,47,108,101,97,112,45,97,110,110,111,117,110,99,101,0,0,78,111,100,101,32,91,37,112,93,58,32,73,110,115,101,114,116,101,100,32,97,116,32,116,104,101,32,66,69,71,73,78,78,73,78,71,32,111,102,32,116,104,101,32,99,104,97,105,110,32,40,77,97,115,116,101,114,32,112,116,114,32,117,112,100,97,116,101,100,41,10,0,76,111,99,97,116,105,111,110,32,111,102,32,37,115,0,0,99,114,101,115,117,108,116,58,32,91,37,100,93,10,0,0,85,110,100,101,102,105,110,101,100,32,101,114,114,111,114,58,32,37,115,10,0,0,0,0,114,0,0,0,0,0,0,0,116,101,109,112,111,114,97,114,121,0,0,0,0,0,0,0,67,79,78,70,73,71,85,82,73,78,71,46,46,46,10,0,114,101,99,111,114,100,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,101,111,104,95,109,97,114,107,101,114,10,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,69,114,114,58,32,114,108,95,115,101,108,101,99,116,10,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,110,101,119,95,114,101,97,100,10,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,40,79,107,41,58,32,112,114,111,99,101,115,115,95,113,117,101,114,121,32,91,37,115,93,10,0,0,70,111,114,32,97,110,110,111,117,110,99,101,109,101,110,116,115,44,32,97,110,100,32,105,110,102,111,114,109,97,116,105,111,110,44,32,106,111,105,110,32,116,104,101,32,76,69,65,80,32,109,97,105,108,105,110,103,10,0,0,0,0,0,0,69,114,114,111,114,32,99,111,109,112,97,99,116,105,110,103,32,114,101,108,97,116,105,111,110,46,32,91,37,115,93,10,0,0,0,0,0,0,0,0,99,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,99,117,114,114,101,110,116,100,98,0,0,0,0,0,0,0,113,117,105,116,0,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,109,97,114,107,101,114,10,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,58,32,114,108,95,115,101,108,101,99,116,10,0,0,0,0,0,0,0,0,82,101,108,97,116,105,111,110,32,78,97,109,101,10,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,108,97,115,116,0,0,0,0,116,104,101,32,76,69,65,80,32,87,101,98,32,80,97,103,101,32,97,116,32,104,116,116,112,58,47,47,108,101,97,112,46,115,111,117,114,99,101,102,111,114,103,101,46,110,101,116,10,10,0,0,0,0,0,0,69,114,114,111,114,32,101,114,97,115,105,110,103,32,116,117,112,108,101,46,32,91,37,115,93,10,0,0,0,0,0,0,62,0,0,0,0,0,0,0,37,115,37,115,37,115,0,0,99,111,110,102,105,103,117,114,101,0,0,0,0,0,0,0,112,114,111,109,112,116,0,0,37,99,0,0,0,0,0,0,84,117,112,108,101,32,119,105,108,108,32,42,42,78,79,84,42,42,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,100,105,115,107,10,0,0,69,88,73,84,105,110,103,32,114,101,108,97,116,105,111,110,95,102,105,110,100,10,0,0,58,45,111,0,0,0,0,0,70,111,114,32,117,112,32,116,111,32,100,97,116,101,32,105,110,102,111,114,109,97,116,105,111,110,44,32,102,116,112,32,115,105,116,101,115,44,32,97,110,100,32,100,101,118,101,108,111,112,109,101,110,116,115,32,45,32,115,101,101,10,0,0,69,114,114,111,114,32,119,105,116,104,32,97,116,116,114,105,98,117,116,101,40,115,41,32,91,37,115,93,10,0,0,0,78,111,32,100,97,116,97,98,97,115,101,32,115,112,101,99,105,102,105,101,100,32,111,110,32,99,111,109,109,97,110,100,32,108,105,110,101,46,32,37,115,32,119,105,108,108,32,98,101,32,117,115,101,100,46,0,112,114,111,106,101,99,116,0,37,99,37,99,37,99,0,0,84,117,112,108,101,32,42,87,73,76,76,42,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,100,105,115,107,10,0,0,0,0,0,0,0,0,69,88,73,84,105,110,103,32,85,78,115,117,99,99,101,115,115,102,117,108,108,121,32,40,78,85,76,76,32,100,98,41,32,114,101,108,97,116,105,111,110,95,102,105,110,100,10,0,69,114,114,111,114,40,115,41,32,111,99,99,117,114,101,100,32,100,117,114,105,110,103,32,111,112,116,105,109,105,115,97,116,105,111,110,32,115,116,97,103,101,46,0,0,0,0,0,68,105,115,112,111,115,101,100,46,10,0,0,0,0,0,0,85,110,42,120,32,32,45,32,115,117,110,115,105,116,101,46,117,110,99,46,101,100,117,47,112,117,98,47,76,105,110,117,120,47,97,112,112,115,47,100,97,116,97,98,97,115,101,47,114,101,108,97,116,105,111,110,97,108,10,10,0,0,0,0,68,105,115,97,98,108,101,100,32,99,111,100,101,32,99,97,108,108,101,100,33,32,91,37,115,93,10,0,0,0,0,0,65,99,116,105,118,105,116,121,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,112,114,111,100,117,99,116,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([111,104,95,109,97,114,107,101,114,10,0,0,0,0,0,0,78,111,32,99,111,110,100,105,116,105,111,110,32,115,112,101,99,105,102,105,101,100,46,32,68,101,102,97,117,108,116,105,110,103,32,116,111,32,97,110,32,97,108,119,97,121,115,32,84,82,85,69,32,99,111,110,100,105,116,105,111,110,46,0,82,101,108,97,116,105,111,110,32,91,37,115,93,32,105,115,32,110,111,114,109,97,108,46,10,0,0,0,0,0,0,0,80,97,114,115,101,32,116,114,101,101,32,98,117,105,108,116,32,115,117,99,99,101,115,115,102,117,108,108,121,46,0,0,65,108,108,32,32,32,45,32,102,116,112,46,100,101,109,111,110,46,99,111,46,117,107,47,112,117,98,47,99,111,109,112,115,99,105,47,100,97,116,97,98,97,115,101,115,47,108,101,97,112,10,0,0,0,0,0,82,101,103,117,108,97,114,32,69,120,112,114,101,115,115,105,111,110,32,101,114,114,111,114,58,32,37,115,10,0,0,0,35,35,35,10,35,32,65,99,116,105,118,105,116,121,32,102,105,108,101,32,83,84,65,82,84,69,68,32,97,116,58,32,37,115,35,35,35,10,0,0,112,114,105,110,116,0,0,0,70,65,73,76,69,68,32,116,111,32,111,112,101,110,32,62,37,115,60,10,0,0,0,0,69,88,73,84,105,110,103,32,114,101,108,97,116,105,111,110,95,117,112,100,97,116,101,95,104,101,97,100,101,114,10,0,81,117,97,108,105,102,105,99,97,116,105,111,110,58,32,37,115,10,68,101,115,116,105,110,97,116,105,111,110,58,32,37,115,10,0,0,0,0,0,0,84,101,109,112,100,98,32,110,111,116,32,105,110,105,116,105,97,108,105,115,101,100,32,97,110,100,32,114,101,108,97,116,105,111,110,32,105,115,32,116,101,109,112,111,114,97,114,121,46,46,46,10,0,0,0,0,69,114,114,111,114,40,115,41,32,111,99,99,117,114,101,100,32,100,117,114,105,110,103,32,112,97,114,115,101,32,116,114,101,101,32,98,117,105,108,100,46,0,0,0,0,0,0,0,76,97,116,101,115,116,32,118,101,114,115,105,111,110,115,32,97,114,101,32,97,118,97,105,108,97,98,108,101,32,118,105,97,32,97,110,111,110,121,109,111,117,115,32,102,116,112,58,10,0,0,0,0,0,0,0,65,116,116,114,105,98,117,116,101,32,115,105,122,101,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,109,97,120,105,109,117,109,32,112,101,114,109,105,116,116,101,100,46,10,58,37,115,0,0,0,0,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,97,99,116,105,118,105,116,121,32,102,105,108,101,32,102,111,114,32,97,112,112,101,110,100,105,110,103,46,10,0,0,0,0,112,97,114,115,101,0,0,0,78,79,65,84,84,82,73,66,83,0,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,115,101,108,101,99,116,10,0,0,0,0,0,0,100,101,108,101,116,101,95,114,101,108,97,116,105,111,110,58,32,83,111,109,101,116,104,105,110,103,32,115,116,114,97,110,103,101,32,104,97,115,32,104,97,112,112,101,110,101,100,0,82,101,108,97,116,105,111,110,32,91,37,115,93,32,105,115,32,116,101,109,112,111,114,97,114,121,46,10,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,108,101,97,112,64,108,101,121,116,111,110,46,111,114,103,10,10,0,0,0,0,0,0,0,69,114,114,111,114,32,105,110,105,116,105,97,108,105,115,105,110,103,32,115,111,99,107,101,116,32,91,37,115,93,46,10,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,112,97,110,105,99,0,0,0,68,101,112,116,104,58,32,37,105,0,0,0,0,0,0,0,78,65,77,69,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,58,32,114,108,95,112,114,111,100,117,99,116,10,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,102,105,110,100,32,40,37,115,41,10,0,0,0,0,69,110,100,32,80,97,114,115,101,32,84,114,101,101,0,0,10,80,108,101,97,115,101,32,115,101,110,100,32,97,108,108,32,99,111,109,109,101,110,116,115,44,32,98,117,103,115,44,32,115,117,103,103,101,115,116,105,111,110,115,32,101,116,99,46,32,116,111,58,10,0,0,69,114,114,111,114,32,112,101,114,102,111,114,109,105,110,103,32,97,110,32,79,83,32,111,112,101,114,97,116,105,111,110,32,91,37,115,93,46,10,0,82,101,108,97,116,105,111,110,32,91,37,115,93,32,105,115,32,110,111,114,109,97,108,44,32,100,98,32,105,115,32,116,101,109,112,100,98,44,32,111,114,32,99,111,110,102,105,103,32,105,110,32,112,114,111,99,101,115,115,46,10,0,0,0,108,101,97,112,46,111,117,116,0,0,0,0,0,0,0,0,110,111,114,109,97,108,0,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,53,45,50,48,48,52,32,82,105,99,104,97,114,100,32,76,101,121,116,111,110,46,0,108,101,97,112,114,101,108,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,112,114,111,100,117,99,116,10,0,0,0,0,0,69,88,73,84,105,110,103,32,114,101,108,97,116,105,111,110,95,112,114,105,110,116,10,0,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,68,101,102,97,117,108,116,32,100,105,114,101,99,116,111,114,121,32,105,115,32,126,47,108,101,97,112,47,32,45,32,46,46,47,32,105,115,32,99,104,101,99,107,101,100,32,111,110,32,102,97,105,108,117,114,101,46,10,10,0,0,0,0,0,77,101,115,115,97,103,101,58,32,37,115,10,0,0,0,0,82,101,108,97,116,105,111,110,32,91,37,115,93,32,105,115,32,116,111,32,98,101,32,105,110,32,116,101,109,112,100,98,46,10,0,0,0,0,0,0,78,111,32,102,105,108,101,32,115,112,101,99,105,102,105,101,100,46,32,85,115,105,110,103,32,37,115,10,0,0,0,0,110,97,116,106,111,105,110,0,83,112,101,99,105,102,105,101,100,32,65,116,116,114,105,98,117,116,101,32,91,37,115,93,32,110,111,116,32,102,111,117,110,100,46,10,0,0,0,0,117,112,100,97,116,101,32,40,37,115,41,32,40,37,115,61,39,37,115,39,41,32,40,37,115,61,39,37,100,39,41,0,69,88,73,84,105,110,103,32,115,117,99,99,101,115,115,102,117,108,108,121,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,98,111,116,104,10,0,0,0,0,0,0,10,0,0,0,0,0,0,0,80,97,114,115,101,32,84,114,101,101,0,0,0,0,0,0,109,101,109,111,114,121,32,99,111,114,114,117,112,116,105,111,110,0,0,0,0,0,0,0,40,112,116,95,115,116,97,99,107,95,100,105,115,112,111,115,101,41,0,0,0,0,0,0,100,105,114,101,99,116,111,114,121,46,10,10,0,0,0,0,78,111,100,101,32,91,37,112,93,58,32,73,110,115,101,114,116,101,100,32,97,116,32,116,104,101,32,69,78,68,32,111,102,32,116,104,101,32,99,104,97,105,110,10,0,0,0,0,37,115,32,45,32,87,65,82,78,73,78,71,58,32,78,97,109,101,32,101,120,99,101,101,100,115,32,79,83,32,108,105,109,105,116,32,111,102,32,37,100,32,99,104,97,114,97,99,116,101,114,115,46,10,0,0,101,114,114,58,32,91,37,100,93,10,0,0,0,0,0,0,69,118,101,110,116,58,32,37,115,10,0,0,0,0,0,0,84,114,121,105,110,103,32,116,111,32,99,108,111,115,101,32,68,68,32,114,101,100,105,114,101,99,116,105,111,110,32,102,105,108,101,0,0,0,0,0,116,101,109,112,100,98,0,0,113,117,105,101,116,0,0,0,97,99,116,105,118,105,116,121,0,0,0,0,0,0,0,0,109,105,110,117,115,0,0,0,82,101,116,117,114,110,32,112,111,115,58,32,37,108,100,10,0,0,0,0,0,0,0,0,69,88,73,84,105,110,103,32,85,78,115,117,99,99,101,115,115,102,117,108,108,121,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,98,111,116,104,10,0,0,0,0,41,10,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,100,105,114,32,115,104,111,117,108,100,32,98,101,32,98,97,115,101,32,76,69,65,80,32,68,105,114,101,99,116,111,114,121,44,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,100,97,116,97,98,97,115,101,10,0,0,0,0,67,97,110,110,111,116,32,116,97,109,112,101,114,32,119,105,116,104,32,115,121,115,116,101,109,32,114,101,108,97,116,105,111,110,115,32,91,37,115,93,46,10,0,0,0,0,0,0,91,37,115,93,32,105,115,32,97,32,116,101,109,112,111,114,97,114,121,47,115,121,115,116,101,109,32,114,101,108,97,116,105,111,110,46,10,0,0,0,97,99,116,105,118,105,116,121,45,102,105,108,101,0,0,0,117,115,101,114,0,0,0,0,109,101,109,0,0,0,0,0,67,117,114,114,101,110,116,32,112,111,115,58,32,37,108,100,10,0,0,0,0,0,0,0,67,117,114,114,101,110,116,32,108,105,109,105,116,32,115,101,116,32,116,111,32,37,100,32,97,116,116,114,105,98,117,116,101,115,46,0,0,0,0,0,42,10,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,112,114,111,99,101,115,115,95,113,117,101,114,121,32,91,37,115,93,10,0,0,0,0,0,45,45,119,97,114,114,97,110,116,121,32,32,32,32,32,32,32,32,32,32,32,45,32,87,97,114,114,97,110,116,121,32,97,110,100,32,99,111,110,100,105,116,105,111,110,115,32,111,102,32,117,115,101,10,0,0,69,114,114,111,114,32,100,101,108,101,116,105,110,103,32,102,105,108,101,32,91,37,115,93,10,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,115,101,116,32,116,101,109,112,111,114,97,114,121,32,111,102,102,10,0,0,0,0,0,0,85,115,105,110,103,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,37,115,32,102,111,114,32,112,97,116,104,32,40,37,115,41,46,10,0,0,0,108,111,97,100,0,0,0,0,83,116,97,114,116,32,112,111,115,58,32,37,108,100,10,0,67,117,114,114,101,110,116,32,108,105,109,105,116,32,115,101,116,32,116,111,32,37,100,32,97,116,116,114,105,98,117,116,101,115,0,0,0,0,0,0,37,115,0,0,0,0,0,0,79,112,116,105,109,105,115,97,116,105,111,110,32,83,116,97,103,101,58,32,78,111,116,32,121,101,116,32,105,109,112,108,101,109,101,110,116,101,100,0,45,45,118,101,114,115,105,111,110,32,32,32,32,32,32,32,32,32,32,32,32,45,32,80,114,105,110,116,32,118,101,114,115,105,111,110,32,105,110,102,111,114,109,97,116,105,111,110,10,10,0,0,0,0,0,0,69,114,114,111,114,32,100,101,108,101,116,105,110,103,32,114,101,108,97,116,105,111,110,32,91,37,115,93,10,0,0,0,117,115,101,32,37,115,10,0,76,69,65,80,95,68,73,82,0,0,0,0,0,0,0,0,108,105,115,116,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,117,112,100,97,116,101,95,104,101,97,100,101,114,10,0,0,0,0,0,0,0,0,37,115,46,37,115,0,0,0,40,0,0,0,0,0,0,0,80,97,114,115,101,32,84,114,101,101,32,98,117,105,108,100,32,99,111,109,112,108,101,116,101,100,46,0,0,0,0,0,67,108,111,115,101,100,46,10,0,0,0,0,0,0,0,0,45,45,116,114,97,99,105,110,103,32,32,32,32,32,32,32,32,32,32,32,32,45,32,84,114,97,99,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,10,0,0,0,0,0,68,105,115,97,98,108,101,100,32,111,112,101,114,97,116,111,114,46,10,0,0,0,0,0,99,114,101,97,116,101,32,100,97,116,97,98,97,115,101,32,40,37,115,41,10,0,0,0,46,47,0,0,0,0,0,0,108,0,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,104,101,97,100,101,114,10,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,112,114,105,110,116,10,0,0,0,0,0,0,0,0,80,97,114,115,101,114,58,32,40,66,114,97,110,99,104,32,110,111,100,101,41,32,79,112,101,114,97,116,105,111,110,58,32,37,115,0,0,0,0,0,45,45,116,105,109,105,110,103,32,32,32,32,32,32,32,32,32,32,32,32,32,45,32,84,105,109,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,10,0,0,0,0,0,0,67,111,110,102,105,103,117,114,97,116,105,111,110,47,83,101,116,117,112,32,101,114,114,111,114,46,10,0,0,0,0,0,78,65,77,69,0,0,0,0,77,101,115,115,97,103,101,32,72,97,110,100,108,101,114,32,105,110,105,116,105,97,108,105,115,101,100,46,0,0,0,0,106,111,105,110,0,0,0,0,79,112,101,110,101,100,32,62,37,115,60,10,0,0,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,104,101,97,100,101,114,10,0,0,79,112,101,110,105,110,103,32,37,115,10,0,0,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,10,0,80,97,114,115,101,114,58,32,40,76,101,97,102,32,110,111,100,101,41,32,82,101,108,97,116,105,111,110,58,32,37,115,0,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,100,101,108,101,116,101,95,114,101,108,97,116,105,111,110,32,91,37,115,93,10,0,0,45,45,116,105,109,101,45,108,111,103,103,105,110,103,32,32,32,32,32,32,32,45,32,68,105,115,97,98,108,101,32,116,105,109,101,115,32,105,110,32,108,111,103,32,109,101,115,115,97,103,101,115,10,0,0,0,78,111,32,117,112,100,97,116,101,115,32,116,111,32,116,104,101,32,100,97,116,97,32,100,105,99,116,105,111,110,97,114,121,32,97,114,101,32,98,101,105,110,103,32,109,97,100,101,33,10,0,0,0,0,0,0,82,69,76,65,84,73,79,78,0,0,0,0,0,0,0,0,69,118,101,110,116,32,72,97,110,100,108,101,114,32,105,110,105,116,105,97,108,105,115,101,100,46,0,0,0,0,0,0,105,116,101,114,97,116,105,118,101,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,104,101,97,100,101,114,10,0,0,69,78,84,69,82,32,114,108,95,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,98,111,116,104,10,0,0,46,104,115,104,0,0,0,0,69,88,73,84,105,110,103,32,40,85,78,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,10,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,45,45,115,116,97,116,117,115,32,32,32,32,32,32,32,32,32,32,32,32,32,45,32,83,116,97,116,117,115,32,109,101,115,115,97,103,101,115,10,0,69,114,114,111,114,32,99,114,101,97,116,105,110,103,32,100,105,114,101,99,116,111,114,121,32,91,37,115,93,33,10,0,97,100,100,32,40,37,115,41,32,40,37,115,44,37,115,44,37,115,44,45,44,45,44,37,115,41,0,0,0,0,0,0,69,110,100,32,40,69,114,114,41,58,32,97,116,116,114,105,98,117,116,101,95,102,105,110,100,10,0,0,0,0,0,0,69,120,105,116,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,100,111,95,99,111,110,102,105,103,117,114,97,116,105,111,110,40,41,0,0,0,0,0,0,0,105,111,111,110,0,0,0,0,82,79,79,84,32,78,79,68,69,10,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,97,116,116,114,105,98,117,116,101,10,0,79,80,69,82,65,84,79,82,32,69,110,100,58,32,114,108,95,100,105,115,112,108,97,121,10,0,0,0,0,0,0,0,97,100,100,32,40,37,115,41,32,40,37,115,44,37,115,44,70,65,76,83,69,44,48,44,70,65,76,83,69,44,37,115,41,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,45,45,113,117,105,101,116,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,32,81,117,105,101,116,32,109,111,100,101,10,0,0,0,0,0,0,79,98,115,111,108,101,116,101,100,32,99,111,100,101,32,99,97,108,108,101,100,33,10,0,66,79,79,76,69,65,78,0,42,42,42,32,66,85,73,76,84,32,104,97,115,104,32,116,97,98,108,101,32,111,110,32,114,101,108,32,91,37,115,93,10,0,0,0,0,0,0,0,69,110,100,32,40,79,107,41,58,32,97,116,116,114,105,98,117,116,101,95,102,105,110,100,10,0,0,0,0,0,0,0,124,32,67,111,110,102,105,103,117,114,105,110,103,32,116,104,101,32,62,116,101,109,112,111,114,97,114,121,60,32,40,116,101,109,112,100,98,41,32,100,97,116,97,98,97,115,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,124,10,0,0,0,105,110,116,101,114,115,101,99,116,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,107,101,121,99,111,109,112,111,110,101,110,116,10,0,0,0,0,0,100,105,115,112,108,97,121,58,32,78,79,32,68,97,116,97,32,112,114,101,115,101,110,116,32,45,32,66,117,105,108,100,105,110,103,32,116,117,112,108,101,32,102,114,111,109,32,114,101,108,97,116,105,111,110,46,10,0,0,0,0,0,0,0,97,100,100,32,40,37,115,41,32,40,37,115,44,37,115,44,84,82,85,69,44,48,44,70,65,76,83,69,44,37,115,41,0,0,0,0,0,0,0,0,80,97,114,115,101,114,58,32,80,114,111,99,101,115,115,105,110,103,32,118,97,114,105,97,98,108,101,32,37,115,10,0,45,45,112,114,111,100,117,99,116,45,106,111,105,110,32,32,32,32,32,32,32,45,32,69,110,97,98,108,101,32,112,114,111,100,117,99,116,32,105,110,32,106,111,105,110,115,46,10,0,0,0,0,0,0,0,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,100,97,116,97,98,97,115,101,32,91,37,115,93,10,0,0,0,0,97,100,100,32,40,37,115,41,32,40,37,115,44,49,41,0,10,67,111,117,110,116,58,10,45,45,45,45,45,45,10,0,70,111,117,110,100,32,97,116,116,114,105,98,117,116,101,32,35,37,100,32,91,37,115,93,10,0,0,0,0,0,0,0,124,32,67,111,110,102,105,103,117,114,105,110,103,32,116,104,101,32,62,100,101,102,97,117,108,116,60,32,40,117,115,101,114,41,32,100,97,116,97,98,97,115,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,124,10,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,0,0,0,0,0,0,0,0,73,110,115,117,102,102,105,99,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,111,112,101,114,97,116,105,111,110,115,46,10,0,0,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,115,105,122,101,10,0,0,0,0,0,100,105,115,112,108,97,121,58,32,68,97,116,97,32,112,114,101,115,101,110,116,32,45,32,85,115,105,110,103,32,116,117,112,108,101,32,115,116,114,117,99,116,32,102,111,114,32,97,116,116,114,105,98,115,46,10,0,0,0,0,0,0,0,0,109,97,115,116,101,114,0,0,84,111,116,97,108,32,76,111,103,105,99,97,108,32,82,101,97,100,115,58,32,32,37,100,10,84,111,116,97,108,32,80,104,121,115,105,99,97,108,32,82,101,97,100,115,58,32,37,100,10,84,111,116,97,108,32,87,114,105,116,101,115,58,32,32,32,32,32,32,32,32,32,37,100,10,0,0,0,0,0,99,111,114,114,117,112,116,101,100,32,112,114,111,103,114,97,109,0,0,0,0,0,0,0,40,112,116,95,112,111,112,95,115,116,97,99,107,41,32,45,32,78,111,32,109,111,114,101,32,110,111,100,101,115,33,0,45,45,45,32,110,111,100,101,32,91,37,112,93,10,0,0,45,45,112,97,100,100,105,110,103,32,32,32,32,32,32,32,32,32,32,32,32,45,32,80,97,100,32,114,101,108,97,116,105,111,110,32,110,97,109,101,115,32,116,111,32,97,116,116,114,105,98,117,116,101,115,10,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,69,110,100,32,40,76,69,65,80,41,58,32,114,101,103,101,120,101,99,10,0,0,0,0,68,97,116,97,98,97,115,101,32,105,115,32,105,110,32,116,104,101,32,105,110,99,111,114,114,101,99,116,32,102,111,114,109,97,116,46,32,72,97,115,32,99,111,110,118,101,114,116,32,98,101,101,110,32,114,117,110,63,10,0,0,0,0,0,119,0,0,0,0,0,0,0,73,78,84,69,71,69,82,0,99,97,115,101,0,0,0,0,69,110,100,32,40,79,107,41,58,32,104,97,115,104,105,110,103,95,108,111,97,100,10,0,97,116,116,114,105,98,117,116,101,115,46,97,116,116,114,105,98,117,116,101,95,102,105,110,100,40,99,112,121,41,0,0,124,32,67,111,110,102,105,103,117,114,105,110,103,32,116,104,101,32,62,77,65,83,84,69,82,60,32,100,97,116,97,98,97,115,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,124,10,0,0,0,0,0,0,0,105,110,102,105,120,0,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,100,116,121,112,101,10,0,0,0,0,79,80,69,82,65,84,79,82,32,115,116,97,114,116,58,32,114,108,95,100,105,115,112,108,97,121,10,0,0,0,0,0,119,98,0,0,0,0,0,0,67,111,109,112,108,101,116,101,100,32,112,97,114,115,101,32,116,114,101,101,32,101,120,101,99,117,116,105,111,110,46,0,45,45,104,101,108,112,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,45,32,84,104,105,115,32,104,101,108,112,32,112,97,103,101,10,0,0,85,110,100,101,102,105,110,101,100,32,118,97,114,105,97,98,108,101,32,110,97,109,101,32,40,37,115,41,46,10,0,0,83,84,82,73,78,71,0,0,42,42,42,32,76,79,65,68,69,68,32,104,97,115,104,32,116,97,98,108,101,32,102,114,111,109,32,91,37,115,93,10,0,0,0,0,0,0,0,0,82,101,108,97,116,105,111,110,58,32,91,37,115,93,32,65,116,116,114,105,98,117,116,101,58,32,91,37,115,93,10,0,43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,43,10,0,0,0,0,0,0,0,109,97,115,116,101,114,0,0,105,110,100,105,99,101,115,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,97,116,116,114,105,98,117,116,101,10,0,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,58,32,114,108,95,100,105,102,102,101,114,101,110,99,101,10,0,0,0,0,67,114,101,97,116,105,110,103,32,102,105,108,101,58,32,91,37,115,93,10,0,0,0,0,69,114,114,111,114,115,32,111,99,99,117,114,101,100,46,0,45,45,109,101,114,103,101,45,115,116,100,101,114,114,32,32,32,32,32,32,32,45,32,77,101,114,103,101,32,115,116,100,101,114,114,32,105,110,116,111,32,115,116,100,111,117,116,46,10,0,0,0,0,0,0,0,69,114,114,111,114,32,119,105,116,104,32,118,97,114,105,97,98,108,101,115,46,10,0,0,35,35,35,0,0,0,0,0,97,100,100,32,40,37,115,41,32,40,37,115,44,37,100,41,0,0,0,0,0,0,0,0,69,110,100,32,40,69,82,82,79,82,41,58,32,104,97,115,104,105,110,103,95,108,111,97,100,10,0,0,0,0,0,0,83,116,97,114,116,58,32,97,116,116,114,105,98,117,116,101,95,102,105,110,100,10,0,0,69,120,105,116,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,100,111,95,99,111,110,102,105,103,117,114,97,116,105,111,110,40,41,0,0,0,0,0,105,110,100,101,120,101,115,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,97,116,116,114,105,98,117,116,101,32,110,97,109,101,10,0,0,0,112,97,114,115,101,114,46,110,101,119,95,112,97,114,115,101,95,110,111,100,101,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,40,69,82,82,79,82,41,58,32,114,108,95,100,105,102,102,101,114,101,110,99,101,10,0,0,0,0,37,115,37,115,0,0,0,0,70,105,110,105,115,104,101,100,32,112,114,111,99,101,115,115,105,110,103,46,0,0,0,0,45,45,108,111,110,103,45,99,111,109,109,97,110,100,115,32,32,32,32,32,32,45,32,76,111,110,103,32,99,111,109,109,97,110,100,115,32,101,110,97,98,108,101,100,46,10,0,0,69,114,114,111,114,32,105,110,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,101,46,10,0,0,0,97,100,100,32,40,37,115,41,32,40,37,115,44,37,115,41,0,0,0,0,0,0,0,0,112,61,37,117,10,0,0,0,120,111,114,0,0,0,0,0,69,110,100,32,40,79,107,41,58,32,97,116,116,114,105,98,117,116,101,115,95,112,114,105,110,116,84,85,80,76,69,10,0,0,0,0,0,0,0,0,100,97,116,97,98,97,115,101,47,0,0,0,0,0,0,0,105,100,120,115,116,111,114,101,0,0,0,0,0,0,0,0,32,32,32,68,37,100,58,32,0,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,95,119,114,105,116,101,95,97,116,116,114,105,98,117,116,101,10,0,0,0,0,0,0,0,91,37,115,93,32,105,115,32,78,79,84,32,112,114,101,115,101,110,116,10,0,0,0,0,37,115,47,0,0,0,0,0,84,105,109,101,58,32,37,45,46,49,49,102,10,0,0,0,67,108,111,115,105,110,103,46,10,0,0,0,0,0,0,0,45,45,100,105,114,101,99,116,111,114,121,32,100,105,114,32,32,32,32,32,32,45,32,76,69,65,80,32,100,105,114,101,99,116,111,114,121,10,0,0,76,101,110,103,116,104,32,111,102,32,100,97,116,97,32,116,121,112,101,32,105,110,118,97,108,105,100,46,10,0,0,0,37,115,37,115,0,0,0,0,82,101,97,100,32,72,97,115,104,105,110,103,32,78,111,100,101,58,32,91,37,115,93,0,111,114,0,0,0,0,0,0,83,116,97,114,116,58,32,97,116,116,114,105,98,117,116,101,115,95,112,114,105,110,116,84,85,80,76,69,10,0,0,0,37,115,37,115,0,0,0,0,105,100,120,112,114,105,110,116,0,0,0,0,0,0,0,0,85,78,68,69,70,73,78,69,68,0,0,0,0,0,0,0,91,37,115,93,32,105,115,32,97,108,114,101,97,100,121,32,112,114,101,115,101,110,116,10,0,0,0,0,0,0,0,0,114,101,108,97,116,105,111,110,46,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,0,0,0,0,0,0,0,0,76,111,103,105,99,97,108,32,82,101,97,100,115,58,32,32,37,100,10,80,104,121,115,105,99,97,108,32,82,101,97,100,115,58,32,37,100,10,87,114,105,116,101,115,58,32,32,32,32,32,32,32,32,32,37,100,10,0,0,0,0,0,0,0,45,45,100,101,98,117,103,32,91,110,93,32,32,32,32,32,32,32,32,32,32,45,32,69,110,97,98,108,101,32,68,101,98,117,103,32,77,111,100,101,32,40,119,105,116,104,32,111,112,116,105,111,110,97,108,32,108,101,118,101,108,41,10,0,73,110,118,97,108,105,100,32,115,101,116,116,105,110,103,46,10,0,0,0,0,0,0,0,68,97,116,97,32,100,105,99,116,105,111,110,97,114,121,32,117,112,100,97,116,101,115,32,102,111,114,32,115,121,115,116,101,109,32,116,97,98,108,101,115,32,97,114,101,32,110,111,119,32,98,101,105,110,103,32,109,97,100,101,46,10,0,0,104,61,37,99,10,0,0,0,97,110,100,0,0,0,0,0,69,110,100,32,40,79,107,41,58,32,97,116,116,114,105,98,117,116,101,115,95,112,114,105,110,116,70,82,79,77,82,69,76,10,0,0,0,0,0,0,67,104,101,99,107,105,110,103,58,32,91,37,115,93,10,0,104,105,103,104,0,0,0,0,97,43,98,0,0,0,0,0,66,79,79,76,69,65,78,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,100,105,102,102,101,114,101,110,99,101,10,0,0,44,32,47,92,58,40,41,0,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,100,101,116,101,114,109,105,110,101,32,110,101,120,116,32,116,111,107,101,110,46,0,0,0,0,45,45,100,97,116,97,98,97,115,101,32,100,98,32,32,32,32,32,32,32,32,45,32,68,97,116,97,98,97,115,101,32,116,111,32,111,112,101,110,10,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,110,102,105,103,117,114,97,116,105,111,110,46,10,0,108,101,97,112,115,99,114,105,112,116,115,0,0,0,0,0,114,0,0,0,0,0,0,0,83,111,109,101,116,104,105,110,103,32,115,116,114,97,110,103,101,32,104,97,115,32,104,97,112,112,101,110,101,100,32,40,84,117,112,108,101,32,109,97,116,99,104,117,112,44,32,99,97,110,39,116,32,100,101,116,101,114,109,105,110,101,32,50,110,100,32,50,110,100,32,108,101,102,116,47,114,105,103,104,116,41,0,0,0,0,0,0,83,116,97,114,116,58,32,97,116,116,114,105,98,117,116,101,115,95,112,114,105,110,116,70,82,79,77,82,69,76,10,0,69,110,116,101,114,105,110,103,32,100,111,95,99,111,110,102,105,103,117,114,97,116,105,111,110,40,41,0,0,0,0,0,104,101,108,112,0,0,0,0,73,78,84,69,71,69,82,0,85,110,105,111,110,32,111,102,32,37,115,32,97,110,100,32,37,115,46,0,0,0,0,0,46,116,109,112,0,0,0,0,63,0,0,0,0,0,0,0,67,97,110,110,111,116,32,100,101,116,101,114,109,105,110,101,32,111,112,101,114,97,116,105,111,110,0,0,0,0,0,0,45,45,99,111,110,102,105,103,117,114,101,32,115,99,114,105,112,116,32,32,32,45,32,67,111,110,102,105,103,117,114,101,32,40,105,110,115,116,97,108,108,41,32,76,69,65,80,10,0,0,0,0,0,0,0,0,69,114,114,111,114,32,40,37,115,41,32,111,99,99,117,114,101,100,32,100,117,114,105,110,103,32,100,97,116,97,32,100,105,99,116,105,111,110,97,114,121,32,108,111,111,107,117,112,46,10,0,0,0,0,0,0,40,78,65,77,69,44,115,116,114,105,110,103,44,50,53,41,44,40,70,73,76,69,44,115,116,114,105,110,103,44,49,50,55,41,0,0,0,0,0,0,42,42,42,32,83,116,97,114,116,105,110,103,32,76,79,65,68,32,111,102,32,104,97,115,104,32,116,97,98,108,101,32,102,114,111,109,32,91,37,115,93,10,0,0,0,0,0,0,83,111,109,101,116,104,105,110,103,32,115,116,114,97,110,103,101,32,104,97,115,32,104,97,112,112,101,110,101,100,32,40,84,117,112,108,101,32,109,97,116,99,104,117,112,44,32,99,97,110,39,116,32,100,101,116,101,114,109,105,110,101,32,108,101,102,116,47,114,105,103,104,116,41,0,0,0,0,0,0,10,76,69,65,80,32,116,101,114,109,105,110,97,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,102,111,108,108,111,119,105,110,103,32,116,101,114,109,105,110,97,116,105,111,110,32,115,105,103,110,97,108,46,10,0,0,0,0,102,108,117,115,104,0,0,0,82,73,71,72,84,32,78,79,68,69,10,0,0,0,0,0,83,84,82,73,78,71,0,0,79,80,69,82,65,84,79,82,32,69,110,100,58,32,114,108,95,112,114,111,106,101,99,116,10,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,82,101,118,101,114,115,101,32,101,110,103,105,110,101,101,114,105,110,103,32,100,97,116,97,98,97,115,101,46,46,46,0,45,45,97,99,116,105,118,105,116,121,45,102,105,108,101,32,102,105,108,101,32,45,32,79,117,116,112,117,116,32,97,99,116,105,118,105,116,121,32,102,105,108,101,32,116,111,32,102,105,108,101,10,0,0,0,0,67,111,110,100,105,116,105,111,110,32,110,111,116,32,115,112,101,99,105,102,105,101,100,46,10,0,0,0,0,0,0,0,114,101,108,115,104,105,112,0,69,78,84,69,82,105,110,103,58,32,104,97,115,104,105,110,103,95,108,111,97,100,10,0,62,85,78,75,78,79,87,78,60,0,0,0,0,0,0,0,78,111,32,118,97,114,105,97,98,108,101,115,32,115,101,116,33,0,0,0,0,0,0,0,32,100,101,116,101,99,116,101,100,33,32,67,108,111,115,105,110,103,32,100,97,116,97,98,97,115,101,115,46,46,46,10,0,0,0,0,0,0,0,0,101,120,105,116,0,0,0,0,65,110,32,101,120,116,101,110,115,105,98,108,101,32,97,110,100,32,102,114,101,101,32,82,68,66,77,83,0,0,0,0,78,111,32,111,117,116,112,117,116,32,116,117,112,108,101,32,112,114,101,112,97,114,101,100,46,46,46,10,0,0,0,0,67,114,101,97,116,105,110,103,32,110,111,114,109,97,108,32,114,101,108,97,116,105,111,110,32,91,37,115,93,46,10,0,100,97,116,97,98,97,115,101,47,0,0,0,0,0,0,0,10,108,101,97,112,32,91,111,112,116,105,111,110,115,93,10,10,0,0,0,0,0,0,0,67,111,110,100,105,116,105,111,110,32,99,111,110,116,97,105,110,115,32,117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,46,10,0,40,102,114,101,108,97,116,105,111,110,44,115,116,114,105,110,103,44,50,53,41,44,40,112,114,101,108,97,116,105,111,110,44,115,116,114,105,110,103,44,50,53,41,44,40,102,107,101,121,49,44,115,116,114,105,110,103,44,50,53,41,44,40,102,107,101,121,50,44,115,116,114,105,110,103,44,50,53,41,44,40,102,107,101,121,51,44,115,116,114,105,110,103,44,50,53,41,44,40,112,107,101,121,49,44,115,116,114,105,110,103,44,50,53,41,44,40,112,107,101,121,50,44,115,116,114,105,110,103,44,50,53,41,44,40,112,107,101,121,51,44,115,116,114,105,110,103,44,50,53,41,0,69,88,73,84,105,110,103,32,104,97,115,104,105,110,103,95,115,97,118,101,10,0,0,0,88,79,82,10,0,0,0,0,114,0,0,0,0,0,0,0,83,105,103,110,97,108,32,40,37,100,41,32,0,0,0,0,101,120,101,99,0,0,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,32,111,99,99,117,114,101,100,46,10,37,115,10,0,0,0,0,0,0,91,112,114,111,106,101,99,116,93,32,65,116,116,101,109,112,116,101,100,32,116,111,32,97,100,100,32,100,117,112,108,105,99,97,116,101,32,116,117,112,108,101,32,116,111,32,104,97,115,104,32,116,97,98,108,101,33,32,40,37,115,41,10,0,67,114,101,97,116,105,110,103,32,116,101,109,112,111,114,97,114,121,32,114,101,108,97,116,105,111,110,32,91,37,115,93,32,105,110,32,116,101,109,112,100,98,46,10,0,0,0,0,37,115,37,115,0,0,0,0,78,85,76,76,32,112,97,114,97,109,101,116,101,114,0,0,40,112,116,95,112,111,112,95,115,116,97,99,107,41,0,0,84,121,112,101,32,34,97,100,100,114,101,115,115,101,115,34,32,102,111,114,32,97,32,108,105,115,116,32,111,102,32,97,100,100,114,101,115,115,101,115,10,0,0,0,0,0,0,0,86,97,108,105,100,32,100,97,116,97,98,97,115,101,115,32,97,114,101,58,10,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,0,0,83,116,97,114,116,32,40,76,69,65,80,41,58,32,114,101,103,101,120,101,99,10,0,0,67,111,110,100,105,116,105,111,110,32,99,111,110,116,97,105,110,115,32,117,110,115,117,112,112,111,114,116,101,100,32,98,111,111,108,101,97,110,32,111,112,101,114,97,116,111,114,46,10,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,116,105,109,105,110,103,0,0,108,101,97,112,116,121,112,101,115,0,0,0,0,0,0,0,42,42,42,32,83,65,86,69,68,32,104,97,115,104,32,116,97,98,108,101,32,116,111,32,91,37,115,93,10,0,0,0,79,82,10,0,0,0,0,0,118,97,114,115,0,0,0,0,84,101,114,109,105,110,97,116,101,32,40,83,73,71,84,69,82,77,41,32,0,0,0,0,101,114,97,115,101,0,0,0,84,117,112,108,101,32,83,116,114,105,110,103,58,32,37,115,10,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,99,114,101,97,116,101,10,0,0,0,0,0,0,0,67,114,101,97,116,105,110,103,32,97,32,100,97,116,97,98,97,115,101,46,46,46,0,0,83,101,101,32,116,104,101,32,102,105,108,101,32,67,79,80,89,73,78,71,32,102,111,114,32,102,117,108,108,32,100,101,116,97,105,108,115,44,32,111,114,32,119,114,105,116,101,32,116,111,32,116,104,101,32,97,100,100,114,101,115,115,32,97,98,111,118,101,46,10,0,0,67,111,110,100,105,116,105,111,110,32,99,111,110,116,97,105,110,115,32,117,110,101,120,112,101,99,116,101,100,32,99,104,97,114,97,99,116,101,114,46,10,0,0,0,0,0,0,0,40,78,65,77,69,44,83,84,82,73,78,71,44,50,53,41,44,40,83,73,90,69,44,73,78,84,69,71,69,82,44,53,41,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,65,78,68,10,0,0,0,0,99,111,110,102,105,103,115,47,0,0,0,0,0,0,0,0,72,97,110,103,117,112,32,40,83,73,71,72,85,80,41,32,0,0,0,0,0,0,0,0,116,101,109,112,100,98,0,0,100,117,112,108,105,99,97,116,101,0,0,0,0,0,0,0,80,114,111,106,101,99,116,58,32,62,37,115,60,0,0,0,84,69,77,80,0,0,0,0,67,114,101,97,116,105,110,103,32,97,32,114,101,108,97,116,105,111,110,46,46,46,0,0,70,111,117,110,100,97,116,105,111,110,44,32,73,110,99,46,44,32,54,55,53,32,77,97,115,115,32,65,118,101,44,32,67,97,109,98,114,105,100,103,101,44,32,77,65,32,48,50,49,51,57,44,32,85,83,65,46,10,0,0,0,0,0,0,69,114,114,111,114,32,111,99,99,117,114,101,100,32,100,117,114,105,110,103,32,101,120,112,114,101,115,115,105,111,110,32,101,120,101,99,117,116,105,111,110,46,10,58,37,115,10,0,35,35,0,0,0,0,0,0,108,101,97,112,97,116,116,114,105,98,117,116,101,115,0,0,9,0,0,0,0,0,0,0,60,69,78,68,62,10,0,0,37,115,37,115,37,115,0,0,91,116,101,109,112,100,98,93,32,99,108,111,115,101,100,46,0,0,0,0,0,0,0,0,100,117,109,112,0,0,0,0,76,69,65,80,32,82,68,66,77,83,32,37,100,46,37,100,46,37,100,0,0,0,0,0,46,104,115,104,0,0,0,0,65,116,32,97,116,116,114,105,98,58,32,91,37,100,93,10,0,0,0,0,0,0,0,0,78,65,77,69,0,0,0,0,83,73,90,69,0,0,0,0,97,108,111,110,103,32,119,105,116,104,32,116,104,105,115,32,112,114,111,103,114,97,109,59,32,105,102,32,110,111,116,44,32,119,114,105,116,101,32,116,111,32,116,104,101,32,70,114,101,101,32,83,111,102,116,119,97,114,101,10,0,0,0,0,85,110,114,101,99,111,103,110,105,115,101,100,32,116,111,107,101,110,40,115,41,32,105,110,32,101,120,112,114,101,115,115,105,111,110,46,10,58,37,115,10,0,0,0,0,0,0,0,40,82,69,76,65,84,73,79,78,44,83,84,82,73,78,71,44,50,53,41,44,40,65,84,84,82,73,66,85,84,69,44,83,84,82,73,78,71,44,50,53,41,44,40,84,89,80,69,44,83,84,82,73,78,71,44,50,53,41,44,40,83,73,90,69,44,73,78,84,69,71,69,82,44,53,41,0,0,0,0,42,0,0,0,0,0,0,0,40,32,37,115,32,37,115,32,37,115,32,41,10,0,0,0,91,109,97,115,116,101,114,95,100,98,93,32,99,108,111,115,101,100,46,0,0,0,0,0,100,105,115,112,111,115,101,0,10,0,0,0,0,0,0,0,114,108,95,112,114,111,106,101,99,116,58,32,83,101,97,114,99,104,32,65,116,116,114,105,98,58,32,91,37,115,93,10,0,0,0,0,0,0,0,0,108,101,97,112,114,101,108,0,84,89,80,69,0,0,0,0,68,111,110,101,46,10,0,0,89,111,117,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,99,101,105,118,101,100,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,71,78,85,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,10,0,0,0,0,0,0,72,97,115,104,32,102,105,108,101,32,97,112,112,101,97,114,115,32,99,111,114,114,117,112,116,46,10,0,0,0,0,0,108,101,97,112,114,101,108,0,104,61,37,99,10,101,61,37,115,10,112,61,37,117,10,0,70,65,76,83,69,0,0,0,78,111,32,109,111,114,101,32,115,112,97,99,101,32,102,111,114,32,118,97,114,105,97,98,108,101,32,34,37,115,34,46,10,0,0,0,0,0,0,0,91,99,117,114,114,101,110,116,95,100,98,93,32,99,108,111,115,101,100,46,0,0,0,0,100,105,115,112,108,97,121,0,91,91,37,100,93,37,115,93,0,0,0,0,0,0,0,0,114,108,95,112,114,111,106,101,99,116,58,32,78,111,32,97,116,116,114,105,98,115,58,32,91,37,100,93,10,0,0,0,117,112,100,97,116,101,32,40,37,115,41,32,40,37,115,61,39,37,115,39,41,32,40,37,115,61,39,37,115,39,41,0,65,84,84,82,73,66,85,84,69,0,0,0,0,0,0,0,71,78,85,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,32,102,111,114,32,109,111,114,101,32,100,101,116,97,105,108,115,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([79,98,115,111,108,101,116,101,100,32,111,112,101,114,97,116,105,111,110,32,40,37,115,41,46,10,0,0,0,0,0,0,40,78,65,77,69,44,83,84,82,73,78,71,44,50,53,41,44,40,70,78,65,77,69,44,83,84,82,73,78,71,44,50,53,41,44,40,84,69,77,80,44,66,79,79,76,69,65,78,44,49,41,44,40,78,79,65,84,84,82,73,66,83,44,73,78,84,69,71,69,82,44,52,41,44,40,85,80,68,65,84,69,68,44,66,79,79,76,69,65,78,44,49,41,44,40,83,89,83,84,69,77,44,66,79,79,76,69,65,78,44,49,41,0,0,0,0,0,0,0,0,91,37,100,93,0,0,0,0,84,82,85,69,0,0,0,0,83,101,116,116,105,110,103,58,32,37,115,32,116,111,32,37,115,10,0,0,0,0,0,0,65,99,116,105,118,101,32,68,66,32,105,115,32,97,32,115,121,115,116,101,109,32,100,97,116,97,98,97,115,101,46,32,83,107,105,112,112,105,110,103,32,115,104,117,116,100,111,119,110,32,116,111,32,97,118,101,114,116,32,99,111,114,114,117,112,116,105,111,110,10,0,0,100,105,114,0,0,0,0,0,79,112,101,110,105,110,103,32,62,37,115,60,10,0,0,0,37,37,115,32,9,0,0,0,65,116,116,114,105,98,117,116,101,32,76,105,115,116,58,32,37,115,10,0,0,0,0,0,70,65,76,83,69,0,0,0,82,69,76,65,84,73,79,78,0,0,0,0,0,0,0,0,77,69,82,67,72,65,78,84,65,66,73,76,73,84,89,32,111,114,32,70,73,84,78,69,83,83,32,70,79,82,32,65,32,80,65,82,84,73,67,85,76,65,82,32,80,85,82,80,79,83,69,46,32,32,83,101,101,32,116,104,101,10,0,0,69,114,114,111,114,32,100,101,116,101,114,109,105,110,105,110,103,32,116,104,101,32,116,105,109,101,46,10,0,0,0,0,108,101,97,112,100,97,116,97,0,0,0,0,0,0,0,0,83,97,118,105,110,103,32,72,97,115,104,32,84,97,98,108,101,32,70,105,108,101,58,32,32,37,115,0,0,0,0,0,67,97,110,110,111,116,32,112,114,111,99,101,115,115,32,91,37,115,93,0,0,0,0,0,34,39,96,0,0,0,0,0,37,45,50,53,115,58,37,115,10,0,0,0,0,0,0,0,67,108,111,115,105,110,103,32,91,37,115,93,32,100,97,116,97,98,97,115,101,46,0,0,100,105,102,102,101,114,101,110,99,101,0,0,0,0,0,0,37,37,45,37,100,46,37,100,115,32,0,0,0,0,0,0,37,99,37,115,37,99,0,0,46,102,108,100,0,0,0,0,84,82,85,69,0,0,0,0,108,101,97,112,97,116,116,114,105,98,117,116,101,115,0,0,98,117,116,32,87,73,84,72,79,85,84,32,65,78,89,32,87,65,82,82,65,78,84,89,59,32,119,105,116,104,111,117,116,32,101,118,101,110,32,116,104,101,32,105,109,112,108,105,101,100,32,119,97,114,114,97,110,116,121,32,111,102,10,0,85,110,115,117,112,112,111,114,116,101,100,32,100,97,116,97,32,116,121,112,101,32,101,110,99,111,117,110,116,101,114,101,100,46,10,0,0,0,0,0,40,78,65,77,69,44,83,84,82,73,78,71,44,50,53,41,44,40,68,73,82,44,83,84,82,73,78,71,44,49,50,55,41,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,37,115,32,0,0,0,0,0,76,101,102,116,58,32,62,37,115,60,32,32,66,111,111,108,58,32,62,37,115,60,32,32,82,105,103,104,116,58,32,62,37,115,60,10,0,0,0,0,77,105,110,105,109,117,109,32,100,101,98,117,103,32,108,101,118,101,108,32,115,101,116,32,116,111,58,32,37,100,0,0,67,111,109,109,97,110,100,32,116,111,111,32,108,111,110,103,33,0,0,0,0,0,0,0,100,101,115,99,114,105,98,101,0,0,0,0,0,0,0,0,76,69,70,84,32,78,79,68,69,10,0,0,0,0,0,0,37,37,45,53,46,53,115,32,0,0,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,112,114,111,106,101,99,116,10,0,0,0,0,0,85,112,100,97,116,105,110,103,32,116,101,109,112,111,114,97,114,121,32,115,116,97,116,117,115,32,105,110,32,91,37,115,93,0,0,0,0,0,0,0,100,105,115,112,108,97,121,40,112,114,111,106,101,99,116,40,115,101,108,101,99,116,32,40,37,115,41,32,40,37,115,61,34,37,115,34,41,41,32,40,37,115,44,37,115,44,37,115,41,41,0,0,0,0,0,0,84,104,105,115,32,112,114,111,103,114,97,109,32,105,115,32,100,105,115,116,114,105,98,117,116,101,100,32,105,110,32,116,104,101,32,104,111,112,101,32,116,104,97,116,32,105,116,32,119,105,108,108,32,98,101,32,117,115,101,102,117,108,44,10,0,0,0,0,0,0,0,0,69,114,114,111,114,32,99,108,111,115,105,110,103,32,102,105,108,101,46,10,0,0,0,0,78,111,32,100,97,116,97,32,100,105,99,116,105,111,110,97,114,121,32,117,112,100,97,116,101,115,32,102,111,114,32,115,121,115,116,101,109,32,116,97,98,108,101,115,32,99,97,110,32,98,101,32,109,97,100,101,46,10,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,104,97,115,104,105,110,103,95,115,97,118,101,10,0,0,81,117,97,108,58,32,37,115,0,0,0,0,0,0,0,0,69,110,100,32,40,79,107,41,58,32,101,118,97,108,117,97,116,101,10,0,0,0,0,0,45,0,0,0,0,0,0,0,109,105,110,100,101,98,117,103,32,108,101,118,101,108,32,102,97,108,108,115,32,98,101,108,111,119,32,109,105,110,105,109,117,109,32,111,102,32,37,100,46,10,0,0,0,0,0,0,10,69,120,101,99,117,116,105,110,103,46,46,46,10,37,115,10,0,0,0,0,0,0,0,100,101,108,114,101,108,0,0,32,45,32,37,115,10,0,0,116,97,98,0,0,0,0,0,67,117,114,114,101,110,116,32,108,105,109,105,116,32,115,101,116,32,116,111,32,37,117,46,0,0,0,0,0,0,0,0,116,101,109,112,100,98,0,0,40,97,116,32,121,111,117,114,32,111,112,116,105,111,110,41,32,97,110,121,32,108,97,116,101,114,32,118,101,114,115,105,111,110,46,10,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,109,97,110,100,32,108,105,110,101,32,112,97,114,97,109,101,116,101,114,32,91,37,115,93,46,10,0,0,0,115,116,97,114,116,117,112,0,45,45,45,32,78,111,100,101,32,102,114,101,101,58,32,91,37,115,93,10,0,0,0,0,102,114,101,108,97,116,105,111,110,0,0,0,0,0,0,0,69,110,100,32,40,85,110,115,117,112,112,111,114,116,101,100,61,69,114,114,41,58,32,101,118,97,108,117,97,116,101,10,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,109,105,110,100,101,98,117,103,32,108,101,118,101,108,32,101,120,99,101,101,100,115,32,109,97,120,105,109,117,109,32,111,102,32,37,100,46,10,0,0,13,0,0,0,0,0,0,0,100,101,108,101,116,101,0,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,102,105,108,101,32,91,37,115,93,46,10,0,0,0,0,0,0,0,97,117,116,111,0,0,0,0,91,37,100,93,32,97,116,116,114,105,98,117,116,101,115,46,10,0,0,0,0,0,0,0,111,117,116,32,111,102,32,115,112,97,99,101,0,0,0,0,46,115,114,99,0,0,0,0,80,111,112,117,108,97,116,105,110,103,32,115,116,97,99,107,46,46,46,0,0,0,0,0,69,110,116,101,114,58,32,40,104,97,115,104,105,110,103,41,32,104,97,115,104,105,110,103,95,105,110,115,101,114,116,10,0,0,0,0,0,0,0,0,116,104,101,32,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,59,32,101,105,116,104,101,114,32,118,101,114,115,105,111,110,32,50,32,111,102,32,116,104,101,32,76,105,99,101,110,115,101,44,32,111,114,10,0,0,0,0,0,0,69,110,100,32,40,69,114,114,111,114,41,58,32,100,111,95,105,110,116,95,101,118,97,108,10,0,0,0,0,0,0,0,79,112,101,114,97,116,111,114,32,40,37,115,41,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,46,10,0,100,97,116,97,98,97,115,101,47,0,0,0,0,0,0,0,100,101,98,117,103,0,0,0,35,32,68,97,116,97,98,97,115,101,58,32,37,115,10,0,107,61,61,37,105,9,0,0,112,114,101,108,97,116,105,111,110,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,98,111,111,108,101,97,110,32,111,112,101,114,97,116,111,114,46,0,0,0,68,101,98,117,103,32,108,101,118,101,108,32,115,101,116,32,116,111,58,32,37,100,0,0,69,79,70,32,102,114,111,109,32,115,116,100,105,110,0,0,100,101,98,117,103,0,0,0,119,105,100,116,104,0,0,0,66,79,79,76,69,65,78,0,115,111,117,114,99,101,47,0,105,116,32,117,110,100,101,114,32,116,104,101,32,116,101,114,109,115,32,111,102,32,116,104,101,32,71,78,85,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,32,97,115,32,112,117,98,108,105,115,104,101,100,32,98,121,10,0,0,0,84,121,112,101,32,99,111,110,118,101,114,115,105,111,110,32,101,114,114,111,114,46,10,0,119,43,0,0,0,0,0,0,104,97,115,104,105,110,103,46,104,97,115,104,105,110,103,95,99,114,101,97,116,101,0,0,114,101,108,115,104,105,112,0,69,110,100,32,40,85,110,105,109,112,108,101,109,101,110,116,101,100,61,69,114,114,41,58,32,101,118,97,108,117,97,116,101,10,0,0,0,0,0,0,37,100,0,0,0,0,0,0,111,112,101,110,0,0,0,0,69,110,116,101,114,105,110,103,32,100,111,95,108,101,97,112,40,41,0,0,0,0,0,0,99,114,101,97,116,101,0,0,41,10,0,0,0,0,0,0,73,78,84,69,71,69,82,0,114,101,108,97,116,105,111,110,47,0,0,0,0,0,0,0,37,115,37,115,37,115,37,115,0,0,0,0,0,0,0,0,84,104,105,115,32,112,114,111,103,114,97,109,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,59,32,121,111,117,32,99,97,110,32,114,101,100,105,115,116,114,105,98,117,116,101,32,105,116,32,97,110,100,47,111,114,32,109,111,100,105,102,121,10,0,0,0,68,97,116,97,32,116,121,112,101,115,32,97,114,101,32,105,110,99,111,109,112,97,116,105,98,108,101,46,10,0,0,0,35,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,100,105,115,97,115,116,101,114,0,0,0,0,0,0,0,46,115,114,99,0,0,0,0,115,105,122,101,111,102,61,61,37,105,10,0,0,0,0,0,115,101,108,101,99,116,32,40,37,115,41,32,40,40,37,115,61,34,37,115,34,41,97,110,100,40,37,115,61,34,37,115,34,41,41,0,0,0,0,0,88,79,82,32,45,32,83,111,114,114,121,32,116,111,32,104,97,118,101,32,108,101,97,100,32,121,111,117,32,111,110,46,46,46,0,0,0,0,0,0,37,37,115,32,9,0,0,0,68,101,98,117,103,32,108,101,118,101,108,32,102,97,108,108,115,32,98,101,108,111,119,32,109,105,110,105,109,117,109,32,111,102,32,37,100,46,10,0,10,0,0,0,0,0,0,0,99,111,112,121,105,110,103,0,44,0,0,0,0,0,0,0,65,116,116,114,105,98,117,116,101,32,91,37,115,93,32,83,105,122,101,32,91,37,100,93,32,77,97,120,32,91,37,100,93,0,0,0,0,0,0,0,37,115,37,115,37,115,37,115,0,0,0,0,0,0,0,0,58,45,41,0,0,0,0,0,32,104,116,116,112,58,47,47,108,101,97,112,46,115,111,117,114,99,101,102,111,114,103,101,46,110,101,116,10,0,0,0,65,116,116,101,109,112,116,32,116,111,32,111,112,101,110,32,116,104,101,32,99,117,114,114,101,110,116,108,121,32,111,112,101,110,32,100,97,116,97,98,97,115,101,32,91,37,115,93,46,10,0,0,0,0,0,0,94,36,46,91,40,41,124,63,43,42,92,0,0,0,0,0,111,112,101,110,0,0,0,0,69,120,105,116,58,32,104,97,115,104,105,110,103,95,108,111,97,100,10,0,0,0,0,0,69,114,114,111,114,32,119,105,116,104,32,100,97,116,97,98,97,115,101,32,110,97,109,101,32,45,32,101,120,99,101,101,100,105,110,103,32,79,83,32,108,105,109,105,116,32,40,37,100,32,99,104,97,114,115,41,33,10,0,0,0,0,0,0,37,37,45,37,100,46,37,100,115,32,0,0,0,0,0,0,68,101,98,117,103,32,108,101,118,101,108,32,101,120,99,101,101,100,115,32,109,97,120,105,109,117,109,32,111,102,32,37,100,46,10,0,0,0,0,0,67,111,109,109,97,110,100,32,99,111,109,112,108,101,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,46,0,35,32,0,0,0,0,0,0,99,111,109,112,97,99,116,0,37,115,0,0,0,0,0,0,83,84,82,73,78,71,0,0,69,88,73,84,105,110,103,32,114,101,108,97,116,105,111,110,95,105,110,115,101,114,116,10,0,0,0,0,0,0,0,0,83,89,83,84,69,77,0,0,82,101,115,101,116,116,105,110,103,32,108,97,115,116,95,100,101,108,101,116,101,100,32,116,111,32,48,10,0,0,0,0,91,37,100,93,0,0,0,0,70,111,114,32,97,32,102,117,108,108,32,108,105,115,116,32,115,101,101,32,116,104,101,32,76,69,65,80,32,104,111,109,101,32,112,97,103,101,58,10,0,0,0,0,0,0,0,0,83,101,101,107,105,110,103,32,116,111,32,108,97,115,116,95,100,101,108,101,116,101,100,32,40,37,100,41,10,0,0,0,69,88,73,84,105,110,103,32,116,117,112,108,101,95,119,114,105,116,101,10,0,0,0,0,85,110,107,110,111,119,110,32,100,97,116,97,98,97,115,101,32,115,112,101,99,105,102,105,101,100,32,91,37,115,93,46,10,0,0,0,0,0,0,0,116,114,97,105,108,105,110,103,32,92,0,0,0,0,0,0,69,110,116,101,114,58,32,104,97,115,104,105,110,103,95,114,101,116,114,105,101,118,101,32,40,37,115,41,10,0,0,0,37,115,47,37,115,37,115,37,115,0,0,0,0,0,0,0,65,115,115,105,103,110,105,110,103,32,105,110,112,117,116,32,116,111,32,91,37,115,93,10,0,0,0,0,0,0,0,0,83,116,97,114,116,58,32,101,118,97,108,117,97,116,101,10,0,0,0,0,0,0,0,0,116,97,98,0,0,0,0,0,67,97,110,110,111,116,32,99,104,97,110,103,101,32,114,101,103,114,101,115,115,105,111,110,32,115,116,97,116,117,115,32,119,105,116,104,105,110,32,112,114,111,103,114,97,109,0,0,69,114,114,111,114,32,119,114,105,116,105,110,103,32,116,117,112,108,101,32,100,97,116,97,33,10,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,116,117,112,108,101,95,119,114,105,116,101,10,0,0,0,101,120,105,116,0,0,0,0,99,108,101,97,114,0,0,0,69,88,73,84,105,110,103,32,116,117,112,108,101,95,100,101,108,101,116,101,10,0,0,0,68,111,110,101,10,0,0,0,45,0,0,0,0,0,0,0,83,101,116,116,105,110,103,32,108,97,115,116,95,100,101,108,101,116,101,100,32,116,111,32,37,100,10,0,0,0,0,0,105,110,116,115,105,122,101,61,61,91,37,100,93,10,0,0,68,101,108,101,116,105,110,103,32,116,117,112,108,101,32,97,116,32,111,102,102,115,101,116,32,37,100,10,0,0,0,0,69,78,84,69,82,105,110,103,32,116,117,112,108,101,95,100,101,108,101,116,101,10,0,0,84,104,105,115,32,105,115,32,97,32,110,111,114,109,97,108,32,105,110,115,101,114,116,32,105,110,116,111,32,116,104,101,32,115,116,114,117,99,116,117,114,101,10,0,0,0,0,0,84,69,77,80,0,0,0,0,69,88,73,84,105,110,103,32,116,117,112,108,101,95,114,101,97,100,102,105,114,115,116,10,0,0,0,0,0,0,0,0,32,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,44,32,73,110,99,46,44,32,54,55,53,32,77,97,115,115,32,65,118,101,44,32,67,97,109,98,114,105,100,103,101,44,32,77,65,32,48,50,49,51,57,44,32,85,83,65,46,10,10,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,116,117,112,108,101,95,114,101,97,100,102,105,114,115,116,10,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,116,117,112,108,101,95,114,101,97,100,102,105,114,115,116,10,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,105,110,32,114,101,108,97,116,105,111,110,32,110,97,109,101,46,10,0,0,0,0,63,43,42,32,102,111,108,108,111,119,115,32,110,111,116,104,105,110,103,0,0,0,0,0,68,101,108,101,116,105,110,103,32,110,111,114,109,97,108,32,101,110,116,114,121,32,105,110,32,99,104,97,105,110,10,0,115,111,117,114,99,101,47,0,46,115,114,99,0,0,0,0,69,110,100,32,40,79,107,41,58,32,100,111,95,115,116,114,105,110,103,95,101,118,97,108,10,0,0,0,0,0,0,0,97,117,116,111,0,0,0,0,114,101,103,114,101,115,115,105,111,110,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,119,105,116,104,32,116,117,112,108,101,41,32,116,117,112,108,101,95,114,101,97,100,110,101,120,116,10,0,0,0,0,68,101,108,101,116,101,100,32,84,117,112,108,101,32,69,110,99,111,117,110,116,101,114,101,100,32,45,32,83,107,105,112,112,105,110,103,32,91,37,100,93,32,98,121,116,101,115,32,40,116,111,32,111,102,102,115,101,116,32,91,37,100,93,41,10,0,0,0,0,0,0,0,91,37,115,93,32,37,115,32,0,0,0,0,0,0,0,0,99,104,97,110,103,101,0,0,46,114,101,108,97,116,105,111,110,0,0,0,0,0,0,0,70,65,76,83,69,0,0,0,84,82,85,69,0,0,0,0,97,100,100,32,40,37,115,41,32,40,0,0,0,0,0,0,37,100,0,0,0,0,0,0,44,32,0,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,116,117,112,108,101,32,100,97,116,97,32,102,114,111,109,32,102,105,108,101,33,10,0,0,0,0,68,69,70,91,37,100,58,37,100,58,37,100,93,91,37,115,93,10,0,0,0,0,0,0,84,104,105,115,32,105,115,32,116,104,101,32,108,97,115,116,32,114,101,108,97,116,105,111,110,32,105,110,32,116,104,101,32,100,97,116,97,98,97,115,101,32,10,0,0,0,0,0,78,65,77,69,0,0,0,0,66,79,79,91,37,100,58,37,100,58,37,100,93,91,37,100,93,10,0,0,0,0,0,0,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,10,0,0,0,0,0,0,0,78,85,77,91,37,100,58,37,100,58,37,100,93,91,37,100,93,10,0,0,0,0,0,0,83,84,82,91,37,100,58,37,100,58,37,100,93,91,37,115,93,10,0,0,0,0,0,0,69,114,114,111,114,32,101,118,97,108,117,97,116,105,110,103,32,101,120,112,114,101,115,115,105,111,110,46,10,0,0,0,105,110,116,101,114,110,97,108,32,117,114,112,0,0,0,0,68,101,108,101,116,105,110,103,32,116,97,105,108,32,111,102,32,99,104,97,105,110,10,0,114,101,108,97,116,105,111,110,47,0,0,0,0,0,0,0,111,112,101,110,0,0,0,0,69,110,100,32,40,69,114,114,111,114,41,58,32,100,111,95,115,116,114,105,110,103,95,101,118,97,108,10,0,0,0,0,119,105,100,116,104,0,0,0,109,101,114,103,101,45,115,116,100,101,114,114,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,115,116,97,116,117,115,32,111,102,32,116,117,112,108,101,10,0,0,69,88,73,84,105,110,103,32,40,69,110,100,32,111,102,32,114,101,108,97,116,105,111,110,41,32,116,117,112,108,101,95,114,101,97,100,110,101,120,116,10,0,0,0,0,0,0,0,115,111,117,114,99,101,47,0,99,97,115,101,0,0,0,0,84,117,112,108,101,32,78,79,84,32,100,105,115,112,111,115,101,100,10,0,0,0,0,0,69,78,68,32,84,117,112,108,101,32,100,105,115,112,111,115,101,10,0,0,0,0,0,0,66,69,71,73,78,32,84,117,112,108,101,32,100,105,115,112,111,115,101,10,0,0,0,0,73,110,116,101,114,110,97,108,32,100,98,32,114,101,108,46,32,115,116,114,117,99,116,117,114,101,10,0,0,0,0,0,97,116,116,114,105,98,112,116,114,32,91,35,37,100,58,37,115,93,0,0,0,0,0,0,69,110,100,32,111,102,32,114,101,108,97,116,105,111,110,32,114,101,97,99,104,101,100,33,10,0,0,0,0,0,0,0,46,114,101,108,97,116,105,111,110,0,0,0,0,0,0,0,108,105,115,116,114,101,108,0,69,78,84,69,82,105,110,103,32,116,117,112,108,101,95,114,101,97,100,110,101,120,116,10,0,0,0,0,0,0,0,0,84,104,105,115,32,105,115,32,116,111,32,98,101,99,111,109,101,32,116,104,101,32,102,105,114,115,116,32,114,101,108,97,116,105,111,110,32,105,110,32,116,104,101,32,100,97,116,97,98,97,115,101,10,0,0,0,78,85,76,76,32,112,116,114,32,112,97,115,115,101,100,32,116,111,32,100,117,109,112,114,101,108,115,116,114,117,99,116,10,0,0,0,0,0,0,0,108,101,97,112,114,101,108,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,110,101,120,116,10,0,0,0,0,0,112,114,101,118,58,9,91,37,112,93,10,0,0,0,0,0,32,83,110,97,105,108,58,32,99,47,111,32,51,46,80,101,108,116,105,110,103,32,68,114,111,118,101,44,32,80,114,105,100,100,121,44,32,87,69,76,76,83,44,32,83,111,109,101,114,115,101,116,44,32,66,65,53,32,51,66,65,44,32,85,75,10,10,0,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,110,101,120,116,10,0,0,0,110,101,120,116,58,9,91,37,112,93,10,0,0,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,71,69,84,110,101,120,116,10,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,115,116,97,99,107,32,112,114,111,99,101,115,115,105,110,103,32,101,114,114,111,114,46,10,0,0,0,0,0,0,0,117,110,109,97,116,99,104,101,100,32,91,93,0,0,0,0,68,101,108,101,116,105,110,103,32,104,101,97,100,32,111,102,32,99,104,97,105,110,10,0,115,111,117,114,99,101,47,0,37,115,47,0,0,0,0,0,69,110,100,32,40,76,69,65,80,45,69,114,114,41,58,32,114,101,103,99,111,109,112,10,0,0,0,0,0,0,0,0,109,105,110,100,101,98,117,103,108,101,118,101,108,0,0,0,102,110,97,109,101,58,9,91,37,115,93,10,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,71,69,84,110,101,120,116,10,0,0,0,0,78,85,76,76,32,97,114,103,117,109,101,110,116,0,0,0,102,112,97,116,104,58,9,91,37,115,93,10,0,0,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,102,105,114,115,116,10,0,0,37,115,37,115,37,115,37,115,0,0,0,0,0,0,0,0,99,97,99,104,101,0,0,0,104,97,115,104,58,9,91,37,112,93,10,0,0,0,0,0,112,95,115,116,97,99,107,46,112,116,95,99,114,101,97,116,101,95,115,116,97,99,107,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,102,105,114,115,116,10,0,0,0,0,117,112,100,97,116,101,58,9,91,37,100,93,10,0,0,0,67,76,73,69,78,84,95,87,82,73,84,69,58,32,37,115,0,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,102,105,114,115,116,10,0,0,115,121,115,116,58,9,91,37,100,93,10,0,0,0,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,71,69,84,102,105,114,115,116,10,0,0,0,116,101,109,112,58,9,91,37,100,93,10,0,0,0,0,0,78,111,110,101,32,115,112,101,99,105,102,105,101,100,33,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,71,69,84,102,105,114,115,116,10,0,0,0,0,0,99,117,114,112,111,115,58,9,91,37,100,93,10,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,71,69,84,102,105,114,115,116,10,0,0,0,84,104,105,115,32,105,115,32,97,32,100,117,112,108,105,99,97,116,101,46,10,0,0,0,110,111,97,116,116,114,58,9,91,37,100,93,10,0,0,0,100,105,115,112,108,97,121,40,112,114,111,106,101,99,116,40,37,115,41,40,37,115,44,37,115,44,37,115,41,41,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,116,117,112,108,101,95,112,114,101,112,97,114,101,10,0,0,0,78,97,109,101,58,9,91,37,115,93,10,0,0,0,0,0,104,97,115,104,105,110,103,46,99,104,97,105,110,95,110,111,100,101,95,99,114,101,97,116,101,0,0,0,0,0,0,0,32,69,45,77,97,105,108,58,32,108,101,97,112,64,108,101,121,116,111,110,46,111,114,103,10,0,0,0,0,0,0,0,82,101,97,100,32,114,101,108,97,116,105,111,110,32,100,101,102,105,110,105,116,105,111,110,115,32,111,107,33,10,0,0,119,0,0,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,101,110,100,32,111,102,32,104,101,97,100,101,114,32,109,97,114,107,101,114,10,0,0,0,0,0,78,111,32,114,101,108,97,116,105,111,110,32,99,114,101,97,116,101,100,32,119,104,101,114,101,32,114,101,113,117,105,114,101,100,32,40,67,104,101,99,107,32,98,114,97,99,107,101,116,115,33,41,46,10,0,0,105,110,118,97,108,105,100,32,91,93,32,114,97,110,103,101,0,0,0,0,0,0,0,0,83,116,97,114,116,58,32,104,97,115,104,105,110,103,95,100,101,108,101,116,101,10,0,0,37,115,37,115,37,115,37,115,0,0,0,0,0,0,0,0,37,115,47,37,115,0,0,0,69,110,100,32,40,76,69,65,80,41,58,32,114,101,103,99,111,109,112,10,0,0,0,0,100,101,98,117,103,108,101,118,101,108,0,0,0,0,0,0,97,100,100,32,40,108,101,97,112,115,99,114,105,112,116,115,41,32,40,37,115,44,37,115,41,0,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,116,117,112,108,101,95,112,114,101,112,97,114,101,10,0,32,0,0,0,0,0,0,0,108,101,97,112,100,97,116,97,0,0,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,116,117,112,108,101,95,112,114,101,112,97,114,101,10,0,46,115,114,99,0,0,0,0,98,114,101,97,107,0,0,0,37,115,0,0,0,0,0,0,114,43,98,0,0,0,0,0,46,37,100,0,0,0,0,0,73,78,68,69,88,0,0,0,46,114,101,108,97,116,105,111,110,0,0,0,0,0,0,0,104,101,108,112,112,103,115,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,110,117,109,98,101,114,32,111,102,32,97,116,116,114,105,98,117,116,101,115,10,0,0,0,0,0,104,101,108,112,47,0,0,0,32,32,102,99,108,111,115,101,32,114,101,116,117,114,110,101,100,32,91,37,100,93,10,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,116,117,112,108,101,95,114,101,97,100,104,101,97,100,101,114,10,0,0,0,0,0,0,83,116,97,114,116,58,32,100,111,95,105,110,116,95,101,118,97,108,10,0,0,0,0,0,72,101,108,112,32,112,97,103,101,58,32,37,115,10,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,10,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,10,0,84,104,105,115,32,105,115,32,116,104,101,32,102,105,114,115,116,32,114,101,108,97,116,105,111,110,32,105,110,32,116,104,101,32,100,97,116,97,98,97,115,101,10,0,0,0,0,0,46,10,0,0,0,0,0,0,44,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,107,101,121,32,99,111,109,112,111,110,101,110,116,0,0,0,114,101,99,111,114,100,32,37,115,10,0,0,0,0,0,0,65,117,116,104,111,114,58,32,82,105,99,104,97,114,100,32,76,101,121,116,111,110,10,0,114,101,108,97,116,105,111,110,32,40,37,115,41,32,40,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,115,105,122,101,10,0,0,0,60,69,79,70,62,10,0,0,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,0,66,114,97,99,107,101,116,115,32,105,110,32,116,104,101,32,101,120,112,114,101,115,115,105,111,110,32,100,111,32,110,111,116,32,109,97,116,99,104,46,10,0,0,0,0,0,0,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,116,121,112,101,41,10,0,0,110,101,115,116,101,100,32,42,63,43,0,0,0,0,0,0,69,120,105,116,58,32,40,104,97,115,104,105,110,103,41,32,102,105,110,100,112,111,115,110,10,0,0,0,0,0,0,0,99,117,114,114,101,110,116,100,98,0,0,0,0,0,0,0,109,97,115,116,101,114,0,0,83,116,97,114,116,32,40,76,69,65,80,41,58,32,114,101,103,99,111,109,112,10,0,0,97,116,116,114,105,98,117,116,101,115,46,97,116,116,114,105,98,117,116,101,95,102,105,110,100,102,105,114,115,116,0,0,100,97,101,109,111,110,0,0,10,0,0,0,0,0,0,0,66,79,79,76,69,65,78,0,69,88,73,84,105,110,103,32,40,117,110,115,117,99,99,101,115,115,102,117,108,108,121,41,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,10,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,73,78,84,69,71,69,82,0,115,116,97,114,116,117,112,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,97,116,116,114,105,98,117,116,101,32,110,97,109,101,10,0,0,0,97,118,103,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,83,84,82,73,78,71,0,0,116,117,112,108,101,115,46,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,0,0,70,105,108,101,32,91,37,115,93,32,110,111,116,32,102,111,117,110,100,46,10,0,0,0,83,111,117,114,99,101,32,70,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,0,40,37,115,44,37,115,44,37,100,41,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,114,101,108,97,116,105,111,110,95,97,116,116,114,105,98,117,116,101,95,114,101,97,100,10,0,0,0,0,0,0,0,70,111,114,109,97,116,32,111,102,32,115,111,117,114,99,101,32,97,116,116,114,105,98,117,116,101,32,105,110,99,111,114,114,101,99,116,46,0,0,0,37,115,37,115,37,115,37,115,0,0,0,0,0,0,0,0,100,98,97,115,101,46,100,97,116,97,98,97,115,101,95,99,114,101,97,116,101,0,0,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,102,105,108,101,58,32,37,115,10,0,97,100,100,32,40,37,115,41,32,40,37,115,44,37,115,44,37,115,44,37,100,41,0,0,37,115,10,0,0,0,0,0,32,32,102,102,108,117,115,104,32,114,101,116,117,114,110,101,100,32,91,37,100,93,10,0,76,69,65,80,32,67,111,110,102,105,103,117,114,97,116,105,111,110,32,99,111,109,112,108,101,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,33,0,0,0,0,0,0,69,88,73,84,105,110,103,32,40,115,117,99,99,101,115,115,102,117,108,108,121,41,32,112,114,105,110,116,114,101,108,105,110,102,111,10,0,0,0,0,65,84,84,82,73,66,85,84,69,0,0,0,0,0,0,0,46,115,114,99,0,0,0,0,111,110,0,0,0,0,0,0,76,69,65,80,32,84,101,114,109,105,110,97,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,33,0,0,0,82,101,108,97,116,105,111,110,32,83,116,114,117,99,116,117,114,101,32,78,79,84,32,114,101,97,100,32,99,111,114,114,101,99,116,108,121,33,10,0,82,101,108,97,116,105,111,110,32,91,37,115,93,32,105,115,32,110,111,114,109,97,108,44,32,100,98,32,105,115,32,116,101,109,112,100,98,44,32,111,114,32,99,111,110,102,105,103,32,105,110,32,112,114,111,99,101,115,115,46,10,0,0,0,100,101,108,101,116,101,32,40,37,115,41,32,40,40,37,115,61,39,37,115,39,41,32,97,110,100,32,40,37,115,61,39,37,115,39,41,41,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,114,101,103,101,120,112,32,116,111,111,32,98,105,103,0,0,76,69,65,80,32,105,115,32,115,116,97,114,116,105,110,103,46,46,46,0,0,0,0,0,79,112,101,114,97,116,105,111,110,32,40,37,117,41,58,32,37,115,0,0,0,0,0,0,112,95,115,116,97,99,107,46,112,116,95,112,117,115,104,95,115,116,97,99,107,0,0,0,62,62,62,37,115,60,60,60,10,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,97,116,116,114,105,98,117,116,101,32,91,37,115,93,0,0,0,43,43,43,32,67,104,97,105,110,32,78,111,100,101,58,32,91,37,115,93,10,0,0,0,83,111,117,114,99,101,32,102,105,108,101,115,58,10,0,0,78,65,77,69,0,0,0,0,67,111,109,112,108,101,116,101,100,32,97,112,112,108,105,99,97,116,105,111,110,32,111,102,32,99,111,109,109,97,110,100,32,108,105,110,101,32,111,112,116,105,111,110,115,46,46,46,0,0,0,0,0,0,0,0,65,100,100,114,101,115,115,101,115,32,102,111,114,32,99,111,109,109,101,110,116,115,47,102,101,101,100,98,97,99,107,32,101,116,99,46,10,10,0,0,91,70,65,76,83,69,93,10,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,114,43,98,0,0,0,0,0,37,100,0,0,0,0,0,0,115,111,117,114,99,101,47,0,100,101,98,117,103,108,101,118,101,108,0,0,0,0,0,0,69,120,99,101,101,100,101,100,32,116,104,101,32,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,97,116,116,114,105,98,117,116,101,115,32,105,110,32,97,32,114,101,108,97,116,105,111,110,32,40,37,100,41,46,10,0,0,91,84,82,85,69,93,10,0,37,115,37,115,37,115,37,99,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,82,101,110,97,109,105,110,103,32,114,101,108,97,116,105,111,110,46,46,46,0,0,0,0,116,114,97,99,101,0,0,0,42,43,32,111,112,101,114,97,110,100,32,99,111,117,108,100,32,98,101,32,101,109,112,116,121,0,0,0,0,0,0,0,69,110,116,101,114,58,32,40,104,97,115,104,105,110,103,41,32,102,105,110,100,112,111,115,110,10,0,0,0,0,0,0,68,97,116,97,98,97,115,101,32,99,104,97,110,103,101,100,32,116,111,58,32,37,115,0,80,97,116,104,58,32,91,37,115,93,10,78,97,109,101,58,32,91,37,115,93,10,0,0,82,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,32,115,116,114,105,110,103,32,99,111,109,112,97,114,105,115,111,110,10,0,0,0,112,114,111,100,117,99,116,106,111,105,110,0,0,0,0,0,69,88,73,84,105,110,103,32,97,115,115,105,103,110,95,105,110,112,117,116,95,115,116,114,101,97,109,46,10,0,0,0,112,114,111,100,117,99,116,106,111,105,110,0,0,0,0,0,91,37,100,93,10,0,0,0,95,116,101,109,112,0,0,0,82,101,110,97,109,105,110,103,58,32,91,37,115,93,32,116,111,32,91,37,115,93,46,10,0,0,0,0,0,0,0,0,82,101,115,101,116,116,105,110,103,32,105,110,112,117,116,32,102,105,108,101,10,0,0,0,111,102,102,0,0,0,0,0,83,111,117,114,99,105,110,103,32,37,115,37,115,32,105,110,32,37,115,0,0,0,0,0,91,37,115,93,10,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,58,32,114,108,95,100,117,112,108,105,99,97,116,101,10,0,0,0,0,37,115,37,115,37,115,0,0,97,118,101,114,97,103,101,0,114,0,0,0,0,0,0,0,116,105,109,101,108,111,103,0,91,69,114,114,111,114,33,93,0,0,0,0,0,0,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,69,114,114,58,32,114,108,95,100,117,112,108,105,99,97,116,101,10,0,40,114,101,108,97,116,105,111,110,95,114,101,109,111,118,101,41,0,0,0,0,0,0,0,83,101,116,116,105,110,103,32,115,111,117,114,99,101,32,102,105,108,101,32,116,111,32,37,115,46,0,0,0,0,0,0,111,110,0,0,0,0,0,0,91,68,69,70,93,32,91,37,45,52,46,52,100,93,0,0,79,80,69,82,65,84,79,82,32,83,116,97,114,116,58,32,114,108,95,100,117,112,108,105,99,97,116,101,10,0,0,0,68,97,116,97,98,97,115,101,32,110,111,116,32,105,110,105,116,105,97,108,105,115,101,100,46,46,46,0,0,0,0,0,83,101,116,116,105,110,103,32,115,111,117,114,99,101,32,102,105,108,101,32,116,111,32,115,116,100,105,110,46,0,0,0,65,112,112,108,121,105,110,103,32,99,111,109,109,97,110,100,32,108,105,110,101,32,111,112,116,105,111,110,115,46,46,46,0,0,0,0,0,0,0,0,91,66,79,79,93,32,91,37,45,52,46,52,100,93,0,0,79,80,69,82,65,84,79,82,32,69,110,100,58,32,114,108,95,110,97,116,117,114,97,108,106,111,105,110,10,0,0,0,42,32,0,0,0,0,0,0,69,78,84,69,82,105,110,103,32,97,115,115,105,103,110,95,105,110,112,117,116,95,115,116,114,101,97,109,32,91,37,115,93,46,10,0,0,0,0,0,114,43,98,0,0,0,0,0,86,97,114,105,97,98,108,101,115,32,97,114,101,32,110,111,119,32,115,101,116,46,0,0,91,78,85,77,93,32,91,37,45,52,46,52,100,93,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,69,114,114,58,32,114,108,95,110,97,116,117,114,97,108,106,111,105,110,10,0,0,0,0,0,0,0,68,97,116,97,32,68,105,99,116,105,111,110,97,114,121,32,77,97,105,110,116,101,110,97,110,99,101,32,45,32,108,101,97,112,97,116,116,114,105,98,117,116,101,115,10,0,0,0,37,99,0,0,0,0,0,0,91,37,115,93,32,105,115,32,97,108,115,111,32,110,111,116,32,118,97,108,105,100,32,45,32,80,114,111,98,108,101,109,115,32,97,114,101,32,108,105,107,101,108,121,0,0,0,0,91,83,84,82,93,32,91,37,45,52,46,52,100,93,0,0,79,80,69,82,65,84,79,82,32,69,110,100,32,79,107,58,32,114,108,95,110,97,116,117,114,97,108,106,111,105,110,10,0,0,0,0,0,0,0,0,73,110,115,101,114,116,105,110,103,32,110,111,114,109,97,108,32,114,101,108,97,116,105,111,110,32,91,37,115,93,32,105,110,116,111,32,91,37,115,93,46,10,0,0,0,0,0,0,68,97,116,97,32,68,105,99,116,105,111,110,97,114,121,32,77,97,105,110,116,101,110,97,110,99,101,32,45,32,108,101,97,112,114,101,108,10,0,0,44,32,47,92,58,40,41,0,0,0,0,0,0,0,0,0,46,46,47,0,0,0,0,0,68,111,110,101,32,97,115,115,105,103,110,109,101,110,116,0,91,37,45,55,46,55,100,93,32,45,32,0,0,0,0,0,84,114,111,117,98,108,101,32,97,108,108,111,99,97,116,105,110,103,32,108,116,117,112,108,101,44,32,114,116,117,112,108,101,32,111,114,32,110,116,117,112,108,101,32,115,116,114,117,99,116,46,10,0,0,0,0,32,0,0,0,0,0,0,0,68,105,114,101,99,116,111,114,121,32,115,112,101,99,105,102,105,101,100,32,91,37,115,93,32,110,111,116,32,118,97,108,105,100,46,32,84,114,121,105,110,103,32,91,37,115,93,0,10,0,0,0,0,0,0,0,91,37,45,52,46,52,100,93,32,45,32,0,0,0,0,0,84,114,111,117,98,108,101,32,119,105,116,104,32,99,111,110,100,105,116,105,111,110,115,10,0,0,0,0,0,0,0,0,85,112,100,97,116,105,110,103,32,104,97,115,104,32,116,97,98,108,101,115,58,32,0,0,76,69,65,80,32,66,97,115,101,32,100,105,114,101,99,116,111,114,121,32,115,101,116,32,116,111,58,32,37,115,0,0,65,116,116,101,109,112,116,101,100,32,116,111,32,100,101,108,101,116,101,32,97,32,110,111,110,45,101,120,105,115,116,97,110,116,32,114,101,108,97,116,105,111,110,32,91,37,115,93,46,10,0,0,0,0,0,0,32,32,32,32,32,32,0,0,74,111,105,110,101,100,32,116,117,112,108,101,32,119,105,108,108,32,42,78,79,84,42,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,100,105,115,107,10,0,0,0,0,0,68,111,110,101,46,10,0,0,106,117,110,107,32,111,110,32,101,110,100,0,0,0,0,0,69,120,105,116,58,32,40,104,97,115,104,105,110,103,41,32,104,97,115,104,105,110,103,95,105,110,115,101,114,116,10,0,77,117,108,116,105,112,108,101,32,105,110,115,116,97,110,99,101,115,32,105,110,32,97,32,100,100,32,116,97,98,108,101,33,0,0,0,0,0,0,0,69,110,116,101,114,105,110,103,32,76,69,65,80,65,80,73,95,100,98,95,105,110,105,116,10,0,0,0,0,0,0,0,83,84,82,32,67,79,77,80], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([58,32,76,101,102,116,61,61,91,37,115,93,32,82,105,103,104,116,61,61,91,37,115,93,10,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,116,101,109,112,100,98,0,0,69,114,114,111,114,32,102,105,108,101,58,32,37,115,9,32,82,101,112,111,114,116,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,0,67,111,109,109,97,110,100,32,108,105,110,101,32,112,114,111,99,101,115,115,101,100,46,0,91,68,69,70,93,32,0,0,74,111,105,110,101,100,32,116,117,112,108,101,32,87,73,76,76,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,100,105,115,107,10,0,0,0,85,80,68,65,84,69,68,0,84,101,109,112,111,114,97,114,121,32,100,105,114,101,99,116,111,114,121,58,32,91,37,115,93,10,83,99,114,97,116,99,104,32,102,105,108,101,58,32,91,37,115,93,10,0,0,0,69,82,82,79,82,58,32,78,111,32,100,105,114,101,99,116,111,114,121,32,115,112,101,99,105,102,105,101,100,32,97,102,116,101,114,32,116,101,109,112,111,114,97,114,121,32,100,105,114,101,99,116,111,114,121,32,102,108,97,103,46,10,0,0,58,45,41,0,0,0,0,0,82,101,108,97,116,105,111,110,32,37,115,32,114,101,116,117,114,110,101,100,46,0,0,0,82,101,108,97,116,105,111,110,32,82,69,76,78,65,77,69,32,114,101,116,117,114,110,101,100,46,0,0,0,0,0,0,7,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
function runPostSets() {


}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision === -1) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }


  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
  
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
  
        if (!total) {
          // early out
          return callback(null);
        }
  
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
  
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
  
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
  
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat, node;
  
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
  
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
  
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
  
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
  
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          FS.FSNode.prototype = {};
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
  
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

  
  
  
  
  
  
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_;
      }
      HEAP8[(((s)+(i))|0)]=0;
      return s;
    }

  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      path = Pointer_stringify(path);
      // we don't want this in the JS API as the JS API
      // uses mknod to create all nodes.
      switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      try {
        FS.mknod(path, mode, dev);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      path = Pointer_stringify(path);
      try {
        FS.mkdir(path, mode, 0);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr;
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }

  function _signal(sig, func) {
      // TODO
      return 0;
    }

  function _srand(seed) {}

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr;
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60;
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  
  
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);
  
  
  function _mktime(tmPtr) {
      _tzset();
      var year = HEAP32[(((tmPtr)+(20))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(16))>>2)],
                               HEAP32[(((tmPtr)+(12))>>2)],
                               HEAP32[(((tmPtr)+(8))>>2)],
                               HEAP32[(((tmPtr)+(4))>>2)],
                               HEAP32[((tmPtr)>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(24))>>2)]=new Date(timestamp).getDay();
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      return timestamp;
    }function _asctime_r(tmPtr, buf) {
      var date = new Date(_mktime(tmPtr)*1000);
      var formatted = date.toString();
      var datePart = formatted.replace(/\d{4}.*/, '').replace(/ 0/, '  ');
      var timePart = formatted.match(/\d{2}:\d{2}:\d{2}/)[0];
      formatted = datePart + timePart + ' ' + date.getFullYear() + '\n';
      formatted.split('').forEach(function(chr, index) {
        HEAP8[(((buf)+(index))|0)]=chr.charCodeAt(0);
      });
      HEAP8[(((buf)+(25))|0)]=0;
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }function _ctime(timer) {
      return _asctime(_localtime(timer));
    }

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  var _llvm_va_start=undefined;

  function _vsprintf(s, format, va_arg) {
      return _sprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }


  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000000/1000));
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  
  var ___strtok_state=0;
  
  function _strtok_r(s, delim, lasts) {
      var skip_leading_delim = 1;
      var spanp;
      var c, sc;
      var tok;
  
  
      if (s == 0 && (s = getValue(lasts, 'i8*')) == 0) {
        return 0;
      }
  
      cont: while (1) {
        c = getValue(s++, 'i8');
        for (spanp = delim; (sc = getValue(spanp++, 'i8')) != 0;) {
          if (c == sc) {
            if (skip_leading_delim) {
              continue cont;
            } else {
              setValue(lasts, s, 'i8*');
              setValue(s - 1, 0, 'i8');
              return s - 1;
            }
          }
        }
        break;
      }
  
      if (c == 0) {
        setValue(lasts, 0, 'i8*');
        return 0;
      }
      tok = s - 1;
  
      for (;;) {
        c = getValue(s++, 'i8');
        spanp = delim;
        do {
          if ((sc = getValue(spanp++, 'i8')) == c) {
            if (c == 0) {
              s = 0;
            } else {
              setValue(s - 1, 0, 'i8');
            }
            setValue(lasts, s, 'i8*');
            return tok;
          }
        } while (sc != 0);
      }
      abort('strtok_r error!');
    }function _strtok(s, delim) {
      return _strtok_r(s, delim, ___strtok_state);
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[((ptr2++)|0)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }

  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return tempRet0 = (tempDouble=ret,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0),ret>>>0;
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }


  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }

  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var err = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      // open returns 0 on failure, not -1
      return err === -1 ? 0 : err;
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStream(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var entries;
      try {
        entries = FS.readdir(stream.path);
      } catch (e) {
        return FS.handleFSError(e);
      }
      if (stream.position < 0 || stream.position >= entries.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = entries[stream.position];
      var offset = stream.position + 1;
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        var child = FS.lookupNode(stream.node, name);
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=offset;
      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))|0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))|0)]=0;
      HEAP8[(((entry)+(10))|0)]=type;
      HEAP32[((result)>>2)]=entry;
      stream.position++;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStream(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      return _close(dirp);
    }

  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }


  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }

  function _abort() {
      Module['abort']();
    }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }






  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
___buildEnvironment(ENV);
___strtok_state = Runtime.staticAlloc(4);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,_default_quiethandler,0,_signal_handler,0,_default_handler,0];

// EMSCRIPTEN_START_FUNCS

function _print_returned_relation($result_relation){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $buffer=sp;
 $1=$result_relation;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=6;break;}
 case 2: 
 var $5=HEAP8[(37264)];
 var $6=($5&255);
 var $7=($6|0)==1;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=(($buffer)|0);
 var $10=_sprintf($9,31040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 4: 
 var $12=(($buffer)|0);
 var $13=$1;
 var $14=(($13)|0);
 var $15=(($14)|0);
 var $16=_sprintf($12,31016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 var $18=(($buffer)|0);
 _raise_message(1,$18,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _do_leap(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buffer=sp;
 var $maincommand=(sp)+(1032);
 var $tprompt=(sp)+(2064);
 var $result;
 var $tresult;
 var $result_relation;
 var $res;
 var $startscript;
 $result_relation=0;
 $startscript=0;
 _do_debug(1,22800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1=_LEAPAPI_db_create(0,19480);
 HEAP32[((37152)>>2)]=$1;
 var $2=HEAP32[((37152)>>2)];
 var $3=_relations_ddopen($2);
 $res=$3;
 var $4=$res;
 var $5=($4|0)!=1;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(42,2,19480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 var $8=_LEAPAPI_db_create(0,15864);
 HEAP32[((42672)>>2)]=$8;
 var $9=HEAP32[((42672)>>2)];
 var $10=_relations_ddopen($9);
 $res=$10;
 var $11=$res;
 var $12=($11|0)!=1;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 _raise_error(42,2,15864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 var $15=_strlen(42728);
 var $16=($15|0)==0;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=_LEAPAPI_db_create(0,12368);
 HEAP32[((43016)>>2)]=$18;
 label=8;break;
 case 7: 
 var $20=_LEAPAPI_db_create(0,42728);
 HEAP32[((43016)>>2)]=$20;
 label=8;break;
 case 8: 
 var $22=HEAP32[((43016)>>2)];
 var $23=_relations_ddopen($22);
 $res=$23;
 var $24=$res;
 var $25=($24|0)!=1;
 if($25){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=HEAP32[((43016)>>2)];
 var $28=_database_name($27);
 _raise_error(42,2,$28,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 var $30=HEAP32[((43016)>>2)];
 var $31=_database_name($30);
 var $32=_set_variable(9440,$31);
 var $33=HEAP8[(37272)];
 var $34=($33&255);
 var $35=($34|0)!=1;
 if($35){label=11;break;}else{label=12;break;}
 case 11: 
 _raise_message(1,6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4464,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 HEAP8[(33040)]=0;
 var $38=HEAP8[(37272)];
 var $39=(($38<<24)>>24)!=0;
 if($39){label=13;break;}else{label=14;break;}
 case 13: 
 var $41=_strcpy(42760,51512);
 _set_prompt(51512);
 label=15;break;
 case 14: 
 var $43=_strcpy(42760,31008);
 _set_prompt(31008);
 label=15;break;
 case 15: 
 var $45=HEAP8[(47136)];
 var $46=($45&255);
 var $47=($46|0)!=1;
 if($47){label=16;break;}else{label=17;break;}
 case 16: 
 var $49=HEAP32[((42672)>>2)];
 var $50=_database_name($49);
 _raise_message(1,29408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=27960,HEAP32[(((tempVarArgs)+(8))>>2)]=27120,HEAP32[(((tempVarArgs)+(16))>>2)]=$50,tempVarArgs)); STACKTOP=tempVarArgs;
 var $51=(($buffer)|0);
 var $52=HEAP32[((42672)>>2)];
 var $53=_database_dir($52);
 var $54=_sprintf($51,26144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$53,HEAP32[(((tempVarArgs)+(8))>>2)]=25264,HEAP32[(((tempVarArgs)+(16))>>2)]=27960,HEAP32[(((tempVarArgs)+(24))>>2)]=27120,tempVarArgs)); STACKTOP=tempVarArgs;
 var $55=(($buffer)|0);
 _assign_input_stream($55);
 label=18;break;
 case 17: 
 var $57=(($buffer)|0);
 var $58=_sprintf($57,6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=43032,tempVarArgs)); STACKTOP=tempVarArgs;
 var $59=(($buffer)|0);
 _assign_input_stream($59);
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $62=HEAP8[(33040)];
 var $63=(($62<<24)>>24)!=0;
 var $64=$63^1;
 if($64){label=20;break;}else{label=70;break;}
 case 20: 
 var $66=HEAP32[((42680)>>2)];
 var $67=HEAP32[((_stdin)>>2)];
 var $68=($66|0)==($67|0);
 if($68){label=21;break;}else{label=22;break;}
 case 21: 
 var $70=$result_relation;
 _print_returned_relation($70);
 label=22;break;
 case 22: 
 var $72=HEAP8[(37272)];
 var $73=($72&255);
 var $74=($73|0)!=1;
 if($74){label=23;break;}else{label=24;break;}
 case 23: 
 var $76=HEAP32[((43016)>>2)];
 var $77=_database_name($76);
 _leap_printf(24720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAP32[(((tempVarArgs)+(8))>>2)]=42760,tempVarArgs)); STACKTOP=tempVarArgs;
 label=24;break;
 case 24: 
 var $79=HEAP32[((_stdout)>>2)];
 var $80=_fflush($79);
 var $81=HEAP8[(42688)];
 var $82=($81&255);
 var $83=($82|0)==1;
 if($83){label=25;break;}else{label=26;break;}
 case 25: 
 var $85=(($buffer)|0);
 var $86=_strcpy($85,24032);
 $result=$86;
 label=27;break;
 case 26: 
 var $88=(($buffer)|0);
 var $89=HEAP32[((42680)>>2)];
 var $90=_fgets($88,1025,$89);
 $result=$90;
 label=27;break;
 case 27: 
 var $92=HEAP8[(42576)];
 var $93=($92&255);
 var $94=($93|0)==1;
 if($94){label=28;break;}else{label=32;break;}
 case 28: 
 var $96=$result;
 var $97=(($96)|0);
 var $98=HEAP8[($97)];
 var $99=(($98<<24)>>24);
 var $100=($99|0)==46;
 if($100){label=29;break;}else{label=30;break;}
 case 29: 
 _stop_record();
 var $102=$result;
 var $103=_strcpy($102,23544);
 label=31;break;
 case 30: 
 var $105=HEAP32[((42568)>>2)];
 var $106=$result;
 var $107=_fprintf($105,6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$106,tempVarArgs)); STACKTOP=tempVarArgs;
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 var $110=$result;
 var $111=($110|0)==0;
 if($111){label=33;break;}else{label=43;break;}
 case 33: 
 var $113=HEAP32[((42680)>>2)];
 var $114=HEAP32[((_stdin)>>2)];
 var $115=($113|0)!=($114|0);
 if($115){label=34;break;}else{label=39;break;}
 case 34: 
 var $117=HEAP32[((42680)>>2)];
 var $118=_fclose($117);
 HEAP32[((42680)>>2)]=0;
 var $119=$result_relation;
 _print_returned_relation($119);
 $result_relation=0;
 _leap_printf(23168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $120=$startscript;
 if(($120|0)==0){ label=35;break;}else if(($120|0)==1|($120|0)==2){ label=36;break;}else{label=37;break;}
 case 35: 
 var $122=(($buffer)|0);
 var $123=HEAP32[((43016)>>2)];
 var $124=_database_dir($123);
 var $125=_sprintf($122,26144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$124,HEAP32[(((tempVarArgs)+(8))>>2)]=25264,HEAP32[(((tempVarArgs)+(16))>>2)]=22792,HEAP32[(((tempVarArgs)+(24))>>2)]=27120,tempVarArgs)); STACKTOP=tempVarArgs;
 var $126=HEAP32[((43016)>>2)];
 var $127=_database_name($126);
 _raise_message(1,29408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=22792,HEAP32[(((tempVarArgs)+(8))>>2)]=27120,HEAP32[(((tempVarArgs)+(16))>>2)]=$127,tempVarArgs)); STACKTOP=tempVarArgs;
 var $128=(($buffer)|0);
 _assign_input_stream($128);
 var $129=$startscript;
 var $130=((($129)+(1))|0);
 $startscript=$130;
 label=38;break;
 case 36: 
 _assign_input_stream(51512);
 label=38;break;
 case 37: 
 _assign_input_stream(51512);
 label=38;break;
 case 38: 
 label=42;break;
 case 39: 
 _do_trace(22560);
 $result_relation=0;
 var $135=(($buffer)|0);
 var $136=_strcpy($135,24032);
 var $137=HEAP8[(42576)];
 var $138=($137&255);
 var $139=($138|0)!=1;
 if($139){label=40;break;}else{label=41;break;}
 case 40: 
 var $141=HEAP32[((43016)>>2)];
 var $142=(($buffer)|0);
 var $143=_process_query($141,$142);
 $result_relation=$143;
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=69;break;
 case 43: 
 var $147=(($buffer)|0);
 var $148=HEAP8[($147)];
 var $149=(($148<<24)>>24);
 var $150=($149|0)!=10;
 if($150){label=44;break;}else{label=68;break;}
 case 44: 
 var $152=HEAP32[((42680)>>2)];
 var $153=HEAP32[((_stdin)>>2)];
 var $154=($152|0)!=($153|0);
 if($154){label=45;break;}else{label=49;break;}
 case 45: 
 var $156=(($buffer)|0);
 var $157=HEAP8[($156)];
 var $158=(($157<<24)>>24);
 var $159=($158|0)!=35;
 if($159){label=46;break;}else{label=47;break;}
 case 46: 
 var $161=(($buffer)|0);
 _leap_printf(6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$161,tempVarArgs)); STACKTOP=tempVarArgs;
 label=48;break;
 case 47: 
 _leap_printf(22136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 var $165=(($buffer)|0);
 var $166=_strlen($165);
 var $167=((($166)-(1))|0);
 var $168=(($buffer+$167)|0);
 var $169=HEAP8[($168)];
 var $170=(($169<<24)>>24);
 var $171=($170|0)==10;
 if($171){label=50;break;}else{label=51;break;}
 case 50: 
 var $173=(($buffer)|0);
 var $174=_strlen($173);
 var $175=((($174)-(1))|0);
 var $176=(($buffer+$175)|0);
 HEAP8[($176)]=32;
 label=51;break;
 case 51: 
 $result_relation=0;
 var $178=HEAP8[(37304)];
 var $179=($178&255);
 var $180=($179|0)==1;
 if($180){label=52;break;}else{label=64;break;}
 case 52: 
 var $182=(($buffer)|0);
 _strip_leading_spaces($182);
 var $183=(($buffer)|0);
 var $184=_strchr($183,59);
 var $185=($184|0)!=0;
 if($185){label=53;break;}else{label=59;break;}
 case 53: 
 label=54;break;
 case 54: 
 var $188=$result;
 var $189=(($maincommand)|0);
 var $190=_strchr($189,10);
 var $191=($188|0)==($190|0);
 if($191){label=55;break;}else{label=56;break;}
 case 55: 
 var $193=$result;
 HEAP8[($193)]=32;
 label=54;break;
 case 56: 
 var $195=(($maincommand)|0);
 _raise_message(0,21832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$195,tempVarArgs)); STACKTOP=tempVarArgs;
 var $196=HEAP8[(42576)];
 var $197=($196&255);
 var $198=($197|0)!=1;
 if($198){label=57;break;}else{label=58;break;}
 case 57: 
 var $200=HEAP32[((43016)>>2)];
 var $201=(($maincommand)|0);
 var $202=_process_query($200,$201);
 $result_relation=$202;
 label=58;break;
 case 58: 
 var $204=(($maincommand)|0);
 var $205=_strcpy($204,51512);
 label=63;break;
 case 59: 
 var $207=(($maincommand)|0);
 var $208=_strlen($207);
 var $209=(($buffer)|0);
 var $210=_strlen($209);
 var $211=((($208)+($210))|0);
 var $212=($211>>>0)<1024;
 if($212){label=60;break;}else{label=61;break;}
 case 60: 
 var $214=(($maincommand)|0);
 var $215=(($buffer)|0);
 var $216=_strcat($214,$215);
 label=62;break;
 case 61: 
 _raise_error(3,0,21352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=62;break;
 case 62: 
 $result_relation=0;
 label=63;break;
 case 63: 
 label=67;break;
 case 64: 
 var $221=HEAP8[(42576)];
 var $222=($221&255);
 var $223=($222|0)!=1;
 if($223){label=65;break;}else{label=66;break;}
 case 65: 
 var $225=HEAP32[((43016)>>2)];
 var $226=(($buffer)|0);
 var $227=_process_query($225,$226);
 $result_relation=$227;
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 label=19;break;
 case 70: 
 var $233=HEAP8[(37272)];
 var $234=(($233<<24)>>24)!=0;
 if($234){label=72;break;}else{label=71;break;}
 case 71: 
 var $236=HEAP32[((43016)>>2)];
 var $237=_database_name($236);
 _raise_message(1,21024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$237,tempVarArgs)); STACKTOP=tempVarArgs;
 label=72;break;
 case 72: 
 var $239=HEAP32[((43016)>>2)];
 var $240=_database_name($239);
 var $241=_strcmp($240,19480);
 var $242=($241|0)==0;
 if($242){label=74;break;}else{label=73;break;}
 case 73: 
 var $244=HEAP32[((43016)>>2)];
 var $245=_database_name($244);
 var $246=_strcmp($245,15864);
 var $247=($246|0)==0;
 if($247){label=74;break;}else{label=75;break;}
 case 74: 
 _raise_message(1,20680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=76;break;
 case 75: 
 var $250=HEAP32[((43016)>>2)];
 _relations_dispose_all($250);
 _LEAPAPI_db_destroy(43016);
 _raise_message(0,20312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=76;break;
 case 76: 
 var $252=HEAP8[(37272)];
 var $253=(($252<<24)>>24)!=0;
 if($253){label=78;break;}else{label=77;break;}
 case 77: 
 var $255=HEAP32[((42672)>>2)];
 var $256=_database_name($255);
 _raise_message(1,21024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$256,tempVarArgs)); STACKTOP=tempVarArgs;
 label=78;break;
 case 78: 
 var $258=HEAP32[((42672)>>2)];
 _relations_dispose_all($258);
 _LEAPAPI_db_destroy(42672);
 _raise_message(0,20032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $259=HEAP8[(37272)];
 var $260=(($259<<24)>>24)!=0;
 if($260){label=80;break;}else{label=79;break;}
 case 79: 
 var $262=HEAP32[((37152)>>2)];
 var $263=_database_name($262);
 _raise_message(1,21024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$263,tempVarArgs)); STACKTOP=tempVarArgs;
 label=80;break;
 case 80: 
 var $265=HEAP32[((37152)>>2)];
 _relations_dispose_all($265);
 _LEAPAPI_db_destroy(37152);
 _raise_message(0,19712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $266=HEAP8[(47136)];
 var $267=($266&255);
 var $268=($267|0)==1;
 if($268){label=81;break;}else{label=82;break;}
 case 81: 
 var $270=HEAP32[((42680)>>2)];
 var $271=_fclose($270);
 label=82;break;
 case 82: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _signal_handler($signum){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$signum;
 var $2=$1;
 if(($2|0)==1){ label=2;break;}else if(($2|0)==15){ label=3;break;}else{label=4;break;}
 case 2: 
 _leap_printf(19456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 3: 
 _leap_printf(19152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 4: 
 var $6=$1;
 _leap_printf(18688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 var $8=HEAP32[((_stdout)>>2)];
 _leap_fprintf($8,18272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=HEAP32[((43016)>>2)];
 var $10=_database_name($9);
 _raise_message(1,21024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$10,tempVarArgs)); STACKTOP=tempVarArgs;
 var $11=HEAP32[((43016)>>2)];
 _relations_dispose_all($11);
 _LEAPAPI_db_destroy(43016);
 var $12=HEAP32[((42672)>>2)];
 var $13=_database_name($12);
 _raise_message(1,21024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 var $14=HEAP32[((42672)>>2)];
 _relations_dispose_all($14);
 _LEAPAPI_db_destroy(42672);
 var $15=HEAP32[((37152)>>2)];
 var $16=_database_name($15);
 _raise_message(1,21024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=HEAP32[((37152)>>2)];
 _relations_dispose_all($17);
 _LEAPAPI_db_destroy(37152);
 _util_close();
 _print_shutdown();
 var $18=HEAP32[((_stdout)>>2)];
 _leap_fprintf($18,17944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(0);
 throw "Reached an unreachable!";
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _do_configuration(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $configdb=sp;
 var $fpath=(sp)+(8);
 var $pos;
 _do_debug(1,17544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(17208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,tempVarArgs)); STACKTOP=tempVarArgs;
 var $2=(($fpath)|0);
 var $3=_sprintf($2,16832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=16528,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=(($fpath)|0);
 var $5=_strlen($4);
 var $6=((($5)-(1))|0);
 $pos=$6;
 var $7=$pos;
 var $8=(($fpath+$7)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24);
 var $11=($10|0)==47;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$pos;
 var $14=(($fpath+$13)|0);
 HEAP8[($14)]=0;
 label=3;break;
 case 3: 
 var $16=(($fpath)|0);
 var $17=_mkdir($16,511);
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=___errno_location();
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)!=17;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($fpath)|0);
 _raise_error(44,0,$24,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,16184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=10;break;
 case 6: 
 _leap_printf(15776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(15432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(15776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $26=(($fpath)|0);
 var $27=_sprintf($26,16832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=16528,tempVarArgs)); STACKTOP=tempVarArgs;
 var $28=(($fpath)|0);
 var $29=_LEAPAPI_db_init($28,15864,1);
 HEAP32[(($configdb)>>2)]=$29;
 var $30=HEAP32[(($configdb)>>2)];
 HEAP32[((42672)>>2)]=$30;
 var $31=HEAP32[((42672)>>2)];
 var $32=($31|0)!=0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 _leap_printf(15776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(14800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(15776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $34=(($fpath)|0);
 var $35=_sprintf($34,16832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=16528,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($fpath)|0);
 var $37=_LEAPAPI_db_init($36,12368,1);
 HEAP32[(($configdb)>>2)]=$37;
 var $38=HEAP32[(($configdb)>>2)];
 _relations_dispose_all($38);
 _LEAPAPI_db_destroy($configdb);
 _leap_printf(15776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(14368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(15776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $39=(($fpath)|0);
 var $40=_sprintf($39,16832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=16528,tempVarArgs)); STACKTOP=tempVarArgs;
 var $41=(($fpath)|0);
 var $42=_LEAPAPI_db_init($41,19480,1);
 HEAP32[(($configdb)>>2)]=$42;
 label=9;break;
 case 8: 
 _raise_error(46,2,51512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,16184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=10;break;
 case 9: 
 var $45=HEAP32[(($configdb)>>2)];
 _relations_dispose_all($45);
 _LEAPAPI_db_destroy($configdb);
 var $46=HEAP32[((42672)>>2)];
 _relations_dispose_all($46);
 _LEAPAPI_db_destroy(42672);
 _do_debug(1,14016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=10;break;
 case 10: 
 var $48=$1;
 STACKTOP=sp;return $48;
  default: assert(0, "bad label: " + label);
 }

}


function _specify($var,$value,$length){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$var;
 $3=$value;
 $4=$length;
 var $5=$3;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=_strncpy($8,$9,$10);
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $14=$1;
 STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _main($argc,$argv){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tdebug;
 var $ttiming;
 var $ttimelog;
 var $tlong;
 var $tquiet;
 var $ttrace;
 var $tpad;
 var $tpjoin;
 var $tmergestderr;
 var $tp=sp;
 var $s;
 var $debuglevel;
 var $argptr;
 $1=0;
 $2=$argc;
 $3=$argv;
 $tdebug=0;
 $ttiming=0;
 $ttimelog=0;
 $tlong=0;
 $tquiet=0;
 $ttrace=0;
 $tpad=0;
 $tpjoin=0;
 $tmergestderr=0;
 $debuglevel=0;
 var $4=_signal(2,1);
 var $5=_signal(3,1);
 var $6=_signal(1,4);
 var $7=_define_handle(6,42712);
 _raise_message(0,6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=13696,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=_define_handle(2,42664);
 _raise_message(0,6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=13328,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=_signal(15,4);
 _build_base_dir(13096);
 var $10=_time(0);
 _srand($10);
 var $11=_getenv(12872);
 $s=$11;
 var $12=_strcpy(42728,51512);
 var $13=_strcpy(47408,51512);
 var $14=_strcpy(33048,51512);
 HEAP32[((60280)>>2)]=0;
 var $15=$s;
 var $16=($15|0)!=0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=HEAP32[((_stdout)>>2)];
 var $19=$s;
 _leap_fprintf($18,12616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=12872,HEAP32[(((tempVarArgs)+(8))>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs;
 var $20=$s;
 _build_base_dir($20);
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $23=$2;
 var $24=($23|0)>1;
 if($24){label=5;break;}else{var $34=0;label=6;break;}
 case 5: 
 var $26=$3;
 var $27=(($26+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28)|0);
 var $30=HEAP8[($29)];
 var $31=(($30<<24)>>24);
 var $32=($31|0)==45;
 var $34=$32;label=6;break;
 case 6: 
 var $34;
 if($34){label=7;break;}else{label=126;break;}
 case 7: 
 var $36=$3;
 var $37=(($36+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38)|0);
 var $40=HEAP8[($39)];
 var $41=(($40<<24)>>24);
 var $42=($41|0)==45;
 if($42){label=8;break;}else{label=10;break;}
 case 8: 
 var $44=$3;
 var $45=(($44+4)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+1)|0);
 var $48=HEAP8[($47)];
 var $49=(($48<<24)>>24);
 var $50=($49|0)==45;
 if($50){label=9;break;}else{label=10;break;}
 case 9: 
 var $52=$3;
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+2)|0);
 $argptr=$55;
 label=11;break;
 case 10: 
 var $57=$3;
 var $58=(($57+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+1)|0);
 $argptr=$60;
 label=11;break;
 case 11: 
 var $62=$argptr;
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24);
 switch(($64|0)){case 116:case 84:{ label=100;break;}case 118:case 86:{ label=109;break;}case 119:case 87:{ label=116;break;}case 97:case 65:{ label=12;break;}case 120:case 88:{ label=120;break;}case 98:case 66:{ label=23;break;}case 99:case 67:{ label=27;break;}case 100:case 68:{ label=35;break;}case 101:case 69:{ label=54;break;}case 104:case 63:case 72:{ label=61;break;}case 105:case 73:{ label=65;break;}case 108:case 76:{ label=66;break;}case 77:case 109:{ label=74;break;}case 110:case 78:{ label=78;break;}case 111:case 79:{ label=79;break;}case 112:case 80:{ label=80;break;}case 113:case 81:{ label=88;break;}case 114:case 82:{ label=92;break;}case 115:case 83:{ label=96;break;}default:{label=124;break;}}break;
 case 12: 
 var $66=$argptr;
 var $67=_strcmp($66,12352);
 var $68=($67|0)==0;
 if($68){label=15;break;}else{label=13;break;}
 case 13: 
 var $70=$argptr;
 var $71=_strcmp($70,12088);
 var $72=($71|0)==0;
 if($72){label=15;break;}else{label=14;break;}
 case 14: 
 var $74=$argptr;
 var $75=_strlen($74);
 var $76=($75|0)==1;
 if($76){label=15;break;}else{label=22;break;}
 case 15: 
 var $78=$3;
 var $79=(($78+8)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=_specify(47408,$80,4096);
 var $82=($81|0)!=0;
 if($82){label=16;break;}else{label=17;break;}
 case 16: 
 var $84=$3;
 var $85=(($84+4)|0);
 $3=$85;
 var $86=$2;
 var $87=((($86)-(1))|0);
 $2=$87;
 label=18;break;
 case 17: 
 var $89=HEAP32[((_stderr)>>2)];
 _leap_fprintf($89,11648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=11384,tempVarArgs)); STACKTOP=tempVarArgs;
 var $90=_strncpy(47408,11384,4096);
 label=18;break;
 case 18: 
 var $92=_fopen(47408,11104);
 HEAP32[((60280)>>2)]=$92;
 var $93=HEAP32[((60280)>>2)];
 var $94=($93|0)==0;
 if($94){label=19;break;}else{label=20;break;}
 case 19: 
 var $96=HEAP32[((_stderr)>>2)];
 _leap_fprintf($96,10840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 20: 
 var $98=_time(0);
 HEAP32[(($tp)>>2)]=$98;
 var $99=HEAP32[((60280)>>2)];
 var $100=_ctime($tp);
 var $101=_fprintf($99,10480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$100,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(10184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=47408,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=125;break;
 case 23: 
 var $105=$3;
 var $106=(($105+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=_specify(42728,$107,25);
 var $109=($108|0)!=0;
 if($109){label=24;break;}else{label=25;break;}
 case 24: 
 var $111=$3;
 var $112=(($111+4)|0);
 $3=$112;
 var $113=$2;
 var $114=((($113)-(1))|0);
 $2=$114;
 label=26;break;
 case 25: 
 _raise_message(1,9864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=12368,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 26: 
 label=125;break;
 case 27: 
 var $118=$argptr;
 var $119=_strcmp($118,9664);
 var $120=($119|0)==0;
 if($120){label=30;break;}else{label=28;break;}
 case 28: 
 var $122=$argptr;
 var $123=_strcmp($122,9424);
 var $124=($123|0)==0;
 if($124){label=30;break;}else{label=29;break;}
 case 29: 
 var $126=$argptr;
 var $127=_strlen($126);
 var $128=($127|0)==1;
 if($128){label=30;break;}else{label=31;break;}
 case 30: 
 var $130=$3;
 var $131=(($130+8)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=_specify(43032,$132,4096);
 _leap_printf(9128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP8[(47136)]=1;
 var $134=$3;
 var $135=(($134+4)|0);
 $3=$135;
 var $136=$2;
 var $137=((($136)-(1))|0);
 $2=$137;
 label=34;break;
 case 31: 
 var $139=$argptr;
 var $140=_strcmp($139,8664);
 var $141=($140|0)==0;
 if($141){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP8[(47144)]=1;
 _leap_printf(8424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $143=$3;
 var $144=(($143+4)|0);
 $3=$144;
 var $145=$2;
 var $146=((($145)-(1))|0);
 $2=$146;
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 label=125;break;
 case 35: 
 var $150=$argptr;
 var $151=_strcmp($150,8208);
 var $152=($151|0)==0;
 if($152){label=38;break;}else{label=36;break;}
 case 36: 
 var $154=$argptr;
 var $155=_strcmp($154,7960);
 var $156=($155|0)==0;
 if($156){label=38;break;}else{label=37;break;}
 case 37: 
 var $158=$argptr;
 var $159=_strlen($158);
 var $160=($159|0)==1;
 if($160){label=38;break;}else{label=42;break;}
 case 38: 
 var $162=$3;
 var $163=(($162+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)!=0;
 if($165){label=39;break;}else{label=40;break;}
 case 39: 
 var $167=$3;
 var $168=(($167+8)|0);
 var $169=HEAP32[(($168)>>2)];
 _build_base_dir($169);
 var $170=$3;
 var $171=(($170+4)|0);
 $3=$171;
 var $172=$2;
 var $173=((($172)-(1))|0);
 $2=$173;
 label=41;break;
 case 40: 
 var $175=HEAP32[((_stderr)>>2)];
 _leap_fprintf($175,7656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(1);
 throw "Reached an unreachable!";
 case 41: 
 label=53;break;
 case 42: 
 var $178=$argptr;
 var $179=_strcmp($178,7440);
 var $180=($179|0)==0;
 if($180){label=43;break;}else{label=46;break;}
 case 43: 
 var $182=$3;
 var $183=(($182+8)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=_specify(42728,$184,25);
 var $186=($185|0)!=0;
 if($186){label=44;break;}else{label=45;break;}
 case 44: 
 var $188=$3;
 var $189=(($188+4)|0);
 $3=$189;
 var $190=$2;
 var $191=((($190)-(1))|0);
 $2=$191;
 label=45;break;
 case 45: 
 label=52;break;
 case 46: 
 var $194=$argptr;
 var $195=_strcmp($194,7224);
 var $196=($195|0)==0;
 if($196){label=47;break;}else{label=51;break;}
 case 47: 
 _leap_printf(7048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $tdebug=1;
 var $198=$3;
 var $199=(($198+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($200|0)!=0;
 if($201){label=48;break;}else{label=50;break;}
 case 48: 
 var $203=$3;
 var $204=(($203+8)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205)|0);
 var $207=HEAP8[($206)];
 var $208=(($207<<24)>>24);
 var $209=($208|0)!=45;
 if($209){label=49;break;}else{label=50;break;}
 case 49: 
 var $211=$3;
 var $212=(($211+8)|0);
 var $213=HEAP32[(($212)>>2)];
 $debuglevel=$213;
 var $214=$3;
 var $215=(($214+4)|0);
 $3=$215;
 var $216=$2;
 var $217=((($216)-(1))|0);
 $2=$217;
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=125;break;
 case 54: 
 var $223=$argptr;
 var $224=_strlen($223);
 var $225=($224|0)==1;
 if($225){label=55;break;}else{label=56;break;}
 case 55: 
 _leap_printf(7048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $tdebug=1;
 label=60;break;
 case 56: 
 var $228=$argptr;
 var $229=_strcmp($228,6872);
 var $230=($229|0)==0;
 if($230){label=58;break;}else{label=57;break;}
 case 57: 
 var $232=$argptr;
 var $233=_strcmp($232,6728);
 var $234=($233|0)==0;
 if($234){label=58;break;}else{label=59;break;}
 case 58: 
 var $236=_define_handle(2,42704);
 _raise_message(0,6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=13696,tempVarArgs)); STACKTOP=tempVarArgs;
 label=59;break;
 case 59: 
 label=60;break;
 case 60: 
 label=125;break;
 case 61: 
 var $240=$argptr;
 var $241=_strcmp($240,6368);
 var $242=($241|0)==0;
 if($242){label=63;break;}else{label=62;break;}
 case 62: 
 var $244=$argptr;
 var $245=_strlen($244);
 var $246=($245|0)==1;
 if($246){label=63;break;}else{label=64;break;}
 case 63: 
 _print_help();
 _exit(0);
 throw "Reached an unreachable!";
 case 64: 
 label=65;break;
 case 65: 
 _leap_printf(6032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $ttiming=1;
 label=125;break;
 case 66: 
 var $251=$argptr;
 var $252=_strcmp($251,5768);
 var $253=($252|0)==0;
 if($253){label=68;break;}else{label=67;break;}
 case 67: 
 var $255=$argptr;
 var $256=_strlen($255);
 var $257=($256|0)==1;
 if($257){label=68;break;}else{label=69;break;}
 case 68: 
 _leap_printf(5520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $ttimelog=0;
 label=73;break;
 case 69: 
 var $260=$argptr;
 var $261=_strcmp($260,5296);
 var $262=($261|0)==0;
 if($262){label=71;break;}else{label=70;break;}
 case 70: 
 var $264=$argptr;
 var $265=_strcmp($264,5104);
 var $266=($265|0)==0;
 if($266){label=71;break;}else{label=72;break;}
 case 71: 
 _leap_printf(4888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $tlong=1;
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 label=125;break;
 case 74: 
 var $271=$argptr;
 var $272=_strcmp($271,4696);
 var $273=($272|0)==0;
 if($273){label=76;break;}else{label=75;break;}
 case 75: 
 var $275=$argptr;
 var $276=_strlen($275);
 var $277=($276|0)==1;
 if($277){label=76;break;}else{label=77;break;}
 case 76: 
 _leap_printf(4424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $tmergestderr=1;
 label=77;break;
 case 77: 
 label=125;break;
 case 78: 
 _do_warranty();
 _exit(0);
 throw "Reached an unreachable!";
 case 79: 
 _leap_printf(4888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $tlong=1;
 label=125;break;
 case 80: 
 var $283=$argptr;
 var $284=_strcmp($283,4304);
 var $285=($284|0)==0;
 if($285){label=82;break;}else{label=81;break;}
 case 81: 
 var $287=$argptr;
 var $288=_strlen($287);
 var $289=($288|0)==1;
 if($289){label=82;break;}else{label=83;break;}
 case 82: 
 _leap_printf(4024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $tpad=1;
 label=87;break;
 case 83: 
 var $292=$argptr;
 var $293=_strcmp($292,3888);
 var $294=($293|0)==0;
 if($294){label=85;break;}else{label=84;break;}
 case 84: 
 var $296=$argptr;
 var $297=_strcmp($296,3800);
 var $298=($297|0)==0;
 if($298){label=85;break;}else{label=86;break;}
 case 85: 
 _leap_printf(3656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $tpjoin=1;
 label=86;break;
 case 86: 
 label=87;break;
 case 87: 
 label=125;break;
 case 88: 
 var $303=$argptr;
 var $304=_strcmp($303,3520);
 var $305=($304|0)==0;
 if($305){label=90;break;}else{label=89;break;}
 case 89: 
 var $307=$argptr;
 var $308=_strlen($307);
 var $309=($308|0)==1;
 if($309){label=90;break;}else{label=91;break;}
 case 90: 
 $tquiet=1;
 HEAP8[(31072)]=32;
 var $311=_define_handle(0,42664);
 label=91;break;
 case 91: 
 label=125;break;
 case 92: 
 var $314=$argptr;
 var $315=_strcmp($314,3368);
 var $316=($315|0)==0;
 if($316){label=94;break;}else{label=93;break;}
 case 93: 
 var $318=$argptr;
 var $319=_strlen($318);
 var $320=($319|0)==1;
 if($320){label=94;break;}else{label=95;break;}
 case 94: 
 HEAP8[(37264)]=1;
 _leap_printf(3184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=95;break;
 case 95: 
 label=125;break;
 case 96: 
 var $324=$argptr;
 var $325=_strcmp($324,3000);
 var $326=($325|0)==0;
 if($326){label=98;break;}else{label=97;break;}
 case 97: 
 var $328=$argptr;
 var $329=_strlen($328);
 var $330=($329|0)==1;
 if($330){label=98;break;}else{label=99;break;}
 case 98: 
 _leap_printf(2864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP8[(37344)]=1;
 label=99;break;
 case 99: 
 label=125;break;
 case 100: 
 var $334=$argptr;
 var $335=_strcmp($334,2728);
 var $336=($335|0)==0;
 if($336){label=102;break;}else{label=101;break;}
 case 101: 
 var $338=$argptr;
 var $339=_strcmp($338,2504);
 var $340=($339|0)==0;
 if($340){label=102;break;}else{label=103;break;}
 case 102: 
 _leap_printf(6032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $ttiming=1;
 label=108;break;
 case 103: 
 var $343=$argptr;
 var $344=_strlen($343);
 var $345=($344|0)==1;
 if($345){label=106;break;}else{label=104;break;}
 case 104: 
 var $347=$argptr;
 var $348=_strcmp($347,2328);
 var $349=($348|0)==0;
 if($349){label=106;break;}else{label=105;break;}
 case 105: 
 var $351=$argptr;
 var $352=_strcmp($351,2208);
 var $353=($352|0)==0;
 if($353){label=106;break;}else{label=107;break;}
 case 106: 
 _leap_printf(2024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $ttrace=1;
 label=107;break;
 case 107: 
 label=108;break;
 case 108: 
 label=125;break;
 case 109: 
 var $358=$argptr;
 var $359=_strcmp($358,1904);
 var $360=($359|0)==0;
 if($360){label=111;break;}else{label=110;break;}
 case 110: 
 var $362=$argptr;
 var $363=_strlen($362);
 var $364=($363|0)==1;
 if($364){label=111;break;}else{label=112;break;}
 case 111: 
 _print_header(1);
 _exit(0);
 throw "Reached an unreachable!";
 case 112: 
 var $367=$argptr;
 var $368=_strcmp($367,1792);
 var $369=($368|0)==0;
 if($369){label=113;break;}else{label=114;break;}
 case 113: 
 _leap_printf(1680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1,HEAP32[(((tempVarArgs)+(8))>>2)]=2,HEAP32[(((tempVarArgs)+(16))>>2)]=6,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(0);
 throw "Reached an unreachable!";
 case 114: 
 label=115;break;
 case 115: 
 label=125;break;
 case 116: 
 var $374=$argptr;
 var $375=_strcmp($374,1608);
 var $376=($375|0)==0;
 if($376){label=118;break;}else{label=117;break;}
 case 117: 
 var $378=$argptr;
 var $379=_strlen($378);
 var $380=($379|0)==1;
 if($380){label=118;break;}else{label=119;break;}
 case 118: 
 _do_warranty();
 _exit(0);
 throw "Reached an unreachable!";
 case 119: 
 label=125;break;
 case 120: 
 var $384=$3;
 var $385=(($384+8)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=($386|0)!=0;
 if($387){label=121;break;}else{label=122;break;}
 case 121: 
 var $389=$3;
 var $390=(($389+8)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=_strncpy(33048,$391,4096);
 var $393=$3;
 var $394=(($393+4)|0);
 $3=$394;
 var $395=$2;
 var $396=((($395)-(1))|0);
 $2=$396;
 label=123;break;
 case 122: 
 var $398=HEAP32[((_stderr)>>2)];
 _leap_fprintf($398,30944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(1);
 throw "Reached an unreachable!";
 case 123: 
 label=125;break;
 case 124: 
 var $401=$argptr;
 _raise_error(22,0,$401,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=125;break;
 case 125: 
 var $403=$3;
 var $404=(($403+4)|0);
 $3=$404;
 var $405=$2;
 var $406=((($405)-(1))|0);
 $2=$406;
 label=4;break;
 case 126: 
 _raise_message(0,6880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=30816,tempVarArgs)); STACKTOP=tempVarArgs;
 var $408=HEAP8[(37264)];
 var $409=($408&255);
 var $410=($409|0)!=1;
 if($410){label=127;break;}else{label=129;break;}
 case 127: 
 var $412=$tquiet;
 var $413=($412&255);
 var $414=($413|0)!=1;
 if($414){label=128;break;}else{label=129;break;}
 case 128: 
 _print_header(0);
 label=129;break;
 case 129: 
 var $417=HEAP8[(37344)];
 var $418=($417&255);
 var $419=($418|0)!=0;
 if($419){label=130;break;}else{label=132;break;}
 case 130: 
 var $421=$tquiet;
 var $422=($421&255);
 var $423=($422|0)!=1;
 if($423){label=131;break;}else{label=132;break;}
 case 131: 
 var $425=_sprintf(37160,30448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(37160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=132;break;
 case 132: 
 _util_init();
 var $427=_init_variables();
 var $428=($427|0)!=1;
 if($428){label=133;break;}else{label=137;break;}
 case 133: 
 _raise_message(1,30320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=30216,tempVarArgs)); STACKTOP=tempVarArgs;
 _build_base_dir(30216);
 var $430=_init_variables();
 var $431=($430|0)!=1;
 if($431){label=134;break;}else{label=135;break;}
 case 134: 
 _raise_message(1,30008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=30216,tempVarArgs)); STACKTOP=tempVarArgs;
 label=136;break;
 case 135: 
 _raise_message(1,29872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=136;break;
 case 136: 
 label=137;break;
 case 137: 
 _raise_message(1,29728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $436=$tdebug;
 var $437=($436&255);
 var $438=($437|0)==1;
 if($438){label=138;break;}else{label=139;break;}
 case 138: 
 var $440=_set_variable(7224,29608);
 label=139;break;
 case 139: 
 var $442=$ttiming;
 var $443=($442&255);
 var $444=($443|0)==1;
 if($444){label=140;break;}else{label=141;break;}
 case 140: 
 var $446=_set_variable(2504,29608);
 label=141;break;
 case 141: 
 var $448=$ttimelog;
 var $449=($448&255);
 var $450=($449|0)==1;
 if($450){label=142;break;}else{label=143;break;}
 case 142: 
 var $452=_set_variable(29496,29608);
 label=143;break;
 case 143: 
 var $454=$tlong;
 var $455=($454&255);
 var $456=($455|0)==0;
 if($456){label=144;break;}else{label=145;break;}
 case 144: 
 var $458=_set_variable(5104,29400);
 label=145;break;
 case 145: 
 var $460=$tquiet;
 var $461=($460&255);
 var $462=($461|0)==1;
 if($462){label=146;break;}else{label=147;break;}
 case 146: 
 var $464=_set_variable(3520,29608);
 label=147;break;
 case 147: 
 var $466=$ttrace;
 var $467=($466&255);
 var $468=($467|0)==1;
 if($468){label=148;break;}else{label=149;break;}
 case 148: 
 var $470=_set_variable(2328,29608);
 label=149;break;
 case 149: 
 var $472=$tpad;
 var $473=($472&255);
 var $474=($473|0)==1;
 if($474){label=150;break;}else{label=151;break;}
 case 150: 
 var $476=_set_variable(4304,29608);
 label=151;break;
 case 151: 
 var $478=$tpjoin;
 var $479=($478&255);
 var $480=($479|0)==1;
 if($480){label=152;break;}else{label=153;break;}
 case 152: 
 var $482=_set_variable(29312,29608);
 label=153;break;
 case 153: 
 var $484=$debuglevel;
 var $485=($484|0)!=0;
 if($485){label=154;break;}else{label=155;break;}
 case 154: 
 var $487=$debuglevel;
 var $488=_set_variable(28968,$487);
 label=155;break;
 case 155: 
 var $490=$tmergestderr;
 var $491=($490&255);
 var $492=($491|0)==1;
 if($492){label=156;break;}else{label=157;break;}
 case 156: 
 var $494=_set_variable(4696,29608);
 label=157;break;
 case 157: 
 _raise_message(1,28824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $496=HEAP8[(37272)];
 var $497=($496&255);
 var $498=($497|0)!=1;
 if($498){label=158;break;}else{label=159;break;}
 case 158: 
 _raise_message(1,28656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=159;break;
 case 159: 
 var $501=HEAP8[(47136)];
 var $502=($501&255);
 var $503=($502|0)!=1;
 if($503){label=160;break;}else{label=163;break;}
 case 160: 
 _do_leap();
 _print_shutdown();
 _util_close();
 var $505=HEAP8[(37272)];
 var $506=($505&255);
 var $507=($506|0)!=1;
 if($507){label=161;break;}else{label=162;break;}
 case 161: 
 _raise_message(1,28448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=162;break;
 case 162: 
 label=169;break;
 case 163: 
 var $511=_do_configuration();
 var $512=($511|0)==1;
 if($512){label=164;break;}else{label=167;break;}
 case 164: 
 _do_leap();
 var $514=HEAP8[(37272)];
 var $515=($514&255);
 var $516=($515|0)!=1;
 if($516){label=165;break;}else{label=166;break;}
 case 165: 
 _raise_message(1,28328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=166;break;
 case 166: 
 label=168;break;
 case 167: 
 label=168;break;
 case 168: 
 _util_close();
 label=169;break;
 case 169: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_main"] = _main;

function _LEAPAPI_db_create($path,$name){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $db;
 $1=$path;
 $2=$name;
 var $3=_malloc(4140);
 var $4=$3;
 $db=$4;
 var $5=$db;
 var $6=$5;
 _check_assign($6,28224);
 var $7=$db;
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=$2;
 var $11=_strncpy($9,$10,255);
 var $12=$db;
 var $13=(($12)|0);
 var $14=(($13+255)|0);
 HEAP8[($14)]=0;
 var $15=$db;
 var $16=(($15+28)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$db;
 var $18=(($17+32)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=$db;
 var $20=(($19+4136)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=$1;
 var $22=($21|0)==0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $24=$db;
 var $25=(($24+4133)|0);
 HEAP8[($25)]=0;
 var $26=$db;
 var $27=(($26+4134)|0);
 HEAP8[($27)]=1;
 var $28=$db;
 var $29=(($28+36)|0);
 var $30=(($29)|0);
 var $31=$2;
 var $32=_sprintf($30,29056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=22440,HEAP32[(((tempVarArgs)+(16))>>2)]=$31,HEAP32[(((tempVarArgs)+(24))>>2)]=47,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 3: 
 var $34=$db;
 var $35=(($34+4133)|0);
 HEAP8[($35)]=1;
 var $36=$db;
 var $37=(($36+4134)|0);
 HEAP8[($37)]=0;
 var $38=$db;
 var $39=(($38+36)|0);
 var $40=(($39)|0);
 var $41=$1;
 var $42=_sprintf($40,19072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$41,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 var $44=$db;
 STACKTOP=sp;return $44;
  default: assert(0, "bad label: " + label);
 }

}


function _LEAPAPI_db_destroy($db){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$db;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=$3;
 _free($4);
 var $5=$1;
 HEAP32[(($5)>>2)]=0;
 STACKTOP=sp;return;
}


function _database_name($db){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$db;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 STACKTOP=sp;return $4;
}


function _ddredirect_start(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=_fopen(38392,15352);
 HEAP32[((42720)>>2)]=$2;
 var $3=HEAP32[((42720)>>2)];
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(2,0,38392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=4;break;
 case 3: 
 HEAP8[(42600)]=1;
 $1=1;
 label=4;break;
 case 4: 
 var $8=$1;
 STACKTOP=sp;return $8;
  default: assert(0, "bad label: " + label);
 }

}


function _ddredirect_stop(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[((42720)>>2)];
 var $3=_fclose($2);
 var $4=($3|0)!=-1;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP8[(42600)]=0;
 HEAP32[((42720)>>2)]=0;
 $1=1;
 label=4;break;
 case 3: 
 _raise_error(3,0,12032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=4;break;
 case 4: 
 var $8=$1;
 STACKTOP=sp;return $8;
  default: assert(0, "bad label: " + label);
 }

}


function _ddredirect_execute($db){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $lptr;
 var $line=sp;
 $1=$db;
 var $2=_fopen(38392,9104);
 HEAP32[((42720)>>2)]=$2;
 var $3=HEAP32[((42720)>>2)];
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(2,0,38392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 3: 
 var $7=(($line)|0);
 var $8=HEAP32[((42720)>>2)];
 var $9=_fgets($7,1024,$8);
 $lptr=$9;
 label=4;break;
 case 4: 
 var $11=$lptr;
 var $12=($11|0)!=0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 var $14=$lptr;
 _do_debug(3,6672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$14,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=$1;
 var $16=$lptr;
 var $17=_vprocess_query($15,$16,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=(($line)|0);
 var $19=HEAP32[((42720)>>2)];
 var $20=_fgets($18,1024,$19);
 $lptr=$20;
 label=4;break;
 case 6: 
 var $22=HEAP32[((42720)>>2)];
 var $23=_fclose($22);
 HEAP32[((42720)>>2)]=0;
 var $24=_remove(38392);
 var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 _raise_error(49,0,38392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _ddmaintenance($db,$fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $expression=sp;
 var $ap=(sp)+(1032);
 $1=$db;
 $2=$fmt;
 var $3=(($ap)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 var $5=HEAP8[(42600)];
 var $6=($5&255);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=(($expression)|0);
 var $10=$2;
 var $11=(($ap)|0);
 var $12=_vsprintf($9,$10,$11);
 var $13=$1;
 var $14=(($expression)|0);
 var $15=_process_query($13,$14);
 var $16=(($expression)|0);
 _do_debug(3,4264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 3: 
 var $18=HEAP32[((42720)>>2)];
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($expression)|0);
 var $22=$2;
 var $23=(($ap)|0);
 var $24=_vsprintf($21,$22,$23);
 var $25=(($expression)|0);
 _do_debug(3,4264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$25,tempVarArgs)); STACKTOP=tempVarArgs;
 var $26=HEAP32[((42720)>>2)];
 var $27=(($expression)|0);
 var $28=_fprintf($26,2704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _database_dir($db){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$db;
 var $2=$1;
 var $3=(($2+36)|0);
 var $4=(($3)|0);
 STACKTOP=sp;return $4;
}


function _LEAPAPI_db_init($path,$name,$sub){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+17456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $p=sp;
 var $dname=(sp)+(4104);
 var $expr=(sp)+(8208);
 var $dirpath=(sp)+(9240);
 var $tpath=(sp)+(13344);
 var $db=(sp)+(17448);
 var $rel;
 var $ismaster;
 var $tf;
 $2=$path;
 $3=$name;
 $4=$sub;
 $ismaster=0;
 _do_debug(1,30688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$2;
 var $6=$3;
 _do_debug(3,29200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$5,HEAP32[(((tempVarArgs)+(8))>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$3;
 var $8=_strcmp($7,27800);
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 $ismaster=1;
 label=3;break;
 case 3: 
 var $12=(($tpath)|0);
 var $13=$2;
 var $14=$3;
 var $15=_sprintf($12,26952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$13,HEAP32[(((tempVarArgs)+(8))>>2)]=$14,tempVarArgs)); STACKTOP=tempVarArgs;
 var $16=(($tpath)|0);
 var $17=_mkdir($16,511);
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=___errno_location();
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)!=17;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=(($tpath)|0);
 _raise_error(44,0,$24,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=44;break;
 case 6: 
 var $26=(($p)|0);
 var $27=(($tpath)|0);
 var $28=_strcpy($26,$27);
 var $29=$4;
 var $30=($29&255);
 var $31=($30|0)==1;
 if($31){label=7;break;}else{label=22;break;}
 case 7: 
 var $33=(($dname)|0);
 var $34=(($tpath)|0);
 var $35=_sprintf($33,25944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$34,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($dname)|0);
 var $37=_strcat($36,25104);
 var $38=(($dname)|0);
 var $39=_strlen($38);
 var $40=((($39)-(1))|0);
 var $41=(($dname+$40)|0);
 HEAP8[($41)]=0;
 var $42=(($dname)|0);
 var $43=_mkdir($42,511);
 var $44=($43|0)!=0;
 if($44){label=8;break;}else{label=10;break;}
 case 8: 
 var $46=___errno_location();
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)!=17;
 if($48){label=9;break;}else{label=10;break;}
 case 9: 
 var $50=(($dname)|0);
 _raise_error(44,0,$50,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=44;break;
 case 10: 
 var $52=(($dname)|0);
 var $53=(($tpath)|0);
 var $54=_sprintf($52,25944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$53,tempVarArgs)); STACKTOP=tempVarArgs;
 var $55=(($dname)|0);
 var $56=_strcat($55,24536);
 var $57=(($dname)|0);
 var $58=_strlen($57);
 var $59=((($58)-(1))|0);
 var $60=(($dname+$59)|0);
 HEAP8[($60)]=0;
 var $61=(($dname)|0);
 var $62=_mkdir($61,511);
 var $63=($62|0)!=0;
 if($63){label=11;break;}else{label=13;break;}
 case 11: 
 var $65=___errno_location();
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0)!=17;
 if($67){label=12;break;}else{label=13;break;}
 case 12: 
 var $69=(($dname)|0);
 _raise_error(44,0,$69,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=44;break;
 case 13: 
 var $71=(($dname)|0);
 var $72=(($tpath)|0);
 var $73=_sprintf($71,23848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$72,HEAP32[(((tempVarArgs)+(8))>>2)]=24536,HEAP32[(((tempVarArgs)+(16))>>2)]=23360,HEAP32[(((tempVarArgs)+(24))>>2)]=23016,tempVarArgs)); STACKTOP=tempVarArgs;
 var $74=(($dname)|0);
 var $75=_fopen($74,22704);
 $tf=$75;
 var $76=$tf;
 var $77=$3;
 var $78=_fprintf($76,22464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,tempVarArgs)); STACKTOP=tempVarArgs;
 var $79=$tf;
 var $80=($79|0)!=0;
 if($80){label=14;break;}else{label=15;break;}
 case 14: 
 var $82=$tf;
 var $83=_fclose($82);
 label=15;break;
 case 15: 
 var $85=$ismaster;
 var $86=($85&255);
 var $87=($86|0)==1;
 if($87){label=16;break;}else{label=19;break;}
 case 16: 
 var $89=(($dname)|0);
 var $90=(($tpath)|0);
 var $91=_sprintf($89,23848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$90,HEAP32[(((tempVarArgs)+(8))>>2)]=24536,HEAP32[(((tempVarArgs)+(16))>>2)]=22000,HEAP32[(((tempVarArgs)+(24))>>2)]=23016,tempVarArgs)); STACKTOP=tempVarArgs;
 var $92=(($dname)|0);
 var $93=_fopen($92,22704);
 $tf=$93;
 var $94=$tf;
 var $95=($94|0)!=0;
 if($95){label=17;break;}else{label=18;break;}
 case 17: 
 var $97=$tf;
 var $98=_fclose($97);
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 var $103=$3;
 var $104=_LEAPAPI_db_create(0,$103);
 HEAP32[(($db)>>2)]=$104;
 label=23;break;
 case 22: 
 var $106=$2;
 var $107=(($p)|0);
 var $108=_LEAPAPI_db_create($106,$107);
 HEAP32[(($db)>>2)]=$108;
 label=23;break;
 case 23: 
 var $110=_ddredirect_start();
 var $111=($110|0)!=1;
 if($111){label=24;break;}else{label=25;break;}
 case 24: 
 var $113=HEAP32[((_stderr)>>2)];
 _leap_fprintf($113,21648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP8[(42600)]=1;
 label=25;break;
 case 25: 
 var $115=HEAP32[(($db)>>2)];
 var $116=($115|0)!=0;
 if($116){label=26;break;}else{label=29;break;}
 case 26: 
 var $118=$ismaster;
 var $119=($118&255);
 var $120=($119|0)==1;
 if($120){label=27;break;}else{label=28;break;}
 case 27: 
 var $122=(($expr)|0);
 var $123=_sprintf($122,21224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $124=HEAP32[(($db)>>2)];
 var $125=(($expr)|0);
 var $126=_create_user_relation($124,$125,20928,0,1);
 label=28;break;
 case 28: 
 var $128=(($expr)|0);
 var $129=_sprintf($128,20520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $130=HEAP32[(($db)>>2)];
 var $131=HEAP32[(($db)>>2)];
 var $132=(($expr)|0);
 var $133=_create_user_relation($131,$132,20240,0,1);
 var $134=_relation_insert($130,$133);
 var $135=(($expr)|0);
 var $136=_sprintf($135,19928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $137=HEAP32[(($db)>>2)];
 var $138=HEAP32[(($db)>>2)];
 var $139=(($expr)|0);
 var $140=_create_user_relation($138,$139,19672,0,1);
 var $141=_relation_insert($137,$140);
 var $142=(($expr)|0);
 var $143=_sprintf($142,19384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $144=HEAP32[(($db)>>2)];
 var $145=HEAP32[(($db)>>2)];
 var $146=(($expr)|0);
 var $147=_create_user_relation($145,$146,19088,0,1);
 var $148=_relation_insert($144,$147);
 var $149=(($expr)|0);
 var $150=_sprintf($149,18496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $151=HEAP32[(($db)>>2)];
 var $152=HEAP32[(($db)>>2)];
 var $153=(($expr)|0);
 var $154=_create_user_relation($152,$153,18200,0,1);
 var $155=_relation_insert($151,$154);
 var $156=(($expr)|0);
 var $157=_sprintf($156,17776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $158=HEAP32[(($db)>>2)];
 var $159=HEAP32[(($db)>>2)];
 var $160=(($expr)|0);
 var $161=_create_user_relation($159,$160,17400,0,1);
 var $162=_relation_insert($158,$161);
 label=29;break;
 case 29: 
 var $164=_ddredirect_stop();
 var $165=($164|0)!=1;
 if($165){label=30;break;}else{label=31;break;}
 case 30: 
 var $167=HEAP32[((_stderr)>>2)];
 _leap_fprintf($167,17088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP8[(42600)]=0;
 label=31;break;
 case 31: 
 var $169=$ismaster;
 var $170=($169&255);
 var $171=($170|0)==1;
 if($171){label=32;break;}else{label=35;break;}
 case 32: 
 var $173=HEAP32[(($db)>>2)];
 HEAP32[((42672)>>2)]=$173;
 var $174=(($dirpath)|0);
 var $175=HEAP32[(($db)>>2)];
 var $176=_database_dir($175);
 var $177=_sprintf($174,16760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$176,HEAP32[(((tempVarArgs)+(8))>>2)]=25104,tempVarArgs)); STACKTOP=tempVarArgs;
 var $178=(($dirpath)|0);
 var $179=_relation_new_read($178,20928);
 $rel=$179;
 var $180=$rel;
 var $181=($180|0)!=0;
 if($181){label=33;break;}else{label=34;break;}
 case 33: 
 var $183=HEAP32[(($db)>>2)];
 var $184=$rel;
 var $185=_relation_insert($183,$184);
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $188=$4;
 var $189=($188&255);
 var $190=($189|0)==1;
 if($190){label=36;break;}else{label=37;break;}
 case 36: 
 var $192=(($dirpath)|0);
 var $193=HEAP32[(($db)>>2)];
 var $194=_database_dir($193);
 var $195=_sprintf($192,16760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$194,HEAP32[(((tempVarArgs)+(8))>>2)]=25104,tempVarArgs)); STACKTOP=tempVarArgs;
 label=38;break;
 case 37: 
 var $197=(($dirpath)|0);
 var $198=(($p)|0);
 var $199=_sprintf($197,19072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$198,tempVarArgs)); STACKTOP=tempVarArgs;
 label=38;break;
 case 38: 
 var $201=$4;
 var $202=($201&255);
 var $203=($202|0)==1;
 if($203){label=39;break;}else{label=40;break;}
 case 39: 
 var $205=HEAP32[((42672)>>2)];
 var $206=$3;
 var $207=$3;
 var $208=_vprocess_query($205,16448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20928,HEAP32[(((tempVarArgs)+(8))>>2)]=$206,HEAP32[(((tempVarArgs)+(16))>>2)]=$207,tempVarArgs)); STACKTOP=tempVarArgs;
 label=40;break;
 case 40: 
 var $210=HEAP32[(($db)>>2)];
 _ddredirect_execute($210);
 var $211=HEAP32[(($db)>>2)];
 var $212=_vprocess_query($211,16104,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=19088,HEAP32[(((tempVarArgs)+(8))>>2)]=15696,HEAP32[(((tempVarArgs)+(16))>>2)]=255,tempVarArgs)); STACKTOP=tempVarArgs;
 var $213=HEAP32[(($db)>>2)];
 var $214=_vprocess_query($213,16104,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=19088,HEAP32[(((tempVarArgs)+(8))>>2)]=15360,HEAP32[(((tempVarArgs)+(16))>>2)]=5,tempVarArgs)); STACKTOP=tempVarArgs;
 var $215=HEAP32[(($db)>>2)];
 var $216=_vprocess_query($215,14736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=19088,HEAP32[(((tempVarArgs)+(8))>>2)]=14288,tempVarArgs)); STACKTOP=tempVarArgs;
 var $217=HEAP32[(($db)>>2)];
 var $218=_vprocess_query($217,13952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=18200,HEAP32[(((tempVarArgs)+(8))>>2)]=19672,HEAP32[(((tempVarArgs)+(16))>>2)]=20240,HEAP32[(((tempVarArgs)+(24))>>2)]=13680,HEAP32[(((tempVarArgs)+(32))>>2)]=13320,tempVarArgs)); STACKTOP=tempVarArgs;
 var $219=HEAP32[(($db)>>2)];
 _relations_dispose_all($219);
 _LEAPAPI_db_destroy($db);
 var $220=$4;
 var $221=($220&255);
 var $222=($221|0)==1;
 if($222){label=41;break;}else{label=42;break;}
 case 41: 
 var $224=$3;
 var $225=_LEAPAPI_db_create(0,$224);
 HEAP32[(($db)>>2)]=$225;
 label=43;break;
 case 42: 
 var $227=(($p)|0);
 var $228=$3;
 var $229=_LEAPAPI_db_create($227,$228);
 HEAP32[(($db)>>2)]=$229;
 label=43;break;
 case 43: 
 var $231=HEAP32[(($db)>>2)];
 var $232=_relations_ddopen($231);
 var $233=HEAP32[(($db)>>2)];
 $1=$233;
 label=44;break;
 case 44: 
 var $235=$1;
 STACKTOP=sp;return $235;
  default: assert(0, "bad label: " + label);
 }

}


function _database_reverse($db){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $crel;
 $1=$db;
 var $2=$1;
 var $3=(($2+28)|0);
 var $4=HEAP32[(($3)>>2)];
 $crel=$4;
 var $5=$1;
 var $6=_database_name($5);
 _leap_printf(13072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$1;
 var $8=_database_name($7);
 _leap_printf(12864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$8,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(12592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 var $10=$crel;
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=9;break;}
 case 3: 
 var $13=$crel;
 var $14=(($13+4669)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=1;
 if($17){label=5;break;}else{label=4;break;}
 case 4: 
 var $19=$crel;
 var $20=(($19)|0);
 var $21=(($20)|0);
 var $22=_strcmp($21,18200);
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=7;break;}
 case 5: 
 var $25=$crel;
 var $26=(($25+4660)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 var $29=($28|0)!=1;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$crel;
 _relation_reverse($31);
 label=8;break;
 case 7: 
 var $33=$crel;
 var $34=(($33)|0);
 var $35=(($34)|0);
 _do_debug(3,12312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 var $37=$crel;
 var $38=(($37+4636)|0);
 var $39=HEAP32[(($38)>>2)];
 $crel=$39;
 label=2;break;
 case 9: 
 _reverse_source_code();
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _whichdb($db,$rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $dbtouse;
 $1=$db;
 $2=$rel;
 var $3=$1;
 $dbtouse=$3;
 var $4=HEAP8[(16)];
 var $5=($4&255);
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=7;break;}
 case 2: 
 var $8=HEAP32[((37152)>>2)];
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 var $11=$1;
 var $12=_database_name($11);
 var $13=_strcmp($12,12072);
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=7;break;}
 case 4: 
 var $16=$2;
 var $17=(($16)|0);
 var $18=HEAP8[($17)];
 var $19=(($18<<24)>>24);
 var $20=($19|0)==122;
 if($20){label=5;break;}else{label=7;break;}
 case 5: 
 var $22=$2;
 var $23=(($22+1)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 var $26=($25|0)==122;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$2;
 _do_debug(3,11608,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$28,tempVarArgs)); STACKTOP=tempVarArgs;
 var $29=HEAP32[((37152)>>2)];
 $dbtouse=$29;
 label=11;break;
 case 7: 
 var $31=HEAP8[(37320)];
 var $32=($31&255);
 var $33=($32|0)!=0;
 if($33){label=8;break;}else{label=10;break;}
 case 8: 
 var $35=HEAP32[((37312)>>2)];
 var $36=($35|0)>=3;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 var $38=HEAP32[((_stderr)>>2)];
 var $39=$2;
 _leap_fprintf($38,11320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$39,tempVarArgs)); STACKTOP=tempVarArgs;
 var $40=$1;
 $dbtouse=$40;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $43=$dbtouse;
 STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }

}


function _define_handle($ehandle,$handle){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$ehandle;
 $3=$handle;
 var $4=$2;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$2;
 var $8=$3;
 HEAP32[(($8)>>2)]=$7;
 $1=1;
 label=4;break;
 case 3: 
 var $10=$3;
 HEAP32[(($10)>>2)]=0;
 $1=0;
 label=4;break;
 case 4: 
 var $12=$1;
 STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _default_quiethandler($errornumber,$errorfatality,$errorstring){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $temp=sp;
 $1=$errornumber;
 $2=$errorfatality;
 $3=$errorstring;
 var $4=$2;
 if(($4|0)==0){ label=2;break;}else if(($4|0)==1){ label=3;break;}else{label=7;break;}
 case 2: 
 label=8;break;
 case 3: 
 var $7=$2;
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($temp)|0);
 var $11=_strcpy($10,8648);
 label=6;break;
 case 5: 
 var $13=(($temp)|0);
 var $14=_strcpy($13,8416);
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 var $17=(($temp)|0);
 var $18=_strcpy($17,8416);
 label=8;break;
 case 8: 
 var $20=$2;
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=10;break;}
 case 9: 
 var $23=HEAP32[((_stderr)>>2)];
 var $24=$3;
 _leap_fprintf($23,8200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$24,tempVarArgs)); STACKTOP=tempVarArgs;
 label=11;break;
 case 10: 
 var $26=HEAP32[((_stderr)>>2)];
 var $27=(($temp)|0);
 var $28=$1;
 var $29=$3;
 _leap_fprintf($26,7944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,HEAP32[(((tempVarArgs)+(8))>>2)]=$28,HEAP32[(((tempVarArgs)+(16))>>2)]=$29,tempVarArgs)); STACKTOP=tempVarArgs;
 label=11;break;
 case 11: 
 var $31=$1;
 var $32=((56+((($31)*(12))&-1))|0);
 var $33=(($32+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==2;
 if($35){label=13;break;}else{label=12;break;}
 case 12: 
 var $37=$1;
 var $38=($37|0)==2;
 if($38){label=13;break;}else{label=14;break;}
 case 13: 
 var $40=HEAP32[((_stderr)>>2)];
 _leap_fprintf($40,7624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _util_close();
 var $41=$1;
 _exit($41);
 throw "Reached an unreachable!";
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _default_handler($errornumber,$errorfatality,$errorstring){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $temp=sp;
 $1=$errornumber;
 $2=$errorfatality;
 $3=$errorstring;
 var $4=$2;
 if(($4|0)==0){ label=2;break;}else if(($4|0)==1){ label=3;break;}else{label=7;break;}
 case 2: 
 var $6=(($temp)|0);
 var $7=_strcpy($6,8648);
 label=8;break;
 case 3: 
 var $9=$2;
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($temp)|0);
 var $13=_strcpy($12,8648);
 label=6;break;
 case 5: 
 var $15=(($temp)|0);
 var $16=_strcpy($15,8416);
 label=6;break;
 case 6: 
 label=8;break;
 case 7: 
 var $19=(($temp)|0);
 var $20=_strcpy($19,8416);
 label=8;break;
 case 8: 
 var $22=HEAP32[((_stderr)>>2)];
 var $23=(($temp)|0);
 var $24=$1;
 var $25=$3;
 _leap_fprintf($22,7944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAP32[(((tempVarArgs)+(8))>>2)]=$24,HEAP32[(((tempVarArgs)+(16))>>2)]=$25,tempVarArgs)); STACKTOP=tempVarArgs;
 var $26=$1;
 var $27=((56+((($26)*(12))&-1))|0);
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=10;break;}else{label=9;break;}
 case 9: 
 var $32=$1;
 var $33=($32|0)==2;
 if($33){label=10;break;}else{label=12;break;}
 case 10: 
 var $35=$2;
 var $36=($35|0)!=0;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 var $38=HEAP32[((_stderr)>>2)];
 _leap_fprintf($38,7624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _util_close();
 var $39=$1;
 _exit($39);
 throw "Reached an unreachable!";
 case 12: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _raise_error($error_num,$fatality,$fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2080)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ap=sp;
 var $expression=(sp)+(16);
 var $preexpression=(sp)+(1048);
 $1=$error_num;
 $2=$fatality;
 $3=$fmt;
 var $4=(($ap)|0);
 var $5=$4;
 HEAP32[(($5)>>2)]=varrp;HEAP32[((($5)+(4))>>2)]=0;
 var $6=$1;
 var $7=(($6<<16)>>16);
 var $8=($7>>>0)<62;
 if($8){label=2;break;}else{label=6;break;}
 case 2: 
 var $10=(($preexpression)|0);
 var $11=$3;
 var $12=(($ap)|0);
 var $13=_vsprintf($10,$11,$12);
 var $14=(($expression)|0);
 var $15=$1;
 var $16=(($15<<16)>>16);
 var $17=((56+((($16)*(12))&-1))|0);
 var $18=(($17+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($preexpression)|0);
 var $21=_sprintf($14,$19,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$20,tempVarArgs)); STACKTOP=tempVarArgs;
 var $22=HEAP32[((42712)>>2)];
 var $23=($22|0)!=0;
 if($23){label=3;break;}else{label=4;break;}
 case 3: 
 var $25=HEAP32[((42712)>>2)];
 var $26=$1;
 var $27=(($26<<16)>>16);
 var $28=$2;
 var $29=(($expression)|0);
 FUNCTION_TABLE[$25]($27,$28,$29);
 label=5;break;
 case 4: 
 var $31=_define_handle(6,42712);
 var $32=HEAP32[((42712)>>2)];
 var $33=$1;
 var $34=(($33<<16)>>16);
 var $35=$2;
 var $36=(($expression)|0);
 FUNCTION_TABLE[$32]($34,$35,$36);
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _raise_message($type,$fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2080)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ap=sp;
 var $expression=(sp)+(16);
 var $preexpression=(sp)+(1048);
 $1=$type;
 $2=$fmt;
 var $3=(($ap)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 var $5=(($preexpression)|0);
 var $6=$2;
 var $7=(($ap)|0);
 var $8=_vsprintf($5,$6,$7);
 var $9=$1;
 var $10=(($9<<16)>>16);
 var $11=($10|0)==0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 var $13=(($expression)|0);
 var $14=HEAP32[((672)>>2)];
 var $15=(($preexpression)|0);
 var $16=_sprintf($13,$14,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=HEAP32[((42704)>>2)];
 var $18=($17|0)!=0;
 if($18){label=3;break;}else{label=4;break;}
 case 3: 
 var $20=HEAP32[((42704)>>2)];
 var $21=(($expression)|0);
 FUNCTION_TABLE[$20](51,0,$21);
 label=4;break;
 case 4: 
 label=8;break;
 case 5: 
 var $24=(($expression)|0);
 var $25=HEAP32[((684)>>2)];
 var $26=(($preexpression)|0);
 var $27=_sprintf($24,$25,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs)); STACKTOP=tempVarArgs;
 var $28=HEAP32[((42664)>>2)];
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=HEAP32[((42664)>>2)];
 var $32=(($expression)|0);
 FUNCTION_TABLE[$31](52,0,$32);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _print_header($brief){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$brief;
 var $2=HEAP8[(37272)];
 var $3=($2&255);
 var $4=($3|0)!=1;
 if($4){label=2;break;}else{label=5;break;}
 case 2: 
 var $6=HEAP32[((_stdout)>>2)];
 _leap_fprintf($6,19744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1,HEAP32[(((tempVarArgs)+(8))>>2)]=2,HEAP32[(((tempVarArgs)+(16))>>2)]=6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=HEAP32[((_stdout)>>2)];
 _leap_fprintf($7,27152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=HEAP32[((_stdout)>>2)];
 _leap_fprintf($8,21864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=18320,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=HEAP32[((_stdout)>>2)];
 _leap_fprintf($9,14472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=11408,tempVarArgs)); STACKTOP=tempVarArgs;
 var $10=$1;
 var $11=($10&255);
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=HEAP32[((_stdout)>>2)];
 _leap_fprintf($14,8472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=6072,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=HEAP32[((_stdout)>>2)];
 _leap_fprintf($15,14472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=3912,tempVarArgs)); STACKTOP=tempVarArgs;
 var $16=HEAP32[((_stdout)>>2)];
 _leap_fprintf($16,14472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=2336,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=HEAP32[((_stdout)>>2)];
 _leap_fprintf($17,30368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _do_addresses(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 _leap_printf(28880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(27560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(26720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(25672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(24952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(24280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(23656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(23256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _print_info(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 _leap_printf(22880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(22608,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(22304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(21920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(30368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(21552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(21120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(20832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(20440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(30368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(20136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(19816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(19552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(30368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(19264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(18896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _print_help(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 _print_header(1);
 _leap_printf(18432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(18112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(17664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(17328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(17000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(16688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(16368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(16016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(15624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(15192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(14648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(14224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(13880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(13568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(13240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(13000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(12776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(12496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(12200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(11880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(11528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _print_shutdown(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(37272)];
 var $2=($1&255);
 var $3=($2|0)!=1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 _leap_printf(11224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(11040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(10728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(10392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(10088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(9768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(9560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(9320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(8912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _do_warranty(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 _print_header(1);
 _leap_printf(8600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(8336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(8120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(7872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(7544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(7368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(7144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(6968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(6792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(6528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(6288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(5936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(5688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(5440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(5216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(5024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(4808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(4616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(4392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _levindicator($levflag){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$levflag;
 var $2=$1;
 HEAP8[(48)]=$2;
 STACKTOP=sp;return;
}


function _do_debug($debuglevel,$fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ap=sp;
 $1=$debuglevel;
 $2=$fmt;
 var $3=HEAP32[((37312)>>2)];
 var $4=$1;
 var $5=($3|0)>=($4|0);
 if($5){label=2;break;}else{label=16;break;}
 case 2: 
 var $7=HEAP32[((24)>>2)];
 var $8=$1;
 var $9=($7|0)<=($8|0);
 if($9){label=3;break;}else{label=16;break;}
 case 3: 
 var $11=(($ap)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=varrp;HEAP32[((($12)+(4))>>2)]=0;
 var $13=HEAP8[(48)];
 var $14=(($13<<24)>>24)!=0;
 if($14){label=4;break;}else{label=10;break;}
 case 4: 
 var $16=HEAP8[(37296)];
 var $17=($16&255);
 var $18=($17|0)==1;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=HEAP32[((_stdout)>>2)];
 var $21=$1;
 var $22=_fprintf($20,16560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 6: 
 var $24=HEAP32[((_stderr)>>2)];
 var $25=$1;
 var $26=_fprintf($24,16560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$25,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 var $28=HEAP32[((60280)>>2)];
 var $29=($28|0)!=0;
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 var $31=HEAP32[((60280)>>2)];
 var $32=$1;
 var $33=_fprintf($31,16560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $36=HEAP8[(37296)];
 var $37=($36&255);
 var $38=($37|0)==1;
 if($38){label=11;break;}else{label=12;break;}
 case 11: 
 var $40=HEAP32[((_stdout)>>2)];
 var $41=$2;
 var $42=(($ap)|0);
 var $43=_vfprintf($40,$41,$42);
 label=13;break;
 case 12: 
 var $45=HEAP32[((_stderr)>>2)];
 var $46=$2;
 var $47=(($ap)|0);
 var $48=_vfprintf($45,$46,$47);
 label=13;break;
 case 13: 
 var $50=HEAP32[((60280)>>2)];
 var $51=($50|0)!=0;
 if($51){label=14;break;}else{label=15;break;}
 case 14: 
 var $53=HEAP32[((60280)>>2)];
 var $54=$2;
 var $55=(($ap)|0);
 var $56=_vfprintf($53,$54,$55);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _leap_fprintf($stream,$fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ap=sp;
 $1=$stream;
 $2=$fmt;
 var $3=(($ap)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 var $5=HEAP8[(37328)];
 var $6=($5&255);
 var $7=($6|0)==1;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$2;
 var $10=(($ap)|0);
 var $11=_vsprintf(37352,$9,$10);
 var $12=HEAP32[((38384)>>2)];
 var $13=_strlen(37352);
 var $14=_write($12,37352,$13);
 _do_debug(2,26280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=37352,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 3: 
 var $16=HEAP8[(37296)];
 var $17=($16&255);
 var $18=($17|0)==1;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$1;
 var $21=HEAP32[((_stderr)>>2)];
 var $22=($20|0)==($21|0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=HEAP32[((_stdout)>>2)];
 var $25=$2;
 var $26=(($ap)|0);
 var $27=_vfprintf($24,$25,$26);
 label=7;break;
 case 6: 
 var $29=$1;
 var $30=$2;
 var $31=(($ap)|0);
 var $32=_vfprintf($29,$30,$31);
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $35=HEAP32[((60280)>>2)];
 var $36=($35|0)!=0;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 var $38=HEAP32[((60280)>>2)];
 var $39=$2;
 var $40=(($ap)|0);
 var $41=_vfprintf($38,$39,$40);
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _leap_printf($fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ap=sp;
 $1=$fmt;
 var $2=(($ap)|0);
 var $3=$2;
 HEAP32[(($3)>>2)]=varrp;HEAP32[((($3)+(4))>>2)]=0;
 var $4=HEAP8[(37328)];
 var $5=($4&255);
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$1;
 var $9=(($ap)|0);
 var $10=_vsprintf(37352,$8,$9);
 var $11=HEAP32[((38384)>>2)];
 var $12=_strlen(37352);
 var $13=_write($11,37352,$12);
 _do_debug(2,26280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=37352,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 3: 
 var $15=HEAP32[((_stdout)>>2)];
 var $16=$1;
 var $17=(($ap)|0);
 var $18=_vfprintf($15,$16,$17);
 label=4;break;
 case 4: 
 var $20=HEAP32[((60280)>>2)];
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=HEAP32[((60280)>>2)];
 var $24=$1;
 var $25=(($ap)|0);
 var $26=_vfprintf($23,$24,$25);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _new_parse_node($parent,$handed){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $pt;
 $1=$parent;
 $2=$handed;
 var $3=_malloc(9256);
 var $4=$3;
 $pt=$4;
 var $5=$pt;
 var $6=$5;
 _check_assign($6,16272);
 var $7=$pt;
 var $8=(($7+2052)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=$pt;
 var $10=(($9+2064)|0);
 HEAP8[($10)]=0;
 var $11=$pt;
 var $12=(($11+2056)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$pt;
 var $14=(($13+2065)|0);
 HEAP8[($14)]=0;
 var $15=$pt;
 var $16=(($15)|0);
 var $17=(($16)|0);
 var $18=_strcpy($17,51568);
 var $19=$pt;
 var $20=(($19+2076)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=$pt;
 var $22=(($21+2068)|0);
 HEAP32[(($22)>>2)]=0;
 var $23=$pt;
 var $24=(($23+2072)|0);
 HEAP32[(($24)>>2)]=0;
 var $25=$2;
 var $26=$pt;
 var $27=(($26+2080)|0);
 HEAP8[($27)]=$25;
 var $28=$pt;
 var $29=(($28+3106)|0);
 var $30=(($29)|0);
 var $31=_strcpy($30,51568);
 var $32=$1;
 var $33=$pt;
 var $34=(($33+2060)|0);
 HEAP32[(($34)>>2)]=$32;
 var $35=$pt;
 STACKTOP=sp;return $35;
}


function _display_ptree($ptree,$depth){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $temp=sp;
 $1=$ptree;
 $2=$depth;
 var $3=$1;
 var $4=(($3+2080)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24);
 if(($6|0)==1){ label=2;break;}else if(($6|0)==2){ label=3;break;}else if(($6|0)==0){ label=4;break;}else{label=5;break;}
 case 2: 
 _leap_printf(21392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 3: 
 _leap_printf(18016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 4: 
 _leap_printf(14072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 var $11=(($temp)|0);
 var $12=$2;
 var $13=_sprintf($11,11120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,tempVarArgs)); STACKTOP=tempVarArgs;
 var $14=(($temp)|0);
 _do_trace($14);
 var $15=(($temp)|0);
 var $16=$1;
 var $17=(($16)|0);
 var $18=(($17)|0);
 var $19=_sprintf($15,8224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$18,tempVarArgs)); STACKTOP=tempVarArgs;
 var $20=(($temp)|0);
 _do_trace($20);
 var $21=(($temp)|0);
 var $22=_sprintf($21,5792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $23=(($temp)|0);
 _do_trace($23);
 var $24=$1;
 var $25=(($24+2052)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)!=0;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 var $29=$1;
 var $30=(($29+2052)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$2;
 var $33=((($32)+(1))|0);
 _display_ptree($31,$33);
 var $34=(($temp)|0);
 var $35=$2;
 var $36=$1;
 var $37=(($36)|0);
 var $38=(($37)|0);
 var $39=_sprintf($34,3816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$35,HEAP32[(((tempVarArgs)+(8))>>2)]=$38,tempVarArgs)); STACKTOP=tempVarArgs;
 var $40=(($temp)|0);
 _do_trace($40);
 label=7;break;
 case 7: 
 var $42=$1;
 var $43=(($42+2056)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0)!=0;
 if($45){label=8;break;}else{label=9;break;}
 case 8: 
 var $47=$1;
 var $48=(($47+2056)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=$2;
 var $51=((($50)+(1))|0);
 _display_ptree($49,$51);
 var $52=(($temp)|0);
 var $53=$2;
 var $54=$1;
 var $55=(($54)|0);
 var $56=(($55)|0);
 var $57=_sprintf($52,3816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$53,HEAP32[(((tempVarArgs)+(8))>>2)]=$56,tempVarArgs)); STACKTOP=tempVarArgs;
 var $58=(($temp)|0);
 _do_trace($58);
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _checkcomment($string){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $c;
 var $stringfound;
 var $commentfound;
 $1=$string;
 $c=0;
 $stringfound=0;
 $commentfound=0;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{var $21=0;label=7;break;}
 case 3: 
 var $6=$c;
 var $7=$1;
 var $8=_strlen($7);
 var $9=($6>>>0)<($8>>>0);
 if($9){label=4;break;}else{var $21=0;label=7;break;}
 case 4: 
 var $11=$stringfound;
 var $12=($11&255);
 var $13=($12|0)==0;
 if($13){label=5;break;}else{var $19=0;label=6;break;}
 case 5: 
 var $15=$commentfound;
 var $16=($15&255);
 var $17=($16|0)==0;
 var $19=$17;label=6;break;
 case 6: 
 var $19;
 var $21=$19;label=7;break;
 case 7: 
 var $21;
 if($21){label=8;break;}else{label=13;break;}
 case 8: 
 var $23=$c;
 var $24=$1;
 var $25=(($24+$23)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24);
 var $28=_isalpha($27);
 var $29=($28|0)!=0;
 if($29){label=9;break;}else{label=10;break;}
 case 9: 
 $stringfound=1;
 label=10;break;
 case 10: 
 var $32=$c;
 var $33=$1;
 var $34=(($33+$32)|0);
 var $35=HEAP8[($34)];
 var $36=(($35<<24)>>24);
 var $37=($36|0)==35;
 if($37){label=11;break;}else{label=12;break;}
 case 11: 
 $commentfound=1;
 label=12;break;
 case 12: 
 var $40=$c;
 var $41=((($40)+(1))|0);
 $c=$41;
 label=2;break;
 case 13: 
 var $43=$commentfound;
 STACKTOP=sp;return $43;
  default: assert(0, "bad label: " + label);
 }

}


function _execute($db,$parsetree){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $abort;
 var $ptree;
 var $result_tree;
 var $ptstack=sp;
 var $tdb=(sp)+(8);
 var $temp=(sp)+(16);
 var $tdir=(sp)+(1040);
 var $rtrel;
 var $count;
 var $total_read_physical;
 var $total_read_logical;
 var $total_written;
 var $start_time;
 var $end_time;
 $1=$db;
 $2=$parsetree;
 $abort=0;
 var $3=$2;
 $ptree=$3;
 $result_tree=0;
 $start_time=0;
 $end_time=0;
 HEAP8[(42696)]=0;
 _do_trace(2216);
 var $4=_pt_create_stack();
 HEAP32[(($ptstack)>>2)]=$4;
 $count=0;
 $total_read_physical=0;
 $total_read_logical=0;
 $total_written=0;
 label=2;break;
 case 2: 
 var $6=$result_tree;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{var $13=0;label=4;break;}
 case 3: 
 var $9=$abort;
 var $10=($9&255);
 var $11=($10|0)==0;
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 if($13){label=5;break;}else{label=101;break;}
 case 5: 
 HEAP32[((42608)>>2)]=0;
 HEAP32[((42624)>>2)]=0;
 HEAP32[((42616)>>2)]=0;
 label=6;break;
 case 6: 
 var $16=$ptree;
 var $17=(($16+2052)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)!=0;
 if($19){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=HEAP32[(($ptstack)>>2)];
 var $22=$ptree;
 _pt_push_stack($21,$22);
 var $23=$ptree;
 var $24=(($23+2052)|0);
 var $25=HEAP32[(($24)>>2)];
 $ptree=$25;
 _do_trace(30224);
 label=6;break;
 case 8: 
 var $27=$result_tree;
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=96;break;}
 case 9: 
 var $30=(($temp)|0);
 var $31=$count;
 var $32=((($31)+(1))|0);
 $count=$32;
 var $33=$ptree;
 var $34=(($33)|0);
 var $35=(($34)|0);
 var $36=_sprintf($30,28680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$31,HEAP32[(((tempVarArgs)+(8))>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($temp)|0);
 _do_trace($37);
 var $38=$ptree;
 var $39=(($38+2076)|0);
 HEAP32[(($39)>>2)]=0;
 var $40=HEAP8[(37248)];
 var $41=(($40<<24)>>24)!=0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=_clock();
 $start_time=$43;
 label=11;break;
 case 11: 
 var $45=$ptree;
 var $46=(($45+9252)|0);
 var $47=HEAP8[($46)];
 var $48=(($47<<24)>>24);
 switch(($48|0)){case 62:case 40:{ label=12;break;}case 37:case 28:case 26:case 18:case 19:case 8:case 49:{ label=13;break;}case 4:{ label=14;break;}case 3:{ label=15;break;}case 35:case 64:{ label=16;break;}case 45:{ label=17;break;}case 60:{ label=18;break;}case 71:{ label=19;break;}case 70:{ label=20;break;}case 1:{ label=24;break;}case 33:{ label=25;break;}case 61:{ label=29;break;}case 57:{ label=30;break;}case 52:{ label=33;break;}case 23:{ label=34;break;}case 66:{ label=35;break;}case 72:{ label=36;break;}case 22:{ label=37;break;}case 14:{ label=38;break;}case 63:{ label=39;break;}case 20:{ label=40;break;}case 21:{ label=41;break;}case 13:{ label=42;break;}case 9:{ label=43;break;}case 30:{ label=44;break;}case 6:{ label=45;break;}case 48:{ label=46;break;}case 11:{ label=47;break;}case 5:{ label=50;break;}case 24:{ label=51;break;}case 16:{ label=59;break;}case 67:{ label=60;break;}case 77:{ label=61;break;}case 7:{ label=62;break;}case 38:{ label=66;break;}case 34:{ label=67;break;}case 58:{ label=68;break;}case 59:{ label=69;break;}case 73:{ label=70;break;}case 56:{ label=71;break;}case 68:{ label=72;break;}case 29:{ label=76;break;}case 69:{ label=77;break;}case 12:{ label=78;break;}default:{label=79;break;}}break;
 case 12: 
 var $50=HEAP32[((_stdout)>>2)];
 _leap_fprintf($50,27496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $51=HEAP32[((_stdout)>>2)];
 var $52=_fflush($51);
 label=80;break;
 case 13: 
 var $54=$ptree;
 var $55=(($54+2081)|0);
 var $56=(($55)|0);
 _raise_error(26,0,$56,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=80;break;
 case 14: 
 var $58=$1;
 var $59=_vprocess_query($58,26600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=25592,HEAP32[(((tempVarArgs)+(8))>>2)]=24920,HEAP32[(((tempVarArgs)+(16))>>2)]=24240,HEAP32[(((tempVarArgs)+(24))>>2)]=23608,tempVarArgs)); STACKTOP=tempVarArgs;
 var $60=$ptree;
 var $61=(($60+2076)|0);
 HEAP32[(($61)>>2)]=$59;
 label=80;break;
 case 15: 
 _list_source_code();
 label=80;break;
 case 16: 
 _show_variables();
 label=80;break;
 case 17: 
 _unset_prompt();
 var $65=$ptree;
 var $66=(($65+4131)|0);
 var $67=(($66)|0);
 var $68=_change_db($67);
 label=80;break;
 case 18: 
 var $70=$ptree;
 var $71=(($70+4131)|0);
 var $72=(($71)|0);
 _print_source_code($72);
 label=80;break;
 case 19: 
 var $74=$ptree;
 var $75=(($74+4131)|0);
 var $76=(($75)|0);
 _util_internal($76);
 label=80;break;
 case 20: 
 var $78=HEAP8[(42576)];
 var $79=($78&255);
 var $80=($79|0)==0;
 if($80){label=21;break;}else{label=22;break;}
 case 21: 
 var $82=$ptree;
 var $83=(($82+4131)|0);
 var $84=(($83)|0);
 _start_record($84);
 label=23;break;
 case 22: 
 _stop_record();
 label=23;break;
 case 23: 
 label=80;break;
 case 24: 
 var $88=$ptree;
 var $89=(($88+4131)|0);
 var $90=(($89)|0);
 _print_helppage($90);
 label=80;break;
 case 25: 
 var $92=$ptree;
 var $93=(($92+4131)|0);
 var $94=(($93)|0);
 var $95=_strlen($94);
 var $96=($95|0)==0;
 if($96){label=26;break;}else{label=27;break;}
 case 26: 
 _set_prompt(23248);
 label=28;break;
 case 27: 
 var $99=$ptree;
 var $100=(($99+4131)|0);
 var $101=(($100)|0);
 _set_prompt($101);
 label=28;break;
 case 28: 
 label=80;break;
 case 29: 
 var $104=$ptree;
 var $105=(($104+4131)|0);
 var $106=(($105)|0);
 var $107=$ptree;
 var $108=(($107+5156)|0);
 var $109=(($108)|0);
 var $110=_set_variable($106,$109);
 var $111=($110|0)==0;
 var $112=($111&1);
 var $113=(($112)&255);
 HEAP8[(42696)]=$113;
 label=80;break;
 case 30: 
 var $115=$1;
 var $116=$ptree;
 var $117=(($116+2081)|0);
 var $118=(($117)|0);
 var $119=_relation_find($115,$118);
 var $120=$ptree;
 var $121=(($120+2076)|0);
 HEAP32[(($121)>>2)]=$119;
 var $122=$ptree;
 var $123=(($122+2076)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=($124|0)==0;
 if($125){label=31;break;}else{label=32;break;}
 case 31: 
 $abort=1;
 var $127=$ptree;
 var $128=(($127+2081)|0);
 var $129=(($128)|0);
 _raise_error(9,0,$129,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP8[(42696)]=1;
 label=32;break;
 case 32: 
 label=80;break;
 case 33: 
 var $132=$1;
 var $133=$ptree;
 var $134=(($133+2068)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$ptree;
 var $137=(($136+3106)|0);
 var $138=(($137)|0);
 var $139=_rl_duplicate($132,$135,$138);
 var $140=$ptree;
 var $141=(($140+2076)|0);
 HEAP32[(($141)>>2)]=$139;
 label=80;break;
 case 34: 
 var $143=$1;
 var $144=$ptree;
 var $145=(($144+2068)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$ptree;
 var $148=(($147+5156)|0);
 var $149=(($148)|0);
 var $150=$ptree;
 var $151=(($150+3106)|0);
 var $152=(($151)|0);
 var $153=_rl_select($143,$146,$149,$152);
 var $154=$ptree;
 var $155=(($154+2076)|0);
 HEAP32[(($155)>>2)]=$153;
 label=80;break;
 case 35: 
 var $157=$1;
 var $158=$ptree;
 var $159=(($158+2068)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=$ptree;
 var $162=(($161+5156)|0);
 var $163=(($162)|0);
 var $164=$ptree;
 var $165=(($164+3106)|0);
 var $166=(($165)|0);
 var $167=_rl_erase($157,$160,$163,$166);
 var $168=$ptree;
 var $169=(($168+2076)|0);
 HEAP32[(($169)>>2)]=$167;
 label=80;break;
 case 36: 
 var $171=$1;
 var $172=$ptree;
 var $173=(($172+2068)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$ptree;
 var $176=(($175+5156)|0);
 var $177=(($176)|0);
 var $178=$ptree;
 var $179=(($178+6181)|0);
 var $180=(($179)|0);
 var $181=$ptree;
 var $182=(($181+3106)|0);
 var $183=(($182)|0);
 var $184=_rl_update($171,$174,$177,$180,$183);
 var $185=$ptree;
 var $186=(($185+2076)|0);
 HEAP32[(($186)>>2)]=$184;
 label=80;break;
 case 37: 
 var $188=$1;
 var $189=$ptree;
 var $190=(($189+2068)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=$ptree;
 var $193=(($192+2072)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$ptree;
 var $196=(($195+3106)|0);
 var $197=(($196)|0);
 var $198=_rl_product($188,$191,$194,$197);
 var $199=$ptree;
 var $200=(($199+2076)|0);
 HEAP32[(($200)>>2)]=$198;
 label=80;break;
 case 38: 
 var $202=$1;
 var $203=$ptree;
 var $204=(($203+2068)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=$ptree;
 var $207=(($206+2072)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=$ptree;
 var $210=(($209+6181)|0);
 var $211=(($210)|0);
 var $212=$ptree;
 var $213=(($212+3106)|0);
 var $214=(($213)|0);
 var $215=_rl_naturaljoin($202,$205,$208,$211,$214,7);
 var $216=$ptree;
 var $217=(($216+2076)|0);
 HEAP32[(($217)>>2)]=$215;
 label=80;break;
 case 39: 
 var $219=$1;
 var $220=$ptree;
 var $221=(($220+2068)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=$ptree;
 var $224=(($223+2072)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=$ptree;
 var $227=(($226+6181)|0);
 var $228=(($227)|0);
 var $229=$ptree;
 var $230=(($229+3106)|0);
 var $231=(($230)|0);
 var $232=_rl_naturaljoin($219,$222,$225,$228,$231,0);
 var $233=$ptree;
 var $234=(($233+2076)|0);
 HEAP32[(($234)>>2)]=$232;
 label=80;break;
 case 40: 
 var $236=$1;
 var $237=$ptree;
 var $238=(($237+2068)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=$ptree;
 var $241=(($240+2072)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=$ptree;
 var $244=(($243+3106)|0);
 var $245=(($244)|0);
 var $246=_rl_intersect($236,$239,$242,$245);
 var $247=$ptree;
 var $248=(($247+2076)|0);
 HEAP32[(($248)>>2)]=$246;
 label=80;break;
 case 41: 
 var $250=$1;
 var $251=$ptree;
 var $252=(($251+2068)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=$ptree;
 var $255=(($254+2072)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=$ptree;
 var $258=(($257+3106)|0);
 var $259=(($258)|0);
 var $260=_rl_difference($250,$253,$256,$259);
 var $261=$ptree;
 var $262=(($261+2076)|0);
 HEAP32[(($262)>>2)]=$260;
 label=80;break;
 case 42: 
 var $264=$1;
 var $265=$ptree;
 var $266=(($265+2068)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=$ptree;
 var $269=(($268+2072)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=$ptree;
 var $272=(($271+3106)|0);
 var $273=(($272)|0);
 var $274=_rl_union($264,$267,$270,$273);
 var $275=$ptree;
 var $276=(($275+2076)|0);
 HEAP32[(($276)>>2)]=$274;
 label=80;break;
 case 43: 
 var $278=$1;
 var $279=$ptree;
 var $280=(($279+2068)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=$ptree;
 var $283=(($282+5156)|0);
 var $284=(($283)|0);
 var $285=$ptree;
 var $286=(($285+3106)|0);
 var $287=(($286)|0);
 var $288=_rl_project($278,$281,$284,$287);
 var $289=$ptree;
 var $290=(($289+2076)|0);
 HEAP32[(($290)>>2)]=$288;
 label=80;break;
 case 44: 
 var $292=$1;
 var $293=$ptree;
 var $294=(($293+2068)|0);
 var $295=HEAP32[(($294)>>2)];
 var $296=$ptree;
 var $297=(($296+5156)|0);
 var $298=(($297)|0);
 var $299=_insert($292,$295,$298);
 var $300=$ptree;
 var $301=(($300+2076)|0);
 HEAP32[(($301)>>2)]=$299;
 label=80;break;
 case 45: 
 label=80;break;
 case 46: 
 var $304=$1;
 var $305=$ptree;
 var $306=(($305+4131)|0);
 var $307=(($306)|0);
 var $308=$ptree;
 var $309=(($308+5156)|0);
 var $310=(($309)|0);
 var $311=_relation_rename($304,$307,$310);
 var $312=$ptree;
 var $313=(($312+2076)|0);
 HEAP32[(($313)>>2)]=$311;
 label=80;break;
 case 47: 
 var $315=$ptree;
 var $316=(($315+4131)|0);
 var $317=(($316)|0);
 var $318=_strlen($317);
 var $319=($318>>>0)>0;
 if($319){label=48;break;}else{label=49;break;}
 case 48: 
 var $321=(($temp)|0);
 var $322=HEAP32[((43016)>>2)];
 var $323=_database_dir($322);
 var $324=$ptree;
 var $325=(($324+4131)|0);
 var $326=(($325)|0);
 var $327=_sprintf($321,22864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$323,HEAP32[(((tempVarArgs)+(8))>>2)]=22600,HEAP32[(((tempVarArgs)+(16))>>2)]=$326,HEAP32[(((tempVarArgs)+(24))>>2)]=22232,tempVarArgs)); STACKTOP=tempVarArgs;
 var $328=(($temp)|0);
 _assign_input_stream($328);
 label=49;break;
 case 49: 
 label=80;break;
 case 50: 
 var $331=$ptree;
 var $332=(($331+2068)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=_rl_display($333);
 var $335=$ptree;
 var $336=(($335+2076)|0);
 HEAP32[(($336)>>2)]=$334;
 label=80;break;
 case 51: 
 var $338=HEAP8[(16)];
 var $339=($338&255);
 var $340=($339|0)==1;
 if($340){label=52;break;}else{label=57;break;}
 case 52: 
 var $342=HEAP8[(47136)];
 var $343=($342&255);
 var $344=($343|0)!=1;
 if($344){label=53;break;}else{label=57;break;}
 case 53: 
 var $346=$1;
 var $347=_database_name($346);
 var $348=_strcmp($347,21912);
 var $349=($348|0)!=0;
 if($349){label=54;break;}else{label=57;break;}
 case 54: 
 var $351=$ptree;
 var $352=(($351+2068)|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=(($353)|0);
 var $355=(($354)|0);
 var $356=HEAP8[($355)];
 var $357=(($356<<24)>>24);
 var $358=($357|0)==122;
 if($358){label=55;break;}else{label=57;break;}
 case 55: 
 var $360=$ptree;
 var $361=(($360+2068)|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=(($362)|0);
 var $364=(($363+1)|0);
 var $365=HEAP8[($364)];
 var $366=(($365<<24)>>24);
 var $367=($366|0)==122;
 if($367){label=56;break;}else{label=57;break;}
 case 56: 
 var $369=HEAP32[((37152)>>2)];
 var $370=$ptree;
 var $371=(($370+2068)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372)|0);
 var $374=(($373)|0);
 var $375=_vprocess_query($369,21496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 48)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=21104,HEAP32[(((tempVarArgs)+(8))>>2)]=20816,HEAP32[(((tempVarArgs)+(16))>>2)]=$374,HEAP32[(((tempVarArgs)+(24))>>2)]=20424,HEAP32[(((tempVarArgs)+(32))>>2)]=20120,HEAP32[(((tempVarArgs)+(40))>>2)]=19808,tempVarArgs)); STACKTOP=tempVarArgs;
 var $376=$ptree;
 var $377=(($376+2076)|0);
 HEAP32[(($377)>>2)]=$375;
 label=58;break;
 case 57: 
 var $379=$1;
 var $380=$ptree;
 var $381=(($380+2068)|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=(($382)|0);
 var $384=(($383)|0);
 var $385=_vprocess_query($379,21496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 48)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=21104,HEAP32[(((tempVarArgs)+(8))>>2)]=20816,HEAP32[(((tempVarArgs)+(16))>>2)]=$384,HEAP32[(((tempVarArgs)+(24))>>2)]=20424,HEAP32[(((tempVarArgs)+(32))>>2)]=20120,HEAP32[(((tempVarArgs)+(40))>>2)]=19808,tempVarArgs)); STACKTOP=tempVarArgs;
 var $386=$ptree;
 var $387=(($386+2076)|0);
 HEAP32[(($387)>>2)]=$385;
 label=58;break;
 case 58: 
 label=80;break;
 case 59: 
 var $390=$1;
 var $391=$ptree;
 var $392=(($391+2068)|0);
 var $393=HEAP32[(($392)>>2)];
 _relation_change($390,$393);
 var $394=$ptree;
 var $395=(($394+2068)|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=$ptree;
 var $398=(($397+2076)|0);
 HEAP32[(($398)>>2)]=$396;
 label=80;break;
 case 60: 
 var $400=$ptree;
 var $401=(($400+2068)|0);
 var $402=HEAP32[(($401)>>2)];
 _dump_rel($402);
 var $403=$ptree;
 var $404=(($403+2068)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=$ptree;
 var $407=(($406+2076)|0);
 HEAP32[(($407)>>2)]=$405;
 label=80;break;
 case 61: 
 var $409=$1;
 var $410=$ptree;
 var $411=(($410+2068)|0);
 var $412=_rl_compact($409,$411);
 var $413=$ptree;
 var $414=(($413+2068)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=$ptree;
 var $417=(($416+2076)|0);
 HEAP32[(($417)>>2)]=$415;
 label=80;break;
 case 62: 
 var $419=$ptree;
 var $420=(($419+2068)|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=(($421+4669)|0);
 var $423=HEAP8[($422)];
 var $424=($423&255);
 var $425=($424|0)!=1;
 if($425){label=63;break;}else{label=64;break;}
 case 63: 
 var $427=$1;
 var $428=$ptree;
 var $429=(($428+2068)|0);
 _relation_remove($427,$429);
 var $430=$ptree;
 var $431=(($430+2068)|0);
 var $432=HEAP32[(($431)>>2)];
 var $433=$ptree;
 var $434=(($433+2076)|0);
 HEAP32[(($434)>>2)]=$432;
 label=65;break;
 case 64: 
 var $436=$ptree;
 var $437=(($436+2068)|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=(($438)|0);
 var $440=(($439)|0);
 _raise_error(50,0,$440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=65;break;
 case 65: 
 label=80;break;
 case 66: 
 _print_header(0);
 label=80;break;
 case 67: 
 _print_header(0);
 _print_info();
 label=80;break;
 case 68: 
 _do_warranty();
 label=80;break;
 case 69: 
 _do_addresses();
 label=80;break;
 case 70: 
 HEAP8[(33040)]=1;
 HEAP8[(33032)]=1;
 label=80;break;
 case 71: 
 HEAP8[(33040)]=1;
 label=80;break;
 case 72: 
 _do_trace(19528);
 var $449=HEAP8[(47136)];
 var $450=($449&255);
 var $451=($450|0)==0;
 if($451){label=73;break;}else{label=74;break;}
 case 73: 
 var $453=$1;
 var $454=$ptree;
 var $455=(($454+5156)|0);
 var $456=(($455)|0);
 var $457=$ptree;
 var $458=(($457+4131)|0);
 var $459=(($458)|0);
 var $460=_create_user_relation($453,$456,$459,1,0);
 var $461=$ptree;
 var $462=(($461+2076)|0);
 HEAP32[(($462)>>2)]=$460;
 label=75;break;
 case 74: 
 var $464=$1;
 var $465=$ptree;
 var $466=(($465+5156)|0);
 var $467=(($466)|0);
 var $468=$ptree;
 var $469=(($468+4131)|0);
 var $470=(($469)|0);
 var $471=_create_user_relation($464,$467,$470,0,0);
 var $472=$ptree;
 var $473=(($472+2076)|0);
 HEAP32[(($473)>>2)]=$471;
 label=75;break;
 case 75: 
 label=80;break;
 case 76: 
 _do_trace(19240);
 var $476=(($tdir)|0);
 var $477=_sprintf($476,18856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=18416,tempVarArgs)); STACKTOP=tempVarArgs;
 var $478=(($tdir)|0);
 var $479=$ptree;
 var $480=(($479+4131)|0);
 var $481=(($480)|0);
 var $482=_LEAPAPI_db_init($478,$481,1);
 HEAP32[(($tdb)>>2)]=$482;
 var $483=HEAP32[(($tdb)>>2)];
 _relations_dispose_all($483);
 _LEAPAPI_db_destroy($tdb);
 label=80;break;
 case 77: 
 _do_trace(18080);
 var $485=$1;
 _database_reverse($485);
 label=80;break;
 case 78: 
 var $487=$ptree;
 var $488=(($487+4131)|0);
 var $489=(($488)|0);
 var $490=_system($489);
 label=80;break;
 case 79: 
 _raise_error(21,0,17632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP8[(42696)]=1;
 label=80;break;
 case 80: 
 var $493=HEAP8[(37248)];
 var $494=(($493<<24)>>24)!=0;
 if($494){label=81;break;}else{label=82;break;}
 case 81: 
 var $496=_clock();
 $end_time=$496;
 label=82;break;
 case 82: 
 var $498=HEAP8[(42696)];
 var $499=($498&255);
 var $500=($499|0)!=0;
 if($500){label=83;break;}else{label=84;break;}
 case 83: 
 var $502=$ptree;
 var $503=(($502)|0);
 var $504=(($503)|0);
 _raise_error(29,0,$504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=84;break;
 case 84: 
 var $506=$ptree;
 var $507=(($506+2060)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=($508|0)!=0;
 if($509){label=85;break;}else{label=94;break;}
 case 85: 
 var $511=$ptree;
 var $512=(($511+2080)|0);
 var $513=HEAP8[($512)];
 var $514=(($513<<24)>>24);
 if(($514|0)==1){ label=86;break;}else if(($514|0)==2){ label=87;break;}else if(($514|0)==0){ label=88;break;}else{label=89;break;}
 case 86: 
 var $516=$ptree;
 var $517=(($516+2076)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=$ptree;
 var $520=(($519+2060)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(($521+2068)|0);
 HEAP32[(($522)>>2)]=$518;
 var $523=$ptree;
 var $524=(($523+2060)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=(($525+2052)|0);
 HEAP32[(($526)>>2)]=0;
 label=90;break;
 case 87: 
 var $528=$ptree;
 var $529=(($528+2076)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=$ptree;
 var $532=(($531+2060)|0);
 var $533=HEAP32[(($532)>>2)];
 var $534=(($533+2072)|0);
 HEAP32[(($534)>>2)]=$530;
 var $535=$ptree;
 var $536=(($535+2060)|0);
 var $537=HEAP32[(($536)>>2)];
 var $538=(($537+2056)|0);
 HEAP32[(($538)>>2)]=0;
 label=90;break;
 case 88: 
 label=89;break;
 case 89: 
 HEAP8[(42592)]=1;
 _raise_error(999,0,51568,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=90;break;
 case 90: 
 var $542=$ptree;
 var $543=$542;
 _free($543);
 $ptree=0;
 var $544=HEAP32[(($ptstack)>>2)];
 var $545=_pt_stack_empty($544);
 var $546=($545&255);
 var $547=($546|0)==0;
 if($547){label=91;break;}else{label=92;break;}
 case 91: 
 var $549=HEAP32[(($ptstack)>>2)];
 var $550=_pt_pop_stack($549);
 $ptree=$550;
 label=93;break;
 case 92: 
 HEAP8[(42696)]=1;
 _raise_error(29,0,17296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=93;break;
 case 93: 
 label=95;break;
 case 94: 
 var $554=$ptree;
 $result_tree=$554;
 label=95;break;
 case 95: 
 label=96;break;
 case 96: 
 var $557=$ptree;
 var $558=(($557+2056)|0);
 var $559=HEAP32[(($558)>>2)];
 var $560=($559|0)!=0;
 if($560){label=97;break;}else{label=98;break;}
 case 97: 
 var $562=HEAP32[(($ptstack)>>2)];
 var $563=$ptree;
 _pt_push_stack($562,$563);
 var $564=$ptree;
 var $565=(($564+2056)|0);
 var $566=HEAP32[(($565)>>2)];
 $ptree=$566;
 label=98;break;
 case 98: 
 var $568=HEAP8[(37248)];
 var $569=($568&255);
 var $570=($569|0)==1;
 if($570){label=99;break;}else{label=100;break;}
 case 99: 
 var $572=HEAP32[((_stdout)>>2)];
 var $573=HEAP32[((42624)>>2)];
 var $574=HEAP32[((42616)>>2)];
 var $575=HEAP32[((42608)>>2)];
 _leap_fprintf($572,16936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$573,HEAP32[(((tempVarArgs)+(8))>>2)]=$574,HEAP32[(((tempVarArgs)+(16))>>2)]=$575,tempVarArgs)); STACKTOP=tempVarArgs;
 var $576=HEAP32[((_stdout)>>2)];
 var $577=$end_time;
 var $578=($577|0);
 var $579=$start_time;
 var $580=($579|0);
 var $581=($578)-($580);
 var $582=($581)/(1000000);
 var $583=$582;
 _leap_fprintf($576,16656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$583,tempVarArgs)); STACKTOP=tempVarArgs;
 var $584=HEAP32[((42624)>>2)];
 var $585=$total_read_logical;
 var $586=((($585)+($584))|0);
 $total_read_logical=$586;
 var $587=HEAP32[((42616)>>2)];
 var $588=$total_read_physical;
 var $589=((($588)+($587))|0);
 $total_read_physical=$589;
 var $590=HEAP32[((42608)>>2)];
 var $591=$total_written;
 var $592=((($591)+($590))|0);
 $total_written=$592;
 label=100;break;
 case 100: 
 label=2;break;
 case 101: 
 _do_trace(16344);
 var $595=HEAP8[(42696)];
 var $596=($595&255);
 var $597=($596|0)==0;
 if($597){label=102;break;}else{label=103;break;}
 case 102: 
 var $599=$result_tree;
 var $600=(($599+2076)|0);
 var $601=HEAP32[(($600)>>2)];
 $rtrel=$601;
 label=104;break;
 case 103: 
 $rtrel=0;
 _do_trace(16000);
 label=104;break;
 case 104: 
 _do_trace(15592);
 var $604=$result_tree;
 var $605=($604|0)!=0;
 if($605){label=105;break;}else{label=106;break;}
 case 105: 
 var $607=$result_tree;
 var $608=$607;
 _free($608);
 label=106;break;
 case 106: 
 _pt_flush_stack($ptstack);
 var $610=HEAP8[(37248)];
 var $611=($610&255);
 var $612=($611|0)==1;
 if($612){label=107;break;}else{label=108;break;}
 case 107: 
 var $614=HEAP32[((_stdout)>>2)];
 var $615=$total_read_logical;
 var $616=$total_read_physical;
 var $617=$total_written;
 _leap_fprintf($614,15040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$615,HEAP32[(((tempVarArgs)+(8))>>2)]=$616,HEAP32[(((tempVarArgs)+(16))>>2)]=$617,tempVarArgs)); STACKTOP=tempVarArgs;
 label=108;break;
 case 108: 
 var $619=$rtrel;
 STACKTOP=sp;return $619;
  default: assert(0, "bad label: " + label);
 }

}


function _vprocess_query($db,$fmt,varrp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $ap=sp;
 var $expression=(sp)+(16);
 $1=$db;
 $2=$fmt;
 var $3=(($ap)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=varrp;HEAP32[((($4)+(4))>>2)]=0;
 var $5=(($expression)|0);
 var $6=$2;
 var $7=(($ap)|0);
 var $8=_vsprintf($5,$6,$7);
 var $9=(($expression)|0);
 _do_debug(3,8560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $10=$1;
 var $11=(($expression)|0);
 var $12=_process_query($10,$11);
 STACKTOP=sp;return $12;
}


function _parse($db,$query){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ptree;
 var $reftree;
 var $result=sp;
 var $assignment;
 var $destination=(sp)+(1024);
 var $temp=(sp)+(1056);
 var $sptr;
 var $operation;
 $1=$db;
 $2=$query;
 var $3=_new_parse_node(0,0);
 $ptree=$3;
 var $4=$ptree;
 $reftree=$4;
 var $5=$ptree;
 var $6=(($5)|0);
 var $7=(($6)|0);
 var $8=$2;
 var $9=_strcpy($7,$8);
 HEAP8[(42592)]=0;
 HEAP8[(42696)]=0;
 label=2;break;
 case 2: 
 var $11=$ptree;
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=70;break;}
 case 3: 
 var $14=$ptree;
 var $15=(($14)|0);
 var $16=(($15)|0);
 _strip_leading_spaces($16);
 var $17=$ptree;
 var $18=(($17)|0);
 var $19=(($18)|0);
 _strip_trailing_spaces($19);
 var $20=$ptree;
 var $21=(($20+7206)|0);
 var $22=(($21)|0);
 var $23=$ptree;
 var $24=(($23)|0);
 var $25=(($24)|0);
 var $26=_strcpy($22,$25);
 var $27=$ptree;
 var $28=(($27)|0);
 var $29=(($28)|0);
 var $30=HEAP8[($29)];
 var $31=(($30<<24)>>24);
 var $32=($31|0)!=33;
 if($32){label=4;break;}else{label=20;break;}
 case 4: 
 var $34=$ptree;
 var $35=(($34)|0);
 var $36=(($35)|0);
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=($38|0)==64;
 if($39){label=5;break;}else{label=10;break;}
 case 5: 
 var $41=$ptree;
 var $42=(($41)|0);
 var $43=(($42+1)|0);
 var $44=HEAP8[($43)];
 var $45=(($44<<24)>>24);
 var $46=($45|0)!=32;
 if($46){label=6;break;}else{label=10;break;}
 case 6: 
 var $48=(($temp)|0);
 var $49=$ptree;
 var $50=(($49+2081)|0);
 var $51=(($50)|0);
 var $52=_sprintf($48,14616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs;
 var $53=(($temp)|0);
 _do_trace($53);
 var $54=$ptree;
 var $55=(($54)|0);
 var $56=(($55+1)|0);
 var $57=_resolve_variable($56);
 $sptr=$57;
 var $58=$sptr;
 var $59=($58|0)!=0;
 if($59){label=7;break;}else{label=8;break;}
 case 7: 
 var $61=$ptree;
 var $62=(($61+7206)|0);
 var $63=(($62)|0);
 var $64=$sptr;
 var $65=_strcpy($63,$64);
 label=9;break;
 case 8: 
 var $67=$ptree;
 var $68=(($67+7206)|0);
 var $69=(($68)|0);
 _raise_error(40,0,$69,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $72=$ptree;
 var $73=(($72+4131)|0);
 var $74=(($73)|0);
 var $75=$ptree;
 var $76=(($75+7206)|0);
 var $77=(($76)|0);
 var $78=(($result)|0);
 var $79=_cut_to_right_bracket($77,1,0,$78);
 var $80=_strcpy($74,$79);
 var $81=$ptree;
 var $82=(($81+4131)|0);
 var $83=(($82)|0);
 var $84=$ptree;
 var $85=(($84+8232)|0);
 var $86=(($85+4)|0);
 HEAP32[(($86)>>2)]=$83;
 var $87=$ptree;
 var $88=(($87+5156)|0);
 var $89=(($88)|0);
 var $90=$ptree;
 var $91=(($90+7206)|0);
 var $92=(($91)|0);
 var $93=(($result)|0);
 var $94=_cut_to_right_bracket($92,1,0,$93);
 var $95=_strcpy($89,$94);
 var $96=$ptree;
 var $97=(($96+5156)|0);
 var $98=(($97)|0);
 var $99=$ptree;
 var $100=(($99+8232)|0);
 var $101=(($100+8)|0);
 HEAP32[(($101)>>2)]=$98;
 var $102=$ptree;
 var $103=(($102+6181)|0);
 var $104=(($103)|0);
 var $105=$ptree;
 var $106=(($105+7206)|0);
 var $107=(($106)|0);
 var $108=(($result)|0);
 var $109=_cut_to_right_bracket($107,1,0,$108);
 var $110=_strcpy($104,$109);
 var $111=$ptree;
 var $112=(($111+6181)|0);
 var $113=(($112)|0);
 var $114=$ptree;
 var $115=(($114+8232)|0);
 var $116=(($115+12)|0);
 HEAP32[(($116)>>2)]=$113;
 var $117=$ptree;
 var $118=(($117+7206)|0);
 var $119=(($118)|0);
 var $120=_strstr($119,14216);
 $assignment=$120;
 var $121=$assignment;
 var $122=($121|0)!=0;
 if($122){label=11;break;}else{label=12;break;}
 case 11: 
 var $124=$ptree;
 var $125=(($124+3106)|0);
 var $126=(($125)|0);
 var $127=$ptree;
 var $128=(($127+7206)|0);
 var $129=(($128)|0);
 var $130=_strncpy($126,$129,25);
 var $131=$ptree;
 var $132=(($131+3106)|0);
 var $133=(($132)|0);
 var $134=_strtok($133,14216);
 var $135=$ptree;
 var $136=(($135+3106)|0);
 var $137=(($136)|0);
 _strip_trailing_spaces($137);
 var $138=$ptree;
 var $139=(($138+7206)|0);
 var $140=(($139)|0);
 var $141=$assignment;
 var $142=(($141+1)|0);
 var $143=_strcpy($140,$142);
 label=13;break;
 case 12: 
 var $145=$ptree;
 var $146=(($145+3106)|0);
 var $147=(($146)|0);
 var $148=(($destination)|0);
 var $149=_generate_random_string(6,$148);
 var $150=_strcpy($147,$149);
 label=13;break;
 case 13: 
 var $152=$ptree;
 var $153=(($152+2081)|0);
 var $154=(($153)|0);
 var $155=$ptree;
 var $156=(($155+7206)|0);
 var $157=(($156)|0);
 var $158=(($result)|0);
 var $159=_cut_token($157,0,$158);
 var $160=_strcpy($154,$159);
 var $161=$ptree;
 var $162=(($161+4131)|0);
 var $163=(($162)|0);
 var $164=_strlen($163);
 var $165=($164|0)==0;
 if($165){label=14;break;}else{label=19;break;}
 case 14: 
 var $167=$ptree;
 var $168=(($167+4131)|0);
 var $169=(($168)|0);
 var $170=$ptree;
 var $171=(($170+7206)|0);
 var $172=(($171)|0);
 var $173=(($result)|0);
 var $174=_cut_token($172,0,$173);
 var $175=_strcpy($169,$174);
 var $176=$ptree;
 var $177=(($176+5156)|0);
 var $178=(($177)|0);
 var $179=_strlen($178);
 var $180=($179|0)==0;
 if($180){label=15;break;}else{label=18;break;}
 case 15: 
 var $182=$ptree;
 var $183=(($182+5156)|0);
 var $184=(($183)|0);
 var $185=$ptree;
 var $186=(($185+7206)|0);
 var $187=(($186)|0);
 var $188=(($result)|0);
 var $189=_cut_token($187,0,$188);
 var $190=_strcpy($184,$189);
 var $191=$ptree;
 var $192=(($191+6181)|0);
 var $193=(($192)|0);
 var $194=_strlen($193);
 var $195=($194|0)==0;
 if($195){label=16;break;}else{label=17;break;}
 case 16: 
 var $197=$ptree;
 var $198=(($197+6181)|0);
 var $199=(($198)|0);
 var $200=$ptree;
 var $201=(($200+7206)|0);
 var $202=(($201)|0);
 var $203=(($result)|0);
 var $204=_cut_token($202,0,$203);
 var $205=_strcpy($199,$204);
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 var $209=$ptree;
 var $210=(($209+2081)|0);
 var $211=(($210)|0);
 var $212=_get_command($211);
 $operation=$212;
 label=21;break;
 case 20: 
 var $214=$ptree;
 var $215=(($214+4131)|0);
 var $216=(($215)|0);
 var $217=$ptree;
 var $218=(($217+7206)|0);
 var $219=(($218+1)|0);
 var $220=_strcpy($216,$219);
 var $221=_get_command(13872);
 $operation=$221;
 label=21;break;
 case 21: 
 var $223=$operation;
 var $224=($223|0)==-1;
 if($224){label=22;break;}else{label=23;break;}
 case 22: 
 var $226=(($temp)|0);
 var $227=$ptree;
 var $228=(($227+2081)|0);
 var $229=(($228)|0);
 var $230=_sprintf($226,13496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$229,tempVarArgs)); STACKTOP=tempVarArgs;
 var $231=(($temp)|0);
 _do_trace($231);
 var $232=$ptree;
 var $233=(($232+9252)|0);
 HEAP8[($233)]=57;
 label=34;break;
 case 23: 
 var $235=$operation;
 var $236=(($235)&255);
 var $237=$ptree;
 var $238=(($237+9252)|0);
 HEAP8[($238)]=$236;
 var $239=(($temp)|0);
 var $240=$ptree;
 var $241=(($240+2081)|0);
 var $242=(($241)|0);
 var $243=_sprintf($239,13200,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$242,tempVarArgs)); STACKTOP=tempVarArgs;
 var $244=(($temp)|0);
 _do_trace($244);
 var $245=$ptree;
 var $246=(($245+9252)|0);
 var $247=HEAP8[($246)];
 var $248=(($247<<24)>>24);
 switch(($248|0)){case 37:case 28:case 26:case 18:case 19:case 8:case 49:case 40:case 62:case 38:case 34:case 56:case 73:case 4:case 58:case 59:case 3:case 35:case 64:case 69:case 45:case 11:case 1:case 61:case 60:case 33:case 48:case 68:case 70:case 71:{ label=24;break;}case 29:{ label=25;break;}case 12:{ label=26;break;}case 5:case 24:case 16:case 67:case 77:case 7:{ label=27;break;}case 22:case 13:case 20:case 21:case 63:{ label=28;break;}case 52:case 23:case 9:case 30:case 66:{ label=29;break;}case 72:{ label=30;break;}case 14:{ label=31;break;}default:{label=32;break;}}break;
 case 24: 
 var $250=$ptree;
 var $251=(($250+2064)|0);
 HEAP8[($251)]=1;
 var $252=$ptree;
 var $253=(($252+2065)|0);
 HEAP8[($253)]=1;
 label=33;break;
 case 25: 
 var $255=$ptree;
 var $256=(($255+7206)|0);
 var $257=(($256)|0);
 var $258=$ptree;
 var $259=(($258+5156)|0);
 var $260=(($259)|0);
 var $261=_cut_token($257,0,$260);
 var $262=$ptree;
 var $263=(($262+7206)|0);
 var $264=(($263)|0);
 var $265=$ptree;
 var $266=(($265+6181)|0);
 var $267=(($266)|0);
 var $268=_cut_token($264,0,$267);
 var $269=$ptree;
 var $270=(($269+2064)|0);
 HEAP8[($270)]=1;
 var $271=$ptree;
 var $272=(($271+2065)|0);
 HEAP8[($272)]=1;
 label=33;break;
 case 26: 
 var $274=$ptree;
 var $275=(($274+2064)|0);
 HEAP8[($275)]=1;
 var $276=$ptree;
 var $277=(($276+2065)|0);
 HEAP8[($277)]=1;
 label=33;break;
 case 27: 
 var $279=$ptree;
 var $280=_new_parse_node($279,1);
 var $281=$ptree;
 var $282=(($281+2052)|0);
 HEAP32[(($282)>>2)]=$280;
 var $283=$ptree;
 var $284=(($283+2065)|0);
 HEAP8[($284)]=1;
 var $285=$ptree;
 var $286=(($285+2052)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287)|0);
 var $289=(($288)|0);
 var $290=$ptree;
 var $291=(($290+4131)|0);
 var $292=(($291)|0);
 var $293=_strcpy($289,$292);
 label=33;break;
 case 28: 
 var $295=$ptree;
 var $296=_new_parse_node($295,1);
 var $297=$ptree;
 var $298=(($297+2052)|0);
 HEAP32[(($298)>>2)]=$296;
 var $299=$ptree;
 var $300=_new_parse_node($299,2);
 var $301=$ptree;
 var $302=(($301+2056)|0);
 HEAP32[(($302)>>2)]=$300;
 var $303=$ptree;
 var $304=(($303+2052)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305)|0);
 var $307=(($306)|0);
 var $308=$ptree;
 var $309=(($308+4131)|0);
 var $310=(($309)|0);
 var $311=_strcpy($307,$310);
 var $312=$ptree;
 var $313=(($312+2056)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=(($314)|0);
 var $316=(($315)|0);
 var $317=$ptree;
 var $318=(($317+5156)|0);
 var $319=(($318)|0);
 var $320=_strcpy($316,$319);
 label=33;break;
 case 29: 
 var $322=$ptree;
 var $323=_new_parse_node($322,1);
 var $324=$ptree;
 var $325=(($324+2052)|0);
 HEAP32[(($325)>>2)]=$323;
 var $326=$ptree;
 var $327=(($326+2065)|0);
 HEAP8[($327)]=1;
 var $328=$ptree;
 var $329=(($328+2052)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(($330)|0);
 var $332=(($331)|0);
 var $333=$ptree;
 var $334=(($333+4131)|0);
 var $335=(($334)|0);
 var $336=_strcpy($332,$335);
 label=33;break;
 case 30: 
 var $338=$ptree;
 var $339=_new_parse_node($338,1);
 var $340=$ptree;
 var $341=(($340+2052)|0);
 HEAP32[(($341)>>2)]=$339;
 var $342=$ptree;
 var $343=(($342+2065)|0);
 HEAP8[($343)]=1;
 var $344=$ptree;
 var $345=(($344+2052)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($346)|0);
 var $348=(($347)|0);
 var $349=$ptree;
 var $350=(($349+4131)|0);
 var $351=(($350)|0);
 var $352=_strcpy($348,$351);
 label=33;break;
 case 31: 
 var $354=$ptree;
 var $355=_new_parse_node($354,1);
 var $356=$ptree;
 var $357=(($356+2052)|0);
 HEAP32[(($357)>>2)]=$355;
 var $358=$ptree;
 var $359=_new_parse_node($358,2);
 var $360=$ptree;
 var $361=(($360+2056)|0);
 HEAP32[(($361)>>2)]=$359;
 var $362=$ptree;
 var $363=(($362+2052)|0);
 var $364=HEAP32[(($363)>>2)];
 var $365=(($364)|0);
 var $366=(($365)|0);
 var $367=$ptree;
 var $368=(($367+4131)|0);
 var $369=(($368)|0);
 var $370=_strcpy($366,$369);
 var $371=$ptree;
 var $372=(($371+2056)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($373)|0);
 var $375=(($374)|0);
 var $376=$ptree;
 var $377=(($376+5156)|0);
 var $378=(($377)|0);
 var $379=_strcpy($375,$378);
 label=33;break;
 case 32: 
 var $381=$ptree;
 var $382=(($381+2064)|0);
 HEAP8[($382)]=1;
 var $383=$ptree;
 var $384=(($383+2065)|0);
 HEAP8[($384)]=1;
 HEAP8[(42592)]=1;
 var $385=$ptree;
 var $386=(($385+2081)|0);
 var $387=(($386)|0);
 _raise_error(21,0,$387,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $390=$ptree;
 var $391=(($390+2052)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=($392|0)!=0;
 if($393){label=35;break;}else{label=37;break;}
 case 35: 
 var $395=$ptree;
 var $396=(($395+2064)|0);
 var $397=HEAP8[($396)];
 var $398=(($397<<24)>>24)!=0;
 if($398){label=37;break;}else{label=36;break;}
 case 36: 
 var $400=$ptree;
 var $401=(($400+2064)|0);
 HEAP8[($401)]=1;
 var $402=$ptree;
 var $403=(($402+2052)|0);
 var $404=HEAP32[(($403)>>2)];
 $ptree=$404;
 label=55;break;
 case 37: 
 var $406=$ptree;
 var $407=(($406+2056)|0);
 var $408=HEAP32[(($407)>>2)];
 var $409=($408|0)!=0;
 if($409){label=38;break;}else{label=40;break;}
 case 38: 
 var $411=$ptree;
 var $412=(($411+2065)|0);
 var $413=HEAP8[($412)];
 var $414=(($413<<24)>>24)!=0;
 if($414){label=40;break;}else{label=39;break;}
 case 39: 
 var $416=$ptree;
 var $417=(($416+2065)|0);
 HEAP8[($417)]=1;
 var $418=$ptree;
 var $419=(($418+2056)|0);
 var $420=HEAP32[(($419)>>2)];
 $ptree=$420;
 label=54;break;
 case 40: 
 var $422=$ptree;
 var $423=(($422+2060)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=($424|0)!=0;
 if($425){label=41;break;}else{label=53;break;}
 case 41: 
 var $427=$ptree;
 var $428=(($427+2060)|0);
 var $429=HEAP32[(($428)>>2)];
 $ptree=$429;
 label=42;break;
 case 42: 
 var $431=$ptree;
 var $432=(($431+2060)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=($433|0)!=0;
 if($434){label=43;break;}else{var $448=0;label=45;break;}
 case 43: 
 var $436=$ptree;
 var $437=(($436+2064)|0);
 var $438=HEAP8[($437)];
 var $439=($438&255);
 var $440=($439|0)!=0;
 if($440){label=44;break;}else{var $448=0;label=45;break;}
 case 44: 
 var $442=$ptree;
 var $443=(($442+2065)|0);
 var $444=HEAP8[($443)];
 var $445=($444&255);
 var $446=($445|0)!=0;
 var $448=$446;label=45;break;
 case 45: 
 var $448;
 if($448){label=46;break;}else{label=47;break;}
 case 46: 
 var $450=$ptree;
 var $451=(($450+2060)|0);
 var $452=HEAP32[(($451)>>2)];
 $ptree=$452;
 label=42;break;
 case 47: 
 var $454=$ptree;
 var $455=(($454+2060)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=($456|0)!=0;
 if($457){label=48;break;}else{label=52;break;}
 case 48: 
 var $459=$ptree;
 var $460=(($459+2056)|0);
 var $461=HEAP32[(($460)>>2)];
 var $462=($461|0)!=0;
 if($462){label=49;break;}else{label=51;break;}
 case 49: 
 var $464=$ptree;
 var $465=(($464+2065)|0);
 var $466=HEAP8[($465)];
 var $467=(($466<<24)>>24)!=0;
 if($467){label=51;break;}else{label=50;break;}
 case 50: 
 var $469=$ptree;
 var $470=(($469+2065)|0);
 HEAP8[($470)]=1;
 var $471=$ptree;
 var $472=(($471+2056)|0);
 var $473=HEAP32[(($472)>>2)];
 $ptree=$473;
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 var $479=$ptree;
 var $480=(($479+2060)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=($481|0)==0;
 if($482){label=56;break;}else{label=69;break;}
 case 56: 
 var $484=$ptree;
 var $485=(($484+2064)|0);
 var $486=HEAP8[($485)];
 var $487=($486&255);
 var $488=($487|0)!=0;
 if($488){label=57;break;}else{label=59;break;}
 case 57: 
 var $490=$ptree;
 var $491=(($490+2065)|0);
 var $492=HEAP8[($491)];
 var $493=($492&255);
 var $494=($493|0)!=0;
 if($494){label=58;break;}else{label=59;break;}
 case 58: 
 $ptree=0;
 label=68;break;
 case 59: 
 var $497=$ptree;
 var $498=(($497+2052)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)!=0;
 if($500){label=60;break;}else{label=62;break;}
 case 60: 
 var $502=$ptree;
 var $503=(($502+2064)|0);
 var $504=HEAP8[($503)];
 var $505=(($504<<24)>>24)!=0;
 if($505){label=62;break;}else{label=61;break;}
 case 61: 
 var $507=$ptree;
 var $508=(($507+2065)|0);
 HEAP8[($508)]=1;
 var $509=$ptree;
 var $510=(($509+2052)|0);
 var $511=HEAP32[(($510)>>2)];
 $ptree=$511;
 label=67;break;
 case 62: 
 var $513=$ptree;
 var $514=(($513+2056)|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=($515|0)!=0;
 if($516){label=63;break;}else{label=65;break;}
 case 63: 
 var $518=$ptree;
 var $519=(($518+2065)|0);
 var $520=HEAP8[($519)];
 var $521=(($520<<24)>>24)!=0;
 if($521){label=65;break;}else{label=64;break;}
 case 64: 
 var $523=$ptree;
 var $524=(($523+2065)|0);
 HEAP8[($524)]=1;
 var $525=$ptree;
 var $526=(($525+2056)|0);
 var $527=HEAP32[(($526)>>2)];
 $ptree=$527;
 label=66;break;
 case 65: 
 HEAP8[(42592)]=1;
 var $529=$ptree;
 var $530=(($529)|0);
 var $531=(($530)|0);
 _raise_error(28,0,$531,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $ptree=0;
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 label=68;break;
 case 68: 
 label=69;break;
 case 69: 
 label=2;break;
 case 70: 
 _do_trace(12952);
 var $537=$reftree;
 STACKTOP=sp;return $537;
  default: assert(0, "bad label: " + label);
 }

}


function _optimise($ptree){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$ptree;
 _do_trace(12736);
 STACKTOP=sp;return 1;
}


function _process_query($db,$query){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ptree;
 var $rtrel;
 $2=$db;
 $3=$query;
 var $4=$3;
 _do_debug(1,12456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=HEAP32[((60280)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=HEAP32[((60280)>>2)];
 var $9=$3;
 var $10=_fprintf($8,$9,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $11=HEAP32[((60280)>>2)];
 var $12=_fprintf($11,12192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 var $14=$3;
 var $15=_checkcomment($14);
 var $16=(($15<<24)>>24)!=0;
 if($16){label=18;break;}else{label=4;break;}
 case 4: 
 var $18=$2;
 var $19=$3;
 var $20=_parse($18,$19);
 $ptree=$20;
 var $21=HEAP8[(37240)];
 var $22=(($21<<24)>>24)!=0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 _do_trace(11816);
 _do_trace(11512);
 var $24=$ptree;
 _display_ptree($24,0);
 _do_trace(11208);
 _do_trace(11024);
 label=6;break;
 case 6: 
 var $26=HEAP8[(42592)];
 var $27=($26&255);
 var $28=($27|0)==1;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 _do_trace(10680);
 $rtrel=0;
 label=11;break;
 case 8: 
 _do_trace(10360);
 var $31=$ptree;
 var $32=_optimise($31);
 var $33=($32|0)!=1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 _do_trace(10024);
 label=10;break;
 case 10: 
 var $36=$2;
 var $37=$ptree;
 var $38=_execute($36,$37);
 $rtrel=$38;
 label=11;break;
 case 11: 
 var $40=HEAP8[(42696)];
 var $41=($40&255);
 var $42=($41|0)==0;
 if($42){label=12;break;}else{label=14;break;}
 case 12: 
 var $44=HEAP8[(42592)];
 var $45=($44&255);
 var $46=($45|0)==0;
 if($46){label=13;break;}else{label=14;break;}
 case 13: 
 _unset_prompt();
 label=15;break;
 case 14: 
 _set_prompt(9760);
 label=15;break;
 case 15: 
 var $50=$rtrel;
 var $51=($50|0)!=0;
 if($51){label=16;break;}else{label=17;break;}
 case 16: 
 var $53=$rtrel;
 var $54=(($53)|0);
 var $55=(($54)|0);
 var $56=_set_variable(9552,$55);
 label=17;break;
 case 17: 
 var $58=$3;
 _do_debug(1,9280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$58,tempVarArgs)); STACKTOP=tempVarArgs;
 var $59=$rtrel;
 $1=$59;
 label=19;break;
 case 18: 
 var $61=$3;
 _do_debug(1,8840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$61,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=19;break;
 case 19: 
 var $63=$1;
 STACKTOP=sp;return $63;
  default: assert(0, "bad label: " + label);
 }

}


function _delete_relation($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8208)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $bfilename=sp;
 var $filename=(sp)+(4104);
 var $ret;
 var $count;
 $1=$rel;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 _do_debug(1,13536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$1;
 var $6=(($bfilename)|0);
 _relation_full_path($5,$6);
 $count=0;
 label=2;break;
 case 2: 
 var $8=$count;
 var $9=($8|0)<4;
 if($9){label=3;break;}else{label=15;break;}
 case 3: 
 var $11=(($filename)|0);
 var $12=(($bfilename)|0);
 var $13=_strcpy($11,$12);
 var $14=$count;
 if(($14|0)==0){ label=4;break;}else if(($14|0)==1){ label=5;break;}else if(($14|0)==2){ label=6;break;}else if(($14|0)==3){ label=7;break;}else{label=8;break;}
 case 4: 
 var $16=(($filename)|0);
 var $17=_strcat($16,25440);
 label=9;break;
 case 5: 
 var $19=(($filename)|0);
 var $20=_strcat($19,21088);
 label=9;break;
 case 6: 
 var $22=(($filename)|0);
 var $23=_strcat($22,17616);
 label=9;break;
 case 7: 
 var $25=(($filename)|0);
 var $26=_strcat($25,13816);
 label=9;break;
 case 8: 
 _raise_error(3,2,10944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 var $29=(($filename)|0);
 var $30=_remove($29);
 $ret=$30;
 var $31=$ret;
 var $32=($31|0)!=0;
 if($32){label=10;break;}else{label=13;break;}
 case 10: 
 var $34=___errno_location();
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)!=2;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 var $38=(($filename)|0);
 _raise_error(8,0,$38,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $42=$count;
 var $43=((($42)+(1))|0);
 $count=$43;
 label=2;break;
 case 15: 
 _do_debug(1,8040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_full_path($rel,$string){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 $1=$rel;
 $2=$string;
 var $3=$2;
 var $4=$1;
 var $5=(($4+26)|0);
 var $6=(($5)|0);
 var $7=$1;
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=_sprintf($3,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _relation_insert($db,$newrel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $currentRel;
 var $previousRel;
 var $dbtouse;
 $2=$db;
 $3=$newrel;
 var $4=$3;
 var $5=(($4)|0);
 var $6=(($5)|0);
 _do_debug(1,5624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=HEAP8[(16)];
 var $8=($7&255);
 var $9=($8|0)==1;
 if($9){label=2;break;}else{label=7;break;}
 case 2: 
 var $11=HEAP8[(47136)];
 var $12=($11&255);
 var $13=($12|0)!=1;
 if($13){label=3;break;}else{label=7;break;}
 case 3: 
 var $15=$2;
 var $16=_database_name($15);
 var $17=_strcmp($16,3768);
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=7;break;}
 case 4: 
 var $20=$3;
 var $21=(($20)|0);
 var $22=(($21)|0);
 var $23=HEAP8[($22)];
 var $24=(($23<<24)>>24);
 var $25=($24|0)==122;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=$3;
 var $28=(($27)|0);
 var $29=(($28+1)|0);
 var $30=HEAP8[($29)];
 var $31=(($30<<24)>>24);
 var $32=($31|0)==122;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$3;
 var $35=(($34)|0);
 var $36=(($35)|0);
 _do_debug(3,2112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$36,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=HEAP32[((37152)>>2)];
 $dbtouse=$37;
 label=11;break;
 case 7: 
 var $39=HEAP8[(37320)];
 var $40=($39&255);
 var $41=($40|0)!=0;
 if($41){label=8;break;}else{label=10;break;}
 case 8: 
 var $43=HEAP32[((37312)>>2)];
 var $44=($43|0)>=3;
 if($44){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=HEAP32[((_stderr)>>2)];
 var $47=$3;
 var $48=(($47)|0);
 var $49=(($48)|0);
 var $50=$2;
 var $51=_database_name($50);
 _leap_fprintf($46,30112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$49,HEAP32[(((tempVarArgs)+(8))>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs;
 var $52=HEAP32[((_stderr)>>2)];
 var $53=$3;
 var $54=(($53)|0);
 var $55=(($54)|0);
 _leap_fprintf($52,28520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$55,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 var $57=$2;
 $dbtouse=$57;
 label=11;break;
 case 11: 
 var $59=$dbtouse;
 var $60=(($59+28)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($61|0)==0;
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 _do_debug(3,27432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $64=$3;
 var $65=$dbtouse;
 var $66=(($65+28)|0);
 HEAP32[(($66)>>2)]=$64;
 label=31;break;
 case 13: 
 var $68=$dbtouse;
 var $69=(($68+28)|0);
 var $70=HEAP32[(($69)>>2)];
 $currentRel=$70;
 $previousRel=0;
 label=14;break;
 case 14: 
 var $72=$currentRel;
 var $73=($72|0)!=0;
 if($73){label=15;break;}else{var $84=0;label=16;break;}
 case 15: 
 var $75=$currentRel;
 var $76=(($75)|0);
 var $77=(($76)|0);
 var $78=$3;
 var $79=(($78)|0);
 var $80=(($79)|0);
 var $81=_strcmp($77,$80);
 var $82=($81|0)<0;
 var $84=$82;label=16;break;
 case 16: 
 var $84;
 if($84){label=17;break;}else{label=18;break;}
 case 17: 
 var $86=$currentRel;
 $previousRel=$86;
 var $87=$currentRel;
 var $88=(($87+4636)|0);
 var $89=HEAP32[(($88)>>2)];
 $currentRel=$89;
 label=14;break;
 case 18: 
 var $91=$currentRel;
 var $92=($91|0)!=0;
 if($92){label=19;break;}else{label=23;break;}
 case 19: 
 var $94=$currentRel;
 var $95=(($94)|0);
 var $96=(($95)|0);
 var $97=$3;
 var $98=(($97)|0);
 var $99=(($98)|0);
 var $100=_strcmp($96,$99);
 var $101=($100|0)==0;
 if($101){label=20;break;}else{label=23;break;}
 case 20: 
 var $103=HEAP8[(37320)];
 var $104=(($103<<24)>>24)!=0;
 if($104){label=21;break;}else{label=22;break;}
 case 21: 
 _do_debug(3,26560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $106=$currentRel;
 var $107=(($106)|0);
 var $108=(($107)|0);
 _raise_error(6,0,$108,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=22;break;
 case 22: 
 $1=0;
 label=32;break;
 case 23: 
 var $111=$previousRel;
 var $112=($111|0)==0;
 if($112){label=24;break;}else{label=25;break;}
 case 24: 
 _do_debug(3,25496,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $114=$3;
 var $115=$dbtouse;
 var $116=(($115+28)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+4640)|0);
 HEAP32[(($118)>>2)]=$114;
 var $119=$dbtouse;
 var $120=(($119+28)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=$3;
 var $123=(($122+4636)|0);
 HEAP32[(($123)>>2)]=$121;
 var $124=$3;
 var $125=$dbtouse;
 var $126=(($125+28)|0);
 HEAP32[(($126)>>2)]=$124;
 label=29;break;
 case 25: 
 var $128=$currentRel;
 var $129=($128|0)==0;
 if($129){label=26;break;}else{label=27;break;}
 case 26: 
 _do_debug(3,24872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $131=$3;
 var $132=$previousRel;
 var $133=(($132+4636)|0);
 HEAP32[(($133)>>2)]=$131;
 var $134=$previousRel;
 var $135=$3;
 var $136=(($135+4640)|0);
 HEAP32[(($136)>>2)]=$134;
 var $137=$3;
 var $138=$dbtouse;
 var $139=(($138+32)|0);
 HEAP32[(($139)>>2)]=$137;
 label=28;break;
 case 27: 
 _do_debug(3,24192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $141=$3;
 var $142=$previousRel;
 var $143=(($142+4636)|0);
 HEAP32[(($143)>>2)]=$141;
 var $144=$3;
 var $145=$currentRel;
 var $146=(($145+4640)|0);
 HEAP32[(($146)>>2)]=$144;
 var $147=$previousRel;
 var $148=$3;
 var $149=(($148+4640)|0);
 HEAP32[(($149)>>2)]=$147;
 var $150=$currentRel;
 var $151=$3;
 var $152=(($151+4636)|0);
 HEAP32[(($152)>>2)]=$150;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 _do_debug(1,23576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=32;break;
 case 32: 
 var $158=$1;
 STACKTOP=sp;return $158;
  default: assert(0, "bad label: " + label);
 }

}


function _remove_tempfile($db,$relation_name){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $fname=sp;
 var $ret;
 $1=$db;
 $2=$relation_name;
 var $3=(($fname)|0);
 var $4=$1;
 var $5=_database_dir($4);
 var $6=$2;
 var $7=_sprintf($3,23232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$5,HEAP32[(((tempVarArgs)+(8))>>2)]=22848,HEAP32[(((tempVarArgs)+(16))>>2)]=$6,HEAP32[(((tempVarArgs)+(24))>>2)]=17616,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=(($fname)|0);
 var $9=_remove($8);
 $ret=$9;
 var $10=$ret;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 var $13=___errno_location();
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)!=2;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 var $17=(($fname)|0);
 _raise_error(8,0,$17,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_change($db,$rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $expression=sp;
 var $noattribs=(sp)+(1032);
 var $temp=(sp)+(1040);
 var $system=(sp)+(1048);
 var $fptr=(sp)+(1056);
 var $rname=(sp)+(1064);
 var $truth;
 $1=$db;
 $2=$rel;
 var $3=$2;
 var $4=_generate_fileh($3);
 HEAP32[(($fptr)>>2)]=$4;
 var $5=HEAP32[(($fptr)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=14;break;}
 case 2: 
 var $8=(($rname)|0);
 var $9=_tuple_readheader($fptr,$noattribs,$temp,$system,$8);
 var $10=($9|0)==1;
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=HEAP8[($system)];
 var $13=($12&255);
 var $14=($13|0)!=1;
 if($14){label=4;break;}else{label=11;break;}
 case 4: 
 var $16=$1;
 var $17=(($rname)|0);
 var $18=HEAP8[($noattribs)];
 var $19=HEAP8[($temp)];
 var $20=(($19<<24)>>24)!=0;
 var $21=$20^1;
 var $22=($21&1);
 var $23=(($22)&255);
 var $24=HEAP8[($system)];
 var $25=_relation_update_header($16,$17,$18,$23,$24,$fptr);
 var $26=($25|0)!=1;
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 var $28=$2;
 var $29=(($28)|0);
 var $30=(($29)|0);
 _raise_error(3,0,21456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$30,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 6: 
 var $32=$2;
 var $33=(($32+4660)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24)!=0;
 var $36=$35^1;
 var $37=($36&1);
 var $38=(($37)&255);
 var $39=$2;
 var $40=(($39+4660)|0);
 HEAP8[($40)]=$38;
 var $41=HEAP8[($temp)];
 var $42=($41&255);
 var $43=($42|0)==0;
 if($43){label=7;break;}else{label=8;break;}
 case 7: 
 $truth=21096;
 label=9;break;
 case 8: 
 $truth=20808;
 label=9;break;
 case 9: 
 var $47=(($expression)|0);
 var $48=(($rname)|0);
 var $49=$truth;
 var $50=_sprintf($47,20392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=19800,HEAP32[(((tempVarArgs)+(16))>>2)]=$48,HEAP32[(((tempVarArgs)+(24))>>2)]=19520,HEAP32[(((tempVarArgs)+(32))>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs;
 var $51=$1;
 var $52=(($expression)|0);
 _ddmaintenance($51,$52,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 label=12;break;
 case 11: 
 var $55=(($rname)|0);
 _raise_error(50,0,$55,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 var $57=HEAP32[(($fptr)>>2)];
 var $58=_fclose($57);
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_create($db,$relation_name,$temporary,$system){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+6176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $rel;
 var $relationfile=sp;
 var $fullname=(sp)+(8);
 var $expression=(sp)+(4112);
 var $systemstring=(sp)+(5144);
 var $dbtouse;
 $2=$db;
 $3=$relation_name;
 $4=$temporary;
 $5=$system;
 var $6=$fullname;
 _memset($6, 0, 4097)|0;
 var $7=$expression;
 _memset($7, 0, 1025)|0;
 var $8=$systemstring;
 _memset($8, 0, 1025)|0;
 _do_debug(1,19208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=$3;
 var $10=_strlen($9);
 var $11=($10>>>0)>0;
 if($11){label=2;break;}else{label=39;break;}
 case 2: 
 var $13=HEAP8[(16)];
 var $14=($13&255);
 var $15=($14|0)==1;
 if($15){label=3;break;}else{label=8;break;}
 case 3: 
 var $17=HEAP32[((37152)>>2)];
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=8;break;}
 case 4: 
 var $20=$2;
 var $21=_database_name($20);
 var $22=_strcmp($21,3768);
 var $23=($22|0)!=0;
 if($23){label=5;break;}else{label=8;break;}
 case 5: 
 var $25=$3;
 var $26=(($25)|0);
 var $27=HEAP8[($26)];
 var $28=(($27<<24)>>24);
 var $29=($28|0)==122;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $31=$3;
 var $32=(($31+1)|0);
 var $33=HEAP8[($32)];
 var $34=(($33<<24)>>24);
 var $35=($34|0)==122;
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 var $37=$3;
 _do_debug(3,18808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$37,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=HEAP32[((37152)>>2)];
 $dbtouse=$38;
 label=12;break;
 case 8: 
 var $40=HEAP8[(37320)];
 var $41=($40&255);
 var $42=($41|0)!=0;
 if($42){label=9;break;}else{label=11;break;}
 case 9: 
 var $44=HEAP32[((37312)>>2)];
 var $45=($44|0)>=3;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 var $47=HEAP32[((_stderr)>>2)];
 var $48=$3;
 _leap_fprintf($47,18384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$48,tempVarArgs)); STACKTOP=tempVarArgs;
 var $49=HEAP32[((_stderr)>>2)];
 var $50=$3;
 _leap_fprintf($49,28520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$50,tempVarArgs)); STACKTOP=tempVarArgs;
 label=11;break;
 case 11: 
 var $52=$2;
 $dbtouse=$52;
 label=12;break;
 case 12: 
 var $54=$3;
 var $55=_strstr($54,18072);
 var $56=($55|0)==0;
 if($56){label=13;break;}else{label=15;break;}
 case 13: 
 var $58=$3;
 var $59=_strstr($58,17624);
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=15;break;}
 case 14: 
 var $62=$3;
 var $63=_strpbrk($62,17280);
 var $64=($63|0)!=0;
 if($64){label=15;break;}else{label=16;break;}
 case 15: 
 var $66=$3;
 _raise_error(16,0,$66,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=40;break;
 case 16: 
 var $68=$dbtouse;
 var $69=$3;
 var $70=_relation_find($68,$69);
 var $71=($70|0)==0;
 if($71){label=17;break;}else{label=38;break;}
 case 17: 
 var $73=_malloc(4672);
 var $74=$73;
 $rel=$74;
 var $75=$rel;
 var $76=$75;
 _check_assign($76,16904);
 var $77=$rel;
 var $78=(($77)|0);
 var $79=$78;
 _memset($79, 0, 26)|0;
 var $80=$rel;
 var $81=(($80)|0);
 var $82=(($81)|0);
 var $83=$3;
 var $84=_strcpy($82,$83);
 var $85=$dbtouse;
 var $86=(($85+4133)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=($88|0)==1;
 if($89){label=18;break;}else{label=19;break;}
 case 18: 
 var $91=$rel;
 var $92=(($91+26)|0);
 var $93=(($92)|0);
 var $94=$dbtouse;
 var $95=_database_dir($94);
 var $96=_sprintf($93,16648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$95,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 19: 
 var $98=$rel;
 var $99=(($98+26)|0);
 var $100=(($99)|0);
 var $101=$dbtouse;
 var $102=_database_dir($101);
 var $103=_sprintf($100,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$102,HEAP32[(((tempVarArgs)+(8))>>2)]=22848,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 20: 
 var $105=$rel;
 var $106=(($105+4123)|0);
 var $107=(($106)|0);
 var $108=$3;
 var $109=_sprintf($107,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$108,HEAP32[(((tempVarArgs)+(8))>>2)]=25440,tempVarArgs)); STACKTOP=tempVarArgs;
 var $110=$rel;
 var $111=(($110+4648)|0);
 HEAP32[(($111)>>2)]=0;
 var $112=$rel;
 var $113=(($112+4644)|0);
 HEAP8[($113)]=0;
 var $114=$rel;
 var $115=(($114+4652)|0);
 HEAP32[(($115)>>2)]=0;
 var $116=$rel;
 var $117=(($116+4656)|0);
 HEAP32[(($117)>>2)]=0;
 var $118=(($fullname)|0);
 var $119=$rel;
 var $120=(($119+26)|0);
 var $121=(($120)|0);
 var $122=$rel;
 var $123=(($122+4123)|0);
 var $124=(($123)|0);
 var $125=_sprintf($118,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$121,HEAP32[(((tempVarArgs)+(8))>>2)]=$124,tempVarArgs)); STACKTOP=tempVarArgs;
 var $126=(($fullname)|0);
 _do_debug(3,15976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$126,tempVarArgs)); STACKTOP=tempVarArgs;
 var $127=(($fullname)|0);
 var $128=_fopen($127,15584);
 HEAP32[(($relationfile)>>2)]=$128;
 var $129=$5;
 var $130=$rel;
 var $131=(($130+4669)|0);
 HEAP8[($131)]=$129;
 var $132=$4;
 var $133=$rel;
 var $134=(($133+4660)|0);
 HEAP8[($134)]=$132;
 var $135=HEAP8[(37256)];
 var $136=($135&255);
 var $137=($136|0)==0;
 if($137){label=21;break;}else{label=23;break;}
 case 21: 
 var $139=$dbtouse;
 var $140=_database_name($139);
 var $141=_strcmp($140,15032);
 var $142=($141|0)!=0;
 if($142){label=22;break;}else{label=23;break;}
 case 22: 
 var $144=$rel;
 var $145=(($144+4660)|0);
 HEAP8[($145)]=0;
 $4=0;
 label=23;break;
 case 23: 
 var $147=HEAP32[(($relationfile)>>2)];
 var $148=($147|0)==0;
 if($148){label=24;break;}else{label=25;break;}
 case 24: 
 var $150=(($fullname)|0);
 _raise_error(2,2,$150,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=35;break;
 case 25: 
 var $152=$dbtouse;
 var $153=_database_name($152);
 var $154=_strcmp($153,15032);
 var $155=($154|0)==0;
 if($155){label=26;break;}else{label=28;break;}
 case 26: 
 var $157=$rel;
 var $158=(($157+4669)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=($160|0)!=1;
 if($161){label=27;break;}else{label=28;break;}
 case 27: 
 var $163=$rel;
 var $164=(($163+4660)|0);
 HEAP8[($164)]=1;
 $4=1;
 label=28;break;
 case 28: 
 var $166=$rel;
 var $167=(($166+4669)|0);
 var $168=HEAP8[($167)];
 var $169=(($168<<24)>>24)!=0;
 if($169){label=29;break;}else{label=30;break;}
 case 29: 
 var $171=(($systemstring)|0);
 var $172=_strcpy($171,21096);
 label=31;break;
 case 30: 
 var $174=(($systemstring)|0);
 var $175=_strcpy($174,20808);
 label=31;break;
 case 31: 
 var $177=$3;
 var $178=$rel;
 var $179=(($178+4660)|0);
 var $180=HEAP8[($179)];
 var $181=$5;
 var $182=_relation_create_write_header($177,1,$180,$181,$relationfile);
 var $183=$rel;
 var $184=(($183+4660)|0);
 var $185=HEAP8[($184)];
 var $186=(($185<<24)>>24)!=0;
 if($186){label=32;break;}else{label=33;break;}
 case 32: 
 var $188=(($expression)|0);
 var $189=$rel;
 var $190=(($189)|0);
 var $191=(($190)|0);
 var $192=$rel;
 var $193=(($192+4123)|0);
 var $194=(($193)|0);
 var $195=(($systemstring)|0);
 var $196=_sprintf($188,14576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=$191,HEAP32[(((tempVarArgs)+(16))>>2)]=$194,HEAP32[(((tempVarArgs)+(24))>>2)]=$195,tempVarArgs)); STACKTOP=tempVarArgs;
 label=34;break;
 case 33: 
 var $198=(($expression)|0);
 var $199=$rel;
 var $200=(($199)|0);
 var $201=(($200)|0);
 var $202=$rel;
 var $203=(($202+4123)|0);
 var $204=(($203)|0);
 var $205=(($systemstring)|0);
 var $206=_sprintf($198,14176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=$201,HEAP32[(((tempVarArgs)+(16))>>2)]=$204,HEAP32[(((tempVarArgs)+(24))>>2)]=$205,tempVarArgs)); STACKTOP=tempVarArgs;
 label=34;break;
 case 34: 
 var $208=$dbtouse;
 var $209=(($expression)|0);
 _ddmaintenance($208,$209,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $210=HEAP32[(($relationfile)>>2)];
 var $211=_fclose($210);
 label=35;break;
 case 35: 
 var $213=$rel;
 var $214=(($213+4636)|0);
 HEAP32[(($214)>>2)]=0;
 var $215=$rel;
 var $216=(($215+4640)|0);
 HEAP32[(($216)>>2)]=0;
 var $217=$rel;
 var $218=(($217+4668)|0);
 HEAP8[($218)]=0;
 var $219=$dbtouse;
 var $220=$rel;
 var $221=_relation_insert($219,$220);
 var $222=($221|0)!=1;
 if($222){label=36;break;}else{label=37;break;}
 case 36: 
 var $224=$rel;
 _delete_relation($224);
 _do_debug(1,13824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=40;break;
 case 37: 
 var $226=_hashing_create();
 var $227=$rel;
 var $228=(($227+4664)|0);
 HEAP32[(($228)>>2)]=$226;
 _do_debug(1,13456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $229=$rel;
 $1=$229;
 label=40;break;
 case 38: 
 _do_debug(1,13824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $231=$3;
 _raise_error(6,0,$231,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=40;break;
 case 39: 
 _do_debug(1,13824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $233=$3;
 _raise_error(16,0,$233,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=40;break;
 case 40: 
 var $235=$1;
 STACKTOP=sp;return $235;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_find($db,$relname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $rel;
 var $dbtosearch;
 $2=$db;
 $3=$relname;
 var $4=$3;
 _do_debug(1,11176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=HEAP8[(16)];
 var $6=($5&255);
 var $7=($6|0)==1;
 if($7){label=2;break;}else{label=8;break;}
 case 2: 
 var $9=HEAP8[(47136)];
 var $10=($9&255);
 var $11=($10|0)!=1;
 if($11){label=3;break;}else{label=8;break;}
 case 3: 
 var $13=HEAP32[((37152)>>2)];
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=8;break;}
 case 4: 
 var $16=$2;
 var $17=HEAP32[((37152)>>2)];
 var $18=($16|0)!=($17|0);
 if($18){label=5;break;}else{label=8;break;}
 case 5: 
 var $20=$3;
 var $21=(($20)|0);
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24);
 var $24=($23|0)==122;
 if($24){label=6;break;}else{label=8;break;}
 case 6: 
 var $26=$3;
 var $27=(($26+1)|0);
 var $28=HEAP8[($27)];
 var $29=(($28<<24)>>24);
 var $30=($29|0)==122;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=$3;
 _do_debug(3,10992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,tempVarArgs)); STACKTOP=tempVarArgs;
 var $33=HEAP32[((37152)>>2)];
 $dbtosearch=$33;
 label=16;break;
 case 8: 
 var $35=HEAP8[(37320)];
 var $36=($35&255);
 var $37=($36|0)!=0;
 if($37){label=9;break;}else{label=15;break;}
 case 9: 
 var $39=HEAP32[((37312)>>2)];
 var $40=($39|0)>=3;
 if($40){label=10;break;}else{label=15;break;}
 case 10: 
 var $42=HEAP32[((37152)>>2)];
 var $43=($42|0)==0;
 if($43){label=11;break;}else{label=14;break;}
 case 11: 
 var $45=$3;
 var $46=(($45)|0);
 var $47=HEAP8[($46)];
 var $48=(($47<<24)>>24);
 var $49=($48|0)==122;
 if($49){label=12;break;}else{label=14;break;}
 case 12: 
 var $51=$3;
 var $52=(($51+1)|0);
 var $53=HEAP8[($52)];
 var $54=(($53<<24)>>24);
 var $55=($54|0)==122;
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 var $57=HEAP32[((_stderr)>>2)];
 _leap_fprintf($57,10624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 var $59=HEAP32[((_stderr)>>2)];
 var $60=$3;
 _leap_fprintf($59,10328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$60,tempVarArgs)); STACKTOP=tempVarArgs;
 label=15;break;
 case 15: 
 var $62=$2;
 $dbtosearch=$62;
 label=16;break;
 case 16: 
 var $64=$dbtosearch;
 var $65=($64|0)!=0;
 if($65){label=17;break;}else{label=23;break;}
 case 17: 
 var $67=$dbtosearch;
 var $68=(($67+28)|0);
 var $69=HEAP32[(($68)>>2)];
 $rel=$69;
 label=18;break;
 case 18: 
 var $71=$rel;
 var $72=($71|0)!=0;
 if($72){label=19;break;}else{var $81=0;label=20;break;}
 case 19: 
 var $74=$3;
 var $75=$rel;
 var $76=(($75)|0);
 var $77=(($76)|0);
 var $78=_strcmp($74,$77);
 var $79=($78|0)!=0;
 var $81=$79;label=20;break;
 case 20: 
 var $81;
 if($81){label=21;break;}else{label=22;break;}
 case 21: 
 var $83=$rel;
 var $84=(($83+4636)|0);
 var $85=HEAP32[(($84)>>2)];
 $rel=$85;
 label=18;break;
 case 22: 
 label=24;break;
 case 23: 
 _do_debug(1,9976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=25;break;
 case 24: 
 _do_debug(1,9736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $89=$rel;
 $1=$89;
 label=25;break;
 case 25: 
 var $91=$1;
 STACKTOP=sp;return $91;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_print($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$rel;
 _do_debug(1,13168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $2=$1;
 var $3=(($2+4669)|0);
 var $4=HEAP8[($3)];
 var $5=(($4<<24)>>24)!=0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=HEAP32[((_stdout)>>2)];
 _leap_fprintf($7,12944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 var $9=HEAP32[((_stdout)>>2)];
 var $10=$1;
 var $11=(($10)|0);
 var $12=(($11)|0);
 _leap_fprintf($9,12728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,tempVarArgs)); STACKTOP=tempVarArgs;
 var $13=$1;
 var $14=(($13+4660)|0);
 var $15=HEAP8[($14)];
 var $16=(($15<<24)>>24)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=HEAP32[((_stdout)>>2)];
 _leap_fprintf($18,12448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 5: 
 var $20=$1;
 var $21=(($20+4669)|0);
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24)!=0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=HEAP32[((_stdout)>>2)];
 _leap_fprintf($25,12184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 7: 
 var $27=HEAP32[((_stdout)>>2)];
 _leap_fprintf($27,11808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 _do_debug(1,11488,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_display($db){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $currentRel;
 $1=$db;
 var $2=$1;
 var $3=(($2+28)|0);
 var $4=HEAP32[(($3)>>2)];
 $currentRel=$4;
 _leap_printf(9520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 var $6=$currentRel;
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=7;break;}
 case 3: 
 var $9=HEAP8[(37264)];
 var $10=($9&255);
 var $11=($10|0)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=$currentRel;
 var $14=(($13+4660)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)!=1;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$currentRel;
 _relation_print($19);
 label=6;break;
 case 6: 
 var $21=$currentRel;
 var $22=(($21+4636)|0);
 var $23=HEAP32[(($22)>>2)];
 $currentRel=$23;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_new_read($path,$name){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $rel;
 var $relname=sp;
 var $tmp;
 var $temp=(sp)+(32);
 var $newrelname=(sp)+(4136);
 var $nrf=(sp)+(8240);
 $2=$path;
 $3=$name;
 _do_debug(1,9248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=_malloc(4672);
 var $5=$4;
 $rel=$5;
 var $6=$rel;
 var $7=$6;
 _check_assign($7,8816);
 var $8=(($relname)|0);
 var $9=$3;
 var $10=_strcpy($8,$9);
 var $11=(($relname)|0);
 var $12=_strtok($11,8552);
 var $13=($12|0)==0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(3,2,8288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=$rel;
 var $16=$15;
 _free($16);
 _do_debug(1,8072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=27;break;
 case 3: 
 var $18=$rel;
 var $19=(($18)|0);
 var $20=(($19)|0);
 var $21=(($relname)|0);
 var $22=_strcpy($20,$21);
 var $23=$rel;
 var $24=(($23)|0);
 var $25=(($24)|0);
 var $26=_strcmp($25,7864);
 var $27=($26|0)==0;
 if($27){label=9;break;}else{label=4;break;}
 case 4: 
 var $29=$rel;
 var $30=(($29)|0);
 var $31=(($30)|0);
 var $32=_strcmp($31,7528);
 var $33=($32|0)==0;
 if($33){label=9;break;}else{label=5;break;}
 case 5: 
 var $35=$rel;
 var $36=(($35)|0);
 var $37=(($36)|0);
 var $38=_strcmp($37,20112);
 var $39=($38|0)==0;
 if($39){label=9;break;}else{label=6;break;}
 case 6: 
 var $41=$rel;
 var $42=(($41)|0);
 var $43=(($42)|0);
 var $44=_strcmp($43,7328);
 var $45=($44|0)==0;
 if($45){label=9;break;}else{label=7;break;}
 case 7: 
 var $47=$rel;
 var $48=(($47)|0);
 var $49=(($48)|0);
 var $50=_strcmp($49,7128);
 var $51=($50|0)==0;
 if($51){label=9;break;}else{label=8;break;}
 case 8: 
 var $53=$rel;
 var $54=(($53)|0);
 var $55=(($54)|0);
 var $56=_strcmp($55,6952);
 var $57=($56|0)==0;
 if($57){label=9;break;}else{label=10;break;}
 case 9: 
 var $59=$rel;
 var $60=(($59+4669)|0);
 HEAP8[($60)]=1;
 label=11;break;
 case 10: 
 var $62=$rel;
 var $63=(($62+4669)|0);
 HEAP8[($63)]=0;
 label=11;break;
 case 11: 
 var $65=(($newrelname)|0);
 var $66=$2;
 var $67=_strcpy($65,$66);
 var $68=(($newrelname)|0);
 var $69=(($relname)|0);
 var $70=_strcat($68,$69);
 var $71=(($newrelname)|0);
 var $72=_strcat($71,25440);
 var $73=(($newrelname)|0);
 var $74=_fopen($73,6784);
 HEAP32[(($nrf)>>2)]=$74;
 var $75=HEAP32[(($nrf)>>2)];
 var $76=($75|0)!=0;
 if($76){label=12;break;}else{label=15;break;}
 case 12: 
 var $78=$rel;
 var $79=(($78+4644)|0);
 var $80=$rel;
 var $81=(($80+4660)|0);
 var $82=$rel;
 var $83=(($82+4669)|0);
 var $84=(($relname)|0);
 var $85=_tuple_readheader($nrf,$79,$81,$83,$84);
 var $86=($85|0)!=1;
 if($86){label=13;break;}else{label=14;break;}
 case 13: 
 _raise_error(3,0,6472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 var $89=HEAP32[(($nrf)>>2)];
 var $90=_fclose($89);
 label=16;break;
 case 15: 
 var $92=$rel;
 var $93=$92;
 _free($93);
 var $94=(($newrelname)|0);
 _do_debug(1,6216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$94,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=27;break;
 case 16: 
 var $96=$rel;
 var $97=(($96+26)|0);
 var $98=(($97)|0);
 var $99=$2;
 var $100=_strcpy($98,$99);
 var $101=$rel;
 var $102=(($101+4123)|0);
 var $103=(($102)|0);
 var $104=$3;
 var $105=_strcpy($103,$104);
 var $106=$rel;
 var $107=(($106+4379)|0);
 var $108=(($107)|0);
 var $109=(($relname)|0);
 var $110=_strcpy($108,$109);
 var $111=$rel;
 var $112=(($111+4379)|0);
 var $113=(($112)|0);
 var $114=_strcat($113,21088);
 var $115=$rel;
 var $116=(($115+4636)|0);
 HEAP32[(($116)>>2)]=0;
 var $117=$rel;
 var $118=(($117+4640)|0);
 HEAP32[(($118)>>2)]=0;
 var $119=$rel;
 var $120=(($119+4656)|0);
 HEAP32[(($120)>>2)]=0;
 var $121=$rel;
 var $122=(($temp)|0);
 _relation_full_path($121,$122);
 var $123=(($temp)|0);
 var $124=_strcat($123,13816);
 var $125=(($temp)|0);
 var $126=_fopen($125,6784);
 $tmp=$126;
 var $127=$tmp;
 var $128=($127|0)!=0;
 if($128){label=17;break;}else{label=20;break;}
 case 17: 
 var $130=HEAP8[(37240)];
 var $131=(($130<<24)>>24)!=0;
 if($131){label=18;break;}else{label=19;break;}
 case 18: 
 var $133=$3;
 _raise_message(1,5896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$133,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 19: 
 var $135=$rel;
 var $136=(($135+4664)|0);
 HEAP32[(($136)>>2)]=0;
 var $137=$rel;
 var $138=(($137+4668)|0);
 HEAP8[($138)]=0;
 var $139=$tmp;
 var $140=_fclose($139);
 label=26;break;
 case 20: 
 var $142=HEAP8[(37264)];
 var $143=($142&255);
 var $144=($143|0)!=1;
 if($144){label=21;break;}else{label=23;break;}
 case 21: 
 var $146=HEAP8[(37272)];
 var $147=($146&255);
 var $148=($147|0)!=1;
 if($148){label=22;break;}else{label=23;break;}
 case 22: 
 var $150=$rel;
 var $151=(($150)|0);
 var $152=(($151)|0);
 _raise_message(1,5656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$152,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 23: 
 var $154=$rel;
 var $155=_build_hash_table($154);
 var $156=$rel;
 var $157=(($156+4664)|0);
 HEAP32[(($157)>>2)]=$155;
 var $158=$rel;
 var $159=(($158+4668)|0);
 HEAP8[($159)]=0;
 var $160=$rel;
 var $161=(($160+4669)|0);
 var $162=HEAP8[($161)];
 var $163=(($162<<24)>>24)!=0;
 if($163){label=24;break;}else{label=25;break;}
 case 24: 
 var $165=$rel;
 var $166=(($165+4664)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($temp)|0);
 _hashing_save($167,$168);
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 _do_debug(1,5392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $171=$rel;
 $1=$171;
 label=27;break;
 case 27: 
 var $173=$1;
 STACKTOP=sp;return $173;
  default: assert(0, "bad label: " + label);
 }

}


function _relations_open($db,$dirpath,$ddrel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $stuple=sp;
 var $rtrel;
 var $rel=(sp)+(256);
 var $ctuple=(sp)+(264);
 $1=$db;
 $2=$dirpath;
 $3=$ddrel;
 _do_debug(1,5184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=$3;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=20;break;}
 case 2: 
 var $7=$1;
 var $8=$3;
 var $9=_relation_insert($7,$8);
 var $10=$1;
 var $11=(($10+4136)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=((($12)+(1))|0);
 HEAP32[(($11)>>2)]=$13;
 var $14=$1;
 var $15=_vprocess_query($14,4976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=19800,tempVarArgs)); STACKTOP=tempVarArgs;
 $rtrel=$15;
 var $16=$rtrel;
 var $17=($16|0)!=0;
 if($17){label=3;break;}else{label=18;break;}
 case 3: 
 var $19=$rtrel;
 var $20=_tuple_readfirst($19,1,0);
 HEAP32[(($ctuple)>>2)]=$20;
 label=4;break;
 case 4: 
 var $22=HEAP32[(($ctuple)>>2)];
 var $23=($22|0)!=0;
 if($23){label=5;break;}else{label=17;break;}
 case 5: 
 var $25=HEAP32[(($ctuple)>>2)];
 var $26=(($stuple)|0);
 _tuple_to_string($25,$26);
 var $27=$2;
 var $28=(($stuple)|0);
 var $29=_relation_new_read($27,$28);
 HEAP32[(($rel)>>2)]=$29;
 var $30=HEAP32[(($rel)>>2)];
 var $31=($30|0)!=0;
 if($31){label=6;break;}else{label=12;break;}
 case 6: 
 var $33=HEAP32[(($rel)>>2)];
 var $34=(($33+4669)|0);
 var $35=HEAP8[($34)];
 var $36=(($35<<24)>>24)!=0;
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 var $38=$1;
 var $39=(($38+4136)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 label=8;break;
 case 8: 
 var $43=$1;
 var $44=HEAP32[(($rel)>>2)];
 var $45=_relation_insert($43,$44);
 var $46=($45|0)!=1;
 if($46){label=9;break;}else{label=10;break;}
 case 9: 
 var $48=$1;
 _relation_dispose_mem($48,$rel);
 label=11;break;
 case 10: 
 label=11;break;
 case 11: 
 label=16;break;
 case 12: 
 var $52=HEAP8[(37264)];
 var $53=($52&255);
 var $54=($53|0)!=1;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=HEAP32[((_stderr)>>2)];
 var $57=(($stuple)|0);
 _leap_fprintf($56,4752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAP32[(((tempVarArgs)+(8))>>2)]=20112,tempVarArgs)); STACKTOP=tempVarArgs;
 label=15;break;
 case 14: 
 var $59=HEAP32[((_stderr)>>2)];
 _leap_fprintf($59,4552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4376,HEAP32[(((tempVarArgs)+(8))>>2)]=20112,HEAP32[(((tempVarArgs)+(16))>>2)]=7328,tempVarArgs)); STACKTOP=tempVarArgs;
 label=15;break;
 case 15: 
 var $61=$1;
 var $62=(($stuple)|0);
 var $63=_vprocess_query($61,4128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=19800,HEAP32[(((tempVarArgs)+(16))>>2)]=$62,tempVarArgs)); STACKTOP=tempVarArgs;
 var $64=$1;
 var $65=(($stuple)|0);
 var $66=_vprocess_query($64,4128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=7328,HEAP32[(((tempVarArgs)+(8))>>2)]=4008,HEAP32[(((tempVarArgs)+(16))>>2)]=$65,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 16: 
 var $68=_tuple_readnext($ctuple,1);
 label=4;break;
 case 17: 
 _close_tuple($ctuple,2);
 label=19;break;
 case 18: 
 _raise_error(41,2,51520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 19: 
 label=21;break;
 case 20: 
 _raise_error(41,2,3776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 21: 
 _do_debug(1,3624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_dispose_mem($db,$rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$db;
 $2=$rel;
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=$2;
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 _do_debug(7,2600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$7,HEAP32[(((tempVarArgs)+(16))>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $10=$2;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=9;break;}
 case 2: 
 var $13=$2;
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=9;break;}
 case 3: 
 var $17=HEAP8[(37320)];
 var $18=($17&255);
 var $19=($18|0)!=0;
 if($19){label=4;break;}else{label=6;break;}
 case 4: 
 var $21=HEAP32[((37312)>>2)];
 var $22=($21|0)>=7;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=HEAP32[((_stderr)>>2)];
 var $25=$2;
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26)|0);
 var $28=(($27)|0);
 var $29=$2;
 var $30=HEAP32[(($29)>>2)];
 _leap_fprintf($24,2448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$28,HEAP32[(((tempVarArgs)+(8))>>2)]=$30,tempVarArgs)); STACKTOP=tempVarArgs;
 var $31=HEAP32[((_stderr)>>2)];
 var $32=$2;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+4664)|0);
 var $35=HEAP32[(($34)>>2)];
 _leap_fprintf($31,2296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 var $37=$2;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+4664)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)!=0;
 if($41){label=7;break;}else{label=8;break;}
 case 7: 
 var $43=$2;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+4664)|0);
 var $46=$2;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47)|0);
 var $49=(($48)|0);
 _do_debug(7,2160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$45,HEAP32[(((tempVarArgs)+(8))>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs;
 var $50=$2;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+4664)|0);
 _hashing_terminate($52);
 label=8;break;
 case 8: 
 var $54=$2;
 var $55=HEAP32[(($54)>>2)];
 var $56=$2;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=(($58)|0);
 _do_debug(7,1984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$55,HEAP32[(((tempVarArgs)+(8))>>2)]=$59,tempVarArgs)); STACKTOP=tempVarArgs;
 var $60=$2;
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 _free($62);
 $2=0;
 label=10;break;
 case 9: 
 _raise_error(10,0,1872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relations_ddopen($db){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8208)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $dirpath=sp;
 var $ddname=(sp)+(4104);
 var $ddrel;
 $2=$db;
 _do_debug(1,3472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=HEAP8[(37272)];
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=$2;
 var $7=_database_name($6);
 _raise_message(1,3296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$7,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 var $9=$2;
 var $10=(($9+4134)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24)!=0;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=(($dirpath)|0);
 var $15=$2;
 var $16=_database_dir($15);
 var $17=_sprintf($14,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,HEAP32[(((tempVarArgs)+(8))>>2)]=22848,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 5: 
 var $19=(($dirpath)|0);
 var $20=$2;
 var $21=_database_dir($20);
 var $22=_sprintf($19,12728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 var $24=(($ddname)|0);
 var $25=_sprintf($24,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=25440,tempVarArgs)); STACKTOP=tempVarArgs;
 var $26=(($dirpath)|0);
 var $27=(($ddname)|0);
 var $28=_relation_new_read($26,$27);
 $ddrel=$28;
 var $29=$ddrel;
 var $30=($29|0)!=0;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=$2;
 var $33=(($dirpath)|0);
 var $34=$ddrel;
 _relations_open($32,$33,$34);
 _do_debug(1,3128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=9;break;
 case 8: 
 _do_debug(1,2936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=$2;
 var $37=_database_name($36);
 _leap_printf(2800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$37,HEAP32[(((tempVarArgs)+(8))>>2)]=20112,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=9;break;
 case 9: 
 var $39=$1;
 STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_dispose($db,$rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$db;
 $2=$rel;
 _do_debug(1,1720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=$2;
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 _do_debug(7,2600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$7,HEAP32[(((tempVarArgs)+(16))>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $10=$2;
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=15;break;}
 case 2: 
 var $13=$2;
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=15;break;}
 case 3: 
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+4660)|0);
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=($21|0)==1;
 if($22){label=4;break;}else{label=9;break;}
 case 4: 
 var $24=$1;
 var $25=_database_name($24);
 var $26=_strcmp($25,15032);
 var $27=($26|0)==0;
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $29=HEAP8[(33040)];
 var $30=($29&255);
 var $31=($30|0)==1;
 if($31){label=7;break;}else{label=6;break;}
 case 6: 
 var $33=$1;
 var $34=_database_name($33);
 var $35=_strcmp($34,15032);
 var $36=($35|0)!=0;
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 var $38=$2;
 var $39=HEAP32[(($38)>>2)];
 var $40=$2;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41)|0);
 var $43=(($42)|0);
 _do_debug(3,1640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$39,HEAP32[(((tempVarArgs)+(8))>>2)]=$43,tempVarArgs)); STACKTOP=tempVarArgs;
 var $44=$2;
 var $45=HEAP32[(($44)>>2)];
 _delete_relation($45);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $48=HEAP8[(37320)];
 var $49=($48&255);
 var $50=($49|0)!=0;
 if($50){label=10;break;}else{label=12;break;}
 case 10: 
 var $52=HEAP32[((37312)>>2)];
 var $53=($52|0)>=7;
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $55=HEAP32[((_stderr)>>2)];
 var $56=$2;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57)|0);
 var $59=(($58)|0);
 var $60=$2;
 var $61=HEAP32[(($60)>>2)];
 _leap_fprintf($55,2448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$59,HEAP32[(((tempVarArgs)+(8))>>2)]=$61,tempVarArgs)); STACKTOP=tempVarArgs;
 var $62=HEAP32[((_stderr)>>2)];
 var $63=$2;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+4664)|0);
 var $66=HEAP32[(($65)>>2)];
 _leap_fprintf($62,2296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$66,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 var $68=$2;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+4664)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($71|0)!=0;
 if($72){label=13;break;}else{label=14;break;}
 case 13: 
 var $74=$2;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+4664)|0);
 var $77=$2;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78)|0);
 var $80=(($79)|0);
 _do_debug(7,2160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$76,HEAP32[(((tempVarArgs)+(8))>>2)]=$80,tempVarArgs)); STACKTOP=tempVarArgs;
 var $81=$2;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+4664)|0);
 _hashing_terminate($83);
 label=14;break;
 case 14: 
 var $85=$2;
 var $86=HEAP32[(($85)>>2)];
 var $87=$2;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88)|0);
 var $90=(($89)|0);
 _do_debug(7,1984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$86,HEAP32[(((tempVarArgs)+(8))>>2)]=$90,tempVarArgs)); STACKTOP=tempVarArgs;
 var $91=$2;
 var $92=HEAP32[(($91)>>2)];
 var $93=$92;
 _free($93);
 $2=0;
 label=16;break;
 case 15: 
 _raise_error(10,0,1872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relations_dispose_all($db){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $crel;
 var $prel=sp;
 var $trel;
 var $hashfile=(sp)+(8);
 $1=$db;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=30;break;}
 case 2: 
 var $5=HEAP8[(37272)];
 var $6=($5&255);
 var $7=($6|0)!=1;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 _leap_printf(1552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 var $10=$1;
 var $11=_vprocess_query($10,20392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=30888,HEAP32[(((tempVarArgs)+(16))>>2)]=21096,HEAP32[(((tempVarArgs)+(24))>>2)]=30888,HEAP32[(((tempVarArgs)+(32))>>2)]=20808,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(30592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $12=HEAP8[(37272)];
 var $13=($12&255);
 var $14=($13|0)!=1;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 _leap_printf(30424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 var $17=$1;
 var $18=(($17+28)|0);
 var $19=HEAP32[(($18)>>2)];
 $crel=$19;
 label=7;break;
 case 7: 
 var $21=$crel;
 var $22=($21|0)!=0;
 if($22){label=8;break;}else{label=24;break;}
 case 8: 
 var $24=HEAP8[(37272)];
 var $25=($24&255);
 var $26=($25|0)!=1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=HEAP8[(37264)];
 var $29=($28&255);
 var $30=($29|0)==1;
 if($30){label=10;break;}else{label=12;break;}
 case 10: 
 var $32=$crel;
 var $33=(($32+4660)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=($35|0)!=0;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 _leap_printf(4376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 12: 
 var $39=$crel;
 var $40=(($39)|0);
 var $41=(($40)|0);
 _leap_printf($41,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 var $44=$crel;
 var $45=(($44+4660)|0);
 var $46=HEAP8[($45)];
 var $47=(($46<<24)>>24)!=0;
 if($47){label=20;break;}else{label=15;break;}
 case 15: 
 var $49=$crel;
 var $50=(($hashfile)|0);
 _relation_full_path($49,$50);
 var $51=(($hashfile)|0);
 var $52=_strcat($51,13816);
 var $53=$crel;
 var $54=(($53+4668)|0);
 var $55=HEAP8[($54)];
 var $56=($55&255);
 var $57=($56|0)==1;
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 var $59=$crel;
 var $60=(($59+4664)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($hashfile)|0);
 _hashing_save($61,$62);
 label=17;break;
 case 17: 
 var $64=HEAP8[(37272)];
 var $65=($64&255);
 var $66=($65|0)!=1;
 if($66){label=18;break;}else{label=19;break;}
 case 18: 
 _leap_printf(30312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 19: 
 label=23;break;
 case 20: 
 _do_debug(3,30160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $70=$1;
 var $71=$crel;
 var $72=(($71)|0);
 var $73=(($72)|0);
 var $74=_vprocess_query($70,4128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=19800,HEAP32[(((tempVarArgs)+(16))>>2)]=$73,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(3,29952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $75=$1;
 var $76=$crel;
 var $77=(($76)|0);
 var $78=(($77)|0);
 var $79=_vprocess_query($75,4128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=7328,HEAP32[(((tempVarArgs)+(8))>>2)]=4008,HEAP32[(((tempVarArgs)+(16))>>2)]=$78,tempVarArgs)); STACKTOP=tempVarArgs;
 var $80=HEAP8[(37272)];
 var $81=($80&255);
 var $82=($81|0)!=1;
 if($82){label=21;break;}else{label=22;break;}
 case 21: 
 var $84=HEAP32[((_stdout)>>2)];
 _leap_fprintf($84,29816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $87=HEAP32[((_stdout)>>2)];
 var $88=_fflush($87);
 var $89=$crel;
 HEAP32[(($prel)>>2)]=$89;
 var $90=$crel;
 var $91=(($90+4636)|0);
 var $92=HEAP32[(($91)>>2)];
 $crel=$92;
 label=7;break;
 case 24: 
 var $94=HEAP8[(37272)];
 var $95=($94&255);
 var $96=($95|0)!=1;
 if($96){label=25;break;}else{label=26;break;}
 case 25: 
 _leap_printf(11808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=26;break;
 case 26: 
 var $99=$1;
 var $100=(($99+28)|0);
 var $101=HEAP32[(($100)>>2)];
 $crel=$101;
 label=27;break;
 case 27: 
 var $103=$crel;
 var $104=($103|0)!=0;
 if($104){label=28;break;}else{label=29;break;}
 case 28: 
 var $106=$crel;
 HEAP32[(($prel)>>2)]=$106;
 var $107=$crel;
 var $108=(($107+4636)|0);
 var $109=HEAP32[(($108)>>2)];
 $crel=$109;
 var $110=$1;
 _relation_dispose($110,$prel);
 label=27;break;
 case 29: 
 var $112=$1;
 var $113=(($112+28)|0);
 HEAP32[(($113)>>2)]=0;
 label=31;break;
 case 30: 
 _raise_message(1,29664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_remove($db,$rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$db;
 $2=$rel;
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(10,0,29552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 3: 
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 var $10=$1;
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9|0)==($12|0);
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=$2;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+4636)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$1;
 var $20=(($19+28)|0);
 HEAP32[(($20)>>2)]=$18;
 label=10;break;
 case 5: 
 var $22=$2;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+4640)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)!=0;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$2;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4636)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$2;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+4640)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+4636)|0);
 HEAP32[(($36)>>2)]=$31;
 label=7;break;
 case 7: 
 var $38=$2;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+4636)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)!=0;
 if($42){label=8;break;}else{label=9;break;}
 case 8: 
 var $44=$2;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+4640)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$2;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+4636)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+4640)|0);
 HEAP32[(($52)>>2)]=$47;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $55=$2;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+4664)|0);
 var $58=($57|0)!=0;
 if($58){label=11;break;}else{label=12;break;}
 case 11: 
 var $60=$2;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+4664)|0);
 _hashing_terminate($62);
 label=12;break;
 case 12: 
 var $64=HEAP8[(42600)];
 var $65=($64&255);
 var $66=($65|0)==0;
 if($66){label=13;break;}else{label=18;break;}
 case 13: 
 var $68=$1;
 var $69=$2;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70)|0);
 var $72=(($71)|0);
 var $73=_vprocess_query($68,4128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=20112,HEAP32[(((tempVarArgs)+(8))>>2)]=19800,HEAP32[(((tempVarArgs)+(16))>>2)]=$72,tempVarArgs)); STACKTOP=tempVarArgs;
 var $74=($73|0)==0;
 if($74){label=14;break;}else{label=15;break;}
 case 14: 
 var $76=$2;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77)|0);
 var $79=(($78)|0);
 _raise_error(48,0,$79,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=15;break;
 case 15: 
 var $81=$1;
 var $82=$2;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83)|0);
 var $85=(($84)|0);
 var $86=_vprocess_query($81,4128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=7328,HEAP32[(((tempVarArgs)+(8))>>2)]=4008,HEAP32[(((tempVarArgs)+(16))>>2)]=$85,tempVarArgs)); STACKTOP=tempVarArgs;
 var $87=($86|0)==0;
 if($87){label=16;break;}else{label=17;break;}
 case 16: 
 var $89=$2;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90)|0);
 var $92=(($91)|0);
 _raise_error(48,0,$92,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=17;break;
 case 17: 
 label=18;break;
 case 18: 
 var $95=$2;
 var $96=HEAP32[(($95)>>2)];
 _delete_relation($96);
 var $97=$2;
 var $98=HEAP32[(($97)>>2)];
 var $99=$98;
 _free($99);
 var $100=$2;
 HEAP32[(($100)>>2)]=0;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_rename($db,$first,$second){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $rtrel;
 var $returncode;
 var $relpath=sp;
 var $nrelpath=(sp)+(4104);
 var $source=(sp)+(8208);
 var $dest=(sp)+(12312);
 var $sptr;
 var $rname=(sp)+(16416);
 var $aname=(sp)+(16448);
 var $fptr=(sp)+(16480);
 var $noattributes=(sp)+(16488);
 var $count;
 var $temp=(sp)+(16496);
 var $system=(sp)+(16504);
 var $renamed;
 var $pos;
 var $att=(sp)+(16512);
 var $atype;
 var $asize;
 var $ctype=(sp)+(16520);
 $2=$db;
 $3=$first;
 $4=$second;
 $rtrel=0;
 $renamed=0;
 $atype=0;
 $asize=0;
 var $5=$3;
 var $6=_strlen($5);
 var $7=($6>>>0)>0;
 if($7){label=2;break;}else{label=40;break;}
 case 2: 
 var $9=$4;
 var $10=_strlen($9);
 var $11=($10>>>0)>0;
 if($11){label=3;break;}else{label=40;break;}
 case 3: 
 var $13=$3;
 var $14=_strchr($13,46);
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=15;break;}
 case 4: 
 var $17=$2;
 var $18=$3;
 var $19=_relation_find($17,$18);
 $rtrel=$19;
 var $20=$rtrel;
 var $21=($20|0)!=0;
 if($21){label=5;break;}else{label=13;break;}
 case 5: 
 var $23=$rtrel;
 var $24=(($23+4123)|0);
 var $25=(($24)|0);
 var $26=$4;
 var $27=_sprintf($25,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$26,HEAP32[(((tempVarArgs)+(8))>>2)]=25440,tempVarArgs)); STACKTOP=tempVarArgs;
 var $28=(($relpath)|0);
 var $29=$2;
 var $30=_database_dir($29);
 var $31=$3;
 var $32=_sprintf($28,29472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$30,HEAP32[(((tempVarArgs)+(8))>>2)]=22848,HEAP32[(((tempVarArgs)+(16))>>2)]=$31,tempVarArgs)); STACKTOP=tempVarArgs;
 var $33=(($nrelpath)|0);
 var $34=$2;
 var $35=_database_dir($34);
 var $36=$4;
 var $37=_sprintf($33,29472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$35,HEAP32[(((tempVarArgs)+(8))>>2)]=22848,HEAP32[(((tempVarArgs)+(16))>>2)]=$36,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=(($source)|0);
 var $39=(($relpath)|0);
 var $40=_sprintf($38,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$39,HEAP32[(((tempVarArgs)+(8))>>2)]=25440,tempVarArgs)); STACKTOP=tempVarArgs;
 var $41=(($dest)|0);
 var $42=(($nrelpath)|0);
 var $43=_sprintf($41,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$42,HEAP32[(((tempVarArgs)+(8))>>2)]=25440,tempVarArgs)); STACKTOP=tempVarArgs;
 var $44=(($source)|0);
 var $45=(($dest)|0);
 _do_debug(3,29344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$44,HEAP32[(((tempVarArgs)+(8))>>2)]=$45,tempVarArgs)); STACKTOP=tempVarArgs;
 var $46=(($source)|0);
 var $47=(($dest)|0);
 var $48=_rename($46,$47);
 $returncode=$48;
 var $49=$returncode;
 var $50=($49|0)==0;
 if($50){label=6;break;}else{label=9;break;}
 case 6: 
 var $52=(($source)|0);
 var $53=(($relpath)|0);
 var $54=_sprintf($52,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$53,HEAP32[(((tempVarArgs)+(8))>>2)]=13816,tempVarArgs)); STACKTOP=tempVarArgs;
 var $55=(($dest)|0);
 var $56=(($nrelpath)|0);
 var $57=_sprintf($55,16336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAP32[(((tempVarArgs)+(8))>>2)]=13816,tempVarArgs)); STACKTOP=tempVarArgs;
 var $58=(($source)|0);
 var $59=_fopen($58,6784);
 HEAP32[(($fptr)>>2)]=$59;
 var $60=HEAP32[(($fptr)>>2)];
 var $61=($60|0)!=0;
 if($61){label=7;break;}else{label=8;break;}
 case 7: 
 var $63=HEAP32[(($fptr)>>2)];
 var $64=_fclose($63);
 var $65=(($source)|0);
 var $66=(($dest)|0);
 _do_debug(3,29344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$65,HEAP32[(((tempVarArgs)+(8))>>2)]=$66,tempVarArgs)); STACKTOP=tempVarArgs;
 var $67=(($source)|0);
 var $68=(($dest)|0);
 var $69=_rename($67,$68);
 $returncode=$69;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $72=$returncode;
 var $73=($72|0)!=0;
 if($73){label=10;break;}else{label=11;break;}
 case 10: 
 _raise_error(3,0,29080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 11: 
 var $76=$rtrel;
 var $77=(($76)|0);
 var $78=(($77)|0);
 var $79=$4;
 var $80=_strcpy($78,$79);
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 var $83=$3;
 _raise_error(9,0,$83,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 label=39;break;
 case 15: 
 var $86=$3;
 var $87=(($rname)|0);
 var $88=_cut_token($86,46,$87);
 var $89=$3;
 $sptr=$89;
 var $90=$sptr;
 var $91=(($90+1)|0);
 $sptr=$91;
 var $92=$sptr;
 var $93=(($aname)|0);
 var $94=_cut_token($92,0,$93);
 var $95=$2;
 var $96=(($rname)|0);
 var $97=_relation_find($95,$96);
 $rtrel=$97;
 var $98=$rtrel;
 var $99=($98|0)!=0;
 if($99){label=16;break;}else{label=37;break;}
 case 16: 
 var $101=(($rname)|0);
 var $102=_strlen($101);
 var $103=($102>>>0)>0;
 if($103){label=17;break;}else{label=36;break;}
 case 17: 
 var $105=(($aname)|0);
 var $106=_strlen($105);
 var $107=($106>>>0)>0;
 if($107){label=18;break;}else{label=36;break;}
 case 18: 
 var $109=(($source)|0);
 var $110=$2;
 var $111=_database_dir($110);
 var $112=(($rname)|0);
 var $113=_sprintf($109,23232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$111,HEAP32[(((tempVarArgs)+(8))>>2)]=22848,HEAP32[(((tempVarArgs)+(16))>>2)]=$112,HEAP32[(((tempVarArgs)+(24))>>2)]=25440,tempVarArgs)); STACKTOP=tempVarArgs;
 var $114=(($source)|0);
 var $115=_fopen($114,28944);
 HEAP32[(($fptr)>>2)]=$115;
 var $116=HEAP32[(($fptr)>>2)];
 var $117=($116|0)!=0;
 if($117){label=19;break;}else{label=35;break;}
 case 19: 
 var $119=(($rname)|0);
 var $120=_tuple_readheader($fptr,$noattributes,$temp,$system,$119);
 var $121=($120|0)!=1;
 if($121){label=20;break;}else{label=21;break;}
 case 20: 
 $1=0;
 label=41;break;
 case 21: 
 $count=0;
 label=22;break;
 case 22: 
 var $125=$renamed;
 var $126=($125&255);
 var $127=($126|0)==0;
 if($127){label=23;break;}else{label=31;break;}
 case 23: 
 var $129=$count;
 var $130=($129&255);
 var $131=HEAP8[($noattributes)];
 var $132=($131&255);
 var $133=($130|0)<($132|0);
 if($133){label=24;break;}else{label=31;break;}
 case 24: 
 var $135=HEAP32[(($fptr)>>2)];
 var $136=_ftell($135);
 $pos=$136;
 var $137=_relation_attribute_read($fptr);
 HEAP32[(($att)>>2)]=$137;
 var $138=HEAP32[(($att)>>2)];
 var $139=(($138)|0);
 var $140=(($139)|0);
 var $141=(($aname)|0);
 var $142=_strcmp($140,$141);
 var $143=($142|0)==0;
 if($143){label=25;break;}else{label=29;break;}
 case 25: 
 var $145=HEAP32[(($att)>>2)];
 var $146=(($145)|0);
 var $147=(($146)|0);
 var $148=$4;
 var $149=_strcpy($147,$148);
 var $150=HEAP32[(($fptr)>>2)];
 var $151=$pos;
 var $152=_fseek($150,$151,0);
 var $153=HEAP32[(($att)>>2)];
 var $154=_relation_create_write_attribute($153,$fptr);
 var $155=($154|0)==1;
 if($155){label=26;break;}else{label=27;break;}
 case 26: 
 var $157=HEAP32[(($att)>>2)];
 var $158=(($157+52)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159)&255);
 $asize=$160;
 var $161=HEAP32[(($att)>>2)];
 var $162=(($161+48)|0);
 var $163=HEAP8[($162)];
 $atype=$163;
 $renamed=1;
 label=28;break;
 case 27: 
 $renamed=0;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 _attribute_dispose($att);
 label=30;break;
 case 30: 
 var $168=$count;
 var $169=((($168)+(1))&255);
 $count=$169;
 label=22;break;
 case 31: 
 var $171=HEAP32[(($fptr)>>2)];
 var $172=_fclose($171);
 var $173=$renamed;
 var $174=($173&255);
 var $175=($174|0)==0;
 if($175){label=32;break;}else{label=33;break;}
 case 32: 
 var $177=(($aname)|0);
 _raise_message(1,28744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$177,tempVarArgs)); STACKTOP=tempVarArgs;
 label=34;break;
 case 33: 
 var $179=$2;
 var $180=(($rname)|0);
 var $181=(($aname)|0);
 _ddmaintenance($179,28584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=7328,HEAP32[(((tempVarArgs)+(8))>>2)]=4008,HEAP32[(((tempVarArgs)+(16))>>2)]=$180,HEAP32[(((tempVarArgs)+(24))>>2)]=28416,HEAP32[(((tempVarArgs)+(32))>>2)]=$181,tempVarArgs)); STACKTOP=tempVarArgs;
 var $182=$2;
 var $183=(($rname)|0);
 var $184=$4;
 var $185=(($ctype)|0);
 var $186=$atype;
 var $187=_get_attribute_info($185,$186);
 var $188=$asize;
 var $189=($188&255);
 _ddmaintenance($182,28272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=7328,HEAP32[(((tempVarArgs)+(8))>>2)]=$183,HEAP32[(((tempVarArgs)+(16))>>2)]=$184,HEAP32[(((tempVarArgs)+(24))>>2)]=$187,HEAP32[(((tempVarArgs)+(32))>>2)]=$189,tempVarArgs)); STACKTOP=tempVarArgs;
 label=34;break;
 case 34: 
 var $191=$rtrel;
 $1=$191;
 label=41;break;
 case 35: 
 var $193=(($source)|0);
 _raise_error(2,0,$193,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 36: 
 _raise_error(3,0,28168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 37: 
 var $196=$3;
 _raise_error(9,0,$196,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $199=$rtrel;
 $1=$199;
 label=41;break;
 case 40: 
 $1=0;
 label=41;break;
 case 41: 
 var $202=$1;
 STACKTOP=sp;return $202;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_revattrib($att){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$att;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=$1;
 var $6=(($5+48)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24);
 if(($8|0)==1){ label=3;break;}else if(($8|0)==2){ label=4;break;}else if(($8|0)==3){ label=5;break;}else{label=6;break;}
 case 3: 
 var $10=$1;
 var $11=(($10)|0);
 var $12=(($11)|0);
 var $13=$1;
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 _leap_printf(28112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAP32[(((tempVarArgs)+(8))>>2)]=28024,HEAP32[(((tempVarArgs)+(16))>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 4: 
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18)|0);
 var $20=$1;
 var $21=(($20+52)|0);
 var $22=HEAP32[(($21)>>2)];
 _leap_printf(28112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$19,HEAP32[(((tempVarArgs)+(8))>>2)]=27952,HEAP32[(((tempVarArgs)+(16))>>2)]=$22,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 5: 
 var $24=$1;
 var $25=(($24)|0);
 var $26=(($25)|0);
 var $27=$1;
 var $28=(($27+52)|0);
 var $29=HEAP32[(($28)>>2)];
 _leap_printf(28112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$26,HEAP32[(((tempVarArgs)+(8))>>2)]=27880,HEAP32[(((tempVarArgs)+(16))>>2)]=$29,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 6: 
 _leap_printf(27640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_reverse($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $att;
 var $ctuple=sp;
 var $count=(sp)+(8);
 $1=$rel;
 var $2=$1;
 var $3=_relation_attribute_readfirst($2,$ctuple,$count);
 $att=$3;
 var $4=$1;
 var $5=(($4)|0);
 var $6=(($5)|0);
 _leap_printf(27584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 var $8=$att;
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=6;break;}
 case 3: 
 var $11=$att;
 _relation_revattrib($11);
 var $12=$1;
 var $13=$att;
 var $14=_relation_attribute_readnext($12,$ctuple,$13,$count);
 $att=$14;
 var $15=$att;
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 _leap_printf(27488,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 label=2;break;
 case 6: 
 _leap_printf(12184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $20=$1;
 var $21=_rl_revdisplay($20);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _project_create_rtn_relation($db,$rel,$attribute_list,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5856)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $return_rel;
 var $rname;
 var $rel_name=sp;
 var $cur_attribute=(sp)+(32);
 var $captr;
 var $attribs=(sp)+(64);
 var $attrdescr=(sp)+(1728);
 var $attrib=(sp)+(1736);
 var $nf=(sp)+(1744);
 var $noattribs;
 var $path=(sp)+(1752);
 var $res;
 $2=$db;
 $3=$rel;
 $4=$attribute_list;
 $5=$destname;
 var $6=$rel_name;
 _memset($6, 0, 26)|0;
 var $7=$cur_attribute;
 _memset($7, 0, 26)|0;
 var $8=$attribs;
 _memset($8, 0, 1664)|0;
 var $9=$path;
 _memset($9, 0, 4097)|0;
 var $10=$5;
 var $11=_strlen($10);
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=(($rel_name)|0);
 var $15=_generate_random_string(6,$14);
 $rname=$15;
 label=4;break;
 case 3: 
 var $17=$5;
 $rname=$17;
 label=4;break;
 case 4: 
 var $19=$2;
 var $20=$rname;
 var $21=_relation_create($19,$20,1,0);
 $return_rel=$21;
 var $22=$return_rel;
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=$3;
 var $26=($25|0)==0;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=26;break;
 case 7: 
 var $29=(($path)|0);
 var $30=$return_rel;
 var $31=(($30+26)|0);
 var $32=(($31)|0);
 var $33=$rname;
 var $34=_sprintf($29,9656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,HEAP32[(((tempVarArgs)+(8))>>2)]=$33,HEAP32[(((tempVarArgs)+(16))>>2)]=24744,tempVarArgs)); STACKTOP=tempVarArgs;
 var $35=(($path)|0);
 _do_debug(3,20760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($path)|0);
 var $37=_fopen($36,17232);
 HEAP32[(($nf)>>2)]=$37;
 var $38=HEAP8[(37320)];
 var $39=($38&255);
 var $40=($39|0)!=0;
 if($40){label=8;break;}else{label=13;break;}
 case 8: 
 var $42=HEAP32[((37312)>>2)];
 var $43=($42|0)>=3;
 if($43){label=9;break;}else{label=13;break;}
 case 9: 
 var $45=HEAP32[(($nf)>>2)];
 var $46=($45|0)!=0;
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=HEAP32[((_stderr)>>2)];
 var $49=(($path)|0);
 _leap_fprintf($48,13368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 11: 
 var $51=HEAP32[((_stderr)>>2)];
 var $52=(($path)|0);
 _leap_fprintf($51,10528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$52,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $55=$return_rel;
 var $56=(($55+4644)|0);
 HEAP8[($56)]=0;
 var $57=(($attribs)|0);
 var $58=$4;
 var $59=_strcpy($57,$58);
 var $60=(($attribs)|0);
 var $61=(($cur_attribute)|0);
 var $62=_cut_token($60,0,$61);
 var $63=(($cur_attribute)|0);
 var $64=_skip_to_alnum($63);
 $captr=$64;
 var $65=$3;
 var $66=$captr;
 var $67=_attribute_find($65,$66);
 HEAP32[(($attrib)>>2)]=$67;
 $noattribs=0;
 label=14;break;
 case 14: 
 var $69=HEAP32[(($attrib)>>2)];
 var $70=($69|0)!=0;
 if($70){label=15;break;}else{label=25;break;}
 case 15: 
 var $72=$noattribs;
 var $73=((($72)+(1))|0);
 $noattribs=$73;
 var $74=HEAP32[(($nf)>>2)];
 var $75=_fseek($74,0,2);
 $res=$75;
 var $76=$res;
 _do_debug(9,7728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$76,tempVarArgs)); STACKTOP=tempVarArgs;
 var $77=HEAP32[(($attrib)>>2)];
 var $78=_relation_create_write_attribute($77,$nf);
 var $79=$2;
 var $80=(($79+4136)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81>>>0)>=5;
 if($82){label=16;break;}else{label=24;break;}
 case 16: 
 var $84=HEAP8[(16)];
 var $85=($84&255);
 var $86=($85|0)==1;
 if($86){label=17;break;}else{label=22;break;}
 case 17: 
 var $88=HEAP8[(47136)];
 var $89=($88&255);
 var $90=($89|0)!=1;
 if($90){label=18;break;}else{label=22;break;}
 case 18: 
 var $92=$2;
 var $93=_database_name($92);
 var $94=_strcmp($93,5320);
 var $95=($94|0)!=0;
 if($95){label=19;break;}else{label=22;break;}
 case 19: 
 var $97=$return_rel;
 var $98=(($97)|0);
 var $99=(($98)|0);
 var $100=HEAP8[($99)];
 var $101=(($100<<24)>>24);
 var $102=($101|0)==122;
 if($102){label=20;break;}else{label=22;break;}
 case 20: 
 var $104=$return_rel;
 var $105=(($104)|0);
 var $106=(($105+1)|0);
 var $107=HEAP8[($106)];
 var $108=(($107<<24)>>24);
 var $109=($108|0)==122;
 if($109){label=21;break;}else{label=22;break;}
 case 21: 
 var $111=HEAP32[((37152)>>2)];
 var $112=$return_rel;
 var $113=(($112)|0);
 var $114=(($113)|0);
 var $115=HEAP32[(($attrib)>>2)];
 var $116=(($115)|0);
 var $117=(($116)|0);
 var $118=(($attrdescr)|0);
 var $119=HEAP32[(($attrib)>>2)];
 var $120=(($119+48)|0);
 var $121=HEAP8[($120)];
 var $122=_get_attribute_info($118,$121);
 var $123=HEAP32[(($attrib)>>2)];
 var $124=(($123+52)|0);
 var $125=HEAP32[(($124)>>2)];
 _ddmaintenance($111,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1912,HEAP32[(((tempVarArgs)+(8))>>2)]=$114,HEAP32[(((tempVarArgs)+(16))>>2)]=$117,HEAP32[(((tempVarArgs)+(24))>>2)]=$122,HEAP32[(((tempVarArgs)+(32))>>2)]=$125,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 22: 
 var $127=$2;
 var $128=$return_rel;
 var $129=(($128)|0);
 var $130=(($129)|0);
 var $131=HEAP32[(($attrib)>>2)];
 var $132=(($131)|0);
 var $133=(($132)|0);
 var $134=(($attrdescr)|0);
 var $135=HEAP32[(($attrib)>>2)];
 var $136=(($135+48)|0);
 var $137=HEAP8[($136)];
 var $138=_get_attribute_info($134,$137);
 var $139=HEAP32[(($attrib)>>2)];
 var $140=(($139+52)|0);
 var $141=HEAP32[(($140)>>2)];
 _ddmaintenance($127,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1912,HEAP32[(((tempVarArgs)+(8))>>2)]=$130,HEAP32[(((tempVarArgs)+(16))>>2)]=$133,HEAP32[(((tempVarArgs)+(24))>>2)]=$138,HEAP32[(((tempVarArgs)+(32))>>2)]=$141,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $144=(($attribs)|0);
 var $145=(($cur_attribute)|0);
 var $146=_cut_token($144,0,$145);
 var $147=(($cur_attribute)|0);
 var $148=_skip_to_alnum($147);
 $captr=$148;
 _attribute_dispose($attrib);
 var $149=$3;
 var $150=$captr;
 var $151=_attribute_find($149,$150);
 HEAP32[(($attrib)>>2)]=$151;
 label=14;break;
 case 25: 
 var $153=HEAP32[(($nf)>>2)];
 var $154=_fclose($153);
 var $155=(($path)|0);
 var $156=_fopen($155,29864);
 HEAP32[(($nf)>>2)]=$156;
 var $157=$2;
 var $158=$rname;
 var $159=$noattribs;
 var $160=(($159)&255);
 var $161=$return_rel;
 var $162=(($161+4660)|0);
 var $163=HEAP8[($162)];
 var $164=$return_rel;
 var $165=(($164+4669)|0);
 var $166=HEAP8[($165)];
 var $167=_relation_update_header($157,$158,$160,$163,$166,$nf);
 var $168=HEAP32[(($nf)>>2)];
 var $169=_fclose($168);
 var $170=(($path)|0);
 var $171=_fopen($170,29864);
 HEAP32[(($nf)>>2)]=$171;
 var $172=HEAP32[(($nf)>>2)];
 var $173=_fseek($172,0,2);
 $res=$173;
 var $174=$res;
 _do_debug(9,7728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$174,tempVarArgs)); STACKTOP=tempVarArgs;
 var $175=HEAP32[(($nf)>>2)];
 var $176=_fflush($175);
 $res=$176;
 var $177=$res;
 _do_debug(9,28304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$177,tempVarArgs)); STACKTOP=tempVarArgs;
 var $178=$noattribs;
 var $179=(($178)&255);
 var $180=_relation_create_write_eoh_marker($179,$nf);
 var $181=HEAP32[(($nf)>>2)];
 var $182=_fclose($181);
 $res=$182;
 var $183=$res;
 _do_debug(9,27240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$183,tempVarArgs)); STACKTOP=tempVarArgs;
 var $184=$return_rel;
 $1=$184;
 label=26;break;
 case 26: 
 var $186=$1;
 STACKTOP=sp;return $186;
  default: assert(0, "bad label: " + label);
 }

}


function _create_user_relation($db,$attrib_list,$dest_name,$istemporary,$issystem){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $rtrel=sp;
 var $wattrib=(sp)+(8);
 var $attrib=(sp)+(16);
 var $attribptr;
 var $name=(sp)+(1048);
 var $type=(sp)+(1080);
 var $size=(sp)+(1096);
 var $sptr;
 var $path=(sp)+(1112);
 var $nf=(sp)+(5216);
 var $count;
 var $intsize;
 $2=$db;
 $3=$attrib_list;
 $4=$dest_name;
 $5=$istemporary;
 $6=$issystem;
 var $7=$3;
 var $8=_strlen($7);
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(58,0,26432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=53;break;
 case 3: 
 var $12=$2;
 var $13=$4;
 var $14=$5;
 var $15=$6;
 var $16=_relation_create($12,$13,$14,$15);
 HEAP32[(($rtrel)>>2)]=$16;
 var $17=HEAP32[(($rtrel)>>2)];
 var $18=($17|0)==0;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=53;break;
 case 5: 
 var $21=(($path)|0);
 var $22=HEAP32[(($rtrel)>>2)];
 var $23=(($22+26)|0);
 var $24=(($23)|0);
 var $25=$4;
 var $26=_sprintf($21,9656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$24,HEAP32[(((tempVarArgs)+(8))>>2)]=$25,HEAP32[(((tempVarArgs)+(16))>>2)]=24744,tempVarArgs)); STACKTOP=tempVarArgs;
 var $27=(($path)|0);
 _do_debug(3,20760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 var $28=(($path)|0);
 var $29=_fopen($28,17232);
 HEAP32[(($nf)>>2)]=$29;
 var $30=HEAP8[(37320)];
 var $31=($30&255);
 var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=11;break;}
 case 6: 
 var $34=HEAP32[((37312)>>2)];
 var $35=($34|0)>=3;
 if($35){label=7;break;}else{label=11;break;}
 case 7: 
 var $37=HEAP32[(($nf)>>2)];
 var $38=($37|0)!=0;
 if($38){label=8;break;}else{label=9;break;}
 case 8: 
 var $40=HEAP32[((_stderr)>>2)];
 var $41=(($path)|0);
 _leap_fprintf($40,13368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$41,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 9: 
 var $43=HEAP32[((_stderr)>>2)];
 var $44=(($path)|0);
 _leap_fprintf($43,10528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$44,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $47=HEAP32[(($rtrel)>>2)];
 var $48=(($47+4644)|0);
 HEAP8[($48)]=0;
 $count=0;
 var $49=$3;
 var $50=(($attrib)|0);
 var $51=_cut_to_right_bracket($49,1,1,$50);
 $attribptr=$51;
 label=12;break;
 case 12: 
 var $53=$attribptr;
 var $54=($53|0)!=0;
 if($54){label=13;break;}else{var $60=0;label=14;break;}
 case 13: 
 var $56=$attribptr;
 var $57=_strlen($56);
 var $58=($57|0)!=0;
 var $60=$58;label=14;break;
 case 14: 
 var $60;
 if($60){label=15;break;}else{label=49;break;}
 case 15: 
 var $62=$count;
 var $63=$attribptr;
 _do_debug(7,25384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$62,HEAP32[(((tempVarArgs)+(8))>>2)]=$63,tempVarArgs)); STACKTOP=tempVarArgs;
 var $64=(($attrib)|0);
 var $65=(($name)|0);
 var $66=_copy_to_token($64,24800,$65);
 var $67=($66|0)!=0;
 if($67){label=16;break;}else{label=48;break;}
 case 16: 
 var $69=(($type)|0);
 var $70=_copy_to_token(0,24800,$69);
 var $71=($70|0)!=0;
 if($71){label=17;break;}else{label=48;break;}
 case 17: 
 var $73=(($type)|0);
 _upcase($73);
 var $74=(($size)|0);
 var $75=_copy_to_token(0,24800,$74);
 $sptr=$75;
 var $76=$sptr;
 var $77=($76|0)!=0;
 if($77){label=18;break;}else{label=19;break;}
 case 18: 
 var $79=(($size)|0);
 var $80=_atoi($79);
 $intsize=$80;
 label=20;break;
 case 19: 
 $intsize=-1;
 label=20;break;
 case 20: 
 var $83=$intsize;
 _do_debug(7,24120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$83,tempVarArgs)); STACKTOP=tempVarArgs;
 var $84=(($type)|0);
 var $85=_strcmp($84,23568);
 var $86=($85|0)==0;
 if($86){label=21;break;}else{label=29;break;}
 case 21: 
 var $88=$intsize;
 var $89=($88|0)==-1;
 if($89){label=24;break;}else{label=22;break;}
 case 22: 
 var $91=$intsize;
 var $92=($91|0)>=1;
 if($92){label=23;break;}else{label=25;break;}
 case 23: 
 var $94=$intsize;
 var $95=($94|0)<=255;
 if($95){label=24;break;}else{label=25;break;}
 case 24: 
 var $97=HEAP32[(($rtrel)>>2)];
 var $98=(($name)|0);
 var $99=$intsize;
 var $100=_attribute_build($97,$98,1,$99);
 HEAP32[(($wattrib)>>2)]=$100;
 label=26;break;
 case 25: 
 var $102=HEAP32[(($rtrel)>>2)];
 var $103=(($name)|0);
 var $104=_attribute_build($102,$103,1,255);
 HEAP32[(($wattrib)>>2)]=$104;
 var $105=(($name)|0);
 var $106=$intsize;
 _raise_error(53,0,23192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$105,HEAP32[(((tempVarArgs)+(8))>>2)]=$106,HEAP32[(((tempVarArgs)+(16))>>2)]=255,tempVarArgs)); STACKTOP=tempVarArgs;
 $intsize=255;
 label=26;break;
 case 26: 
 var $108=HEAP32[(($wattrib)>>2)];
 var $109=($108|0)!=0;
 if($109){label=27;break;}else{label=28;break;}
 case 27: 
 var $111=HEAP32[(($wattrib)>>2)];
 var $112=_relation_create_write_attribute($111,$nf);
 label=28;break;
 case 28: 
 label=45;break;
 case 29: 
 var $115=(($type)|0);
 var $116=_strcmp($115,22840);
 var $117=($116|0)==0;
 if($117){label=30;break;}else{label=38;break;}
 case 30: 
 var $119=$intsize;
 var $120=($119|0)==-1;
 if($120){label=33;break;}else{label=31;break;}
 case 31: 
 var $122=$intsize;
 var $123=($122|0)>=1;
 if($123){label=32;break;}else{label=34;break;}
 case 32: 
 var $125=$intsize;
 var $126=($125|0)<=5;
 if($126){label=33;break;}else{label=34;break;}
 case 33: 
 var $128=HEAP32[(($rtrel)>>2)];
 var $129=(($name)|0);
 var $130=$intsize;
 var $131=_attribute_build($128,$129,2,$130);
 HEAP32[(($wattrib)>>2)]=$131;
 label=35;break;
 case 34: 
 var $133=HEAP32[(($rtrel)>>2)];
 var $134=(($name)|0);
 var $135=_attribute_build($133,$134,2,5);
 HEAP32[(($wattrib)>>2)]=$135;
 $intsize=5;
 var $136=(($name)|0);
 var $137=$intsize;
 _raise_error(53,0,23192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$136,HEAP32[(((tempVarArgs)+(8))>>2)]=$137,HEAP32[(((tempVarArgs)+(16))>>2)]=5,tempVarArgs)); STACKTOP=tempVarArgs;
 label=35;break;
 case 35: 
 var $139=HEAP32[(($wattrib)>>2)];
 var $140=($139|0)!=0;
 if($140){label=36;break;}else{label=37;break;}
 case 36: 
 var $142=HEAP32[(($wattrib)>>2)];
 var $143=_relation_create_write_attribute($142,$nf);
 label=37;break;
 case 37: 
 label=44;break;
 case 38: 
 var $146=(($type)|0);
 var $147=_strcmp($146,22592);
 var $148=($147|0)==0;
 if($148){label=39;break;}else{label=42;break;}
 case 39: 
 var $150=HEAP32[(($rtrel)>>2)];
 var $151=(($name)|0);
 var $152=$intsize;
 var $153=_attribute_build($150,$151,3,$152);
 HEAP32[(($wattrib)>>2)]=$153;
 var $154=HEAP32[(($wattrib)>>2)];
 var $155=($154|0)!=0;
 if($155){label=40;break;}else{label=41;break;}
 case 40: 
 var $157=HEAP32[(($wattrib)>>2)];
 var $158=_relation_create_write_attribute($157,$nf);
 label=41;break;
 case 41: 
 label=43;break;
 case 42: 
 var $161=(($type)|0);
 _raise_error(24,0,$161,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $162=$2;
 _relation_remove($162,$rtrel);
 $1=0;
 label=53;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 var $166=HEAP32[(($wattrib)>>2)];
 var $167=($166|0)!=0;
 if($167){label=46;break;}else{label=47;break;}
 case 46: 
 var $169=$count;
 var $170=((($169)+(1))|0);
 $count=$170;
 var $171=$2;
 var $172=HEAP32[(($rtrel)>>2)];
 var $173=(($172)|0);
 var $174=(($173)|0);
 var $175=(($name)|0);
 var $176=(($type)|0);
 var $177=$intsize;
 _ddmaintenance($171,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1912,HEAP32[(((tempVarArgs)+(8))>>2)]=$174,HEAP32[(((tempVarArgs)+(16))>>2)]=$175,HEAP32[(((tempVarArgs)+(24))>>2)]=$176,HEAP32[(((tempVarArgs)+(32))>>2)]=$177,tempVarArgs)); STACKTOP=tempVarArgs;
 _attribute_dispose($wattrib);
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $180=$3;
 var $181=(($attrib)|0);
 var $182=_cut_to_right_bracket($180,1,1,$181);
 $attribptr=$182;
 label=12;break;
 case 49: 
 var $184=$count;
 var $185=((($184)-(1))|0);
 _do_debug(3,22192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$185,tempVarArgs)); STACKTOP=tempVarArgs;
 var $186=HEAP32[(($nf)>>2)];
 var $187=_fclose($186);
 var $188=(($path)|0);
 var $189=_fopen($188,29864);
 HEAP32[(($nf)>>2)]=$189;
 var $190=$2;
 var $191=$4;
 var $192=$count;
 var $193=(($192)&255);
 var $194=HEAP32[(($rtrel)>>2)];
 var $195=(($194+4660)|0);
 var $196=HEAP8[($195)];
 var $197=HEAP32[(($rtrel)>>2)];
 var $198=(($197+4669)|0);
 var $199=HEAP8[($198)];
 var $200=_relation_update_header($190,$191,$193,$196,$199,$nf);
 var $201=HEAP32[(($nf)>>2)];
 var $202=_fseek($201,0,2);
 var $203=HEAP32[(($nf)>>2)];
 var $204=_fflush($203);
 var $205=$count;
 var $206=(($205)&255);
 var $207=_relation_create_write_eoh_marker($206,$nf);
 var $208=HEAP32[(($nf)>>2)];
 var $209=_fclose($208);
 label=50;break;
 case 50: 
 var $211=HEAP8[(37256)];
 var $212=($211&255);
 var $213=($212|0)==0;
 if($213){label=51;break;}else{label=52;break;}
 case 51: 
 var $215=$2;
 var $216=HEAP32[(($rtrel)>>2)];
 var $217=(($216)|0);
 var $218=(($217)|0);
 _remove_tempfile($215,$218);
 var $219=HEAP32[(($rtrel)>>2)];
 var $220=(($219+4660)|0);
 HEAP8[($220)]=0;
 label=52;break;
 case 52: 
 var $222=HEAP32[(($rtrel)>>2)];
 $1=$222;
 label=53;break;
 case 53: 
 var $224=$1;
 STACKTOP=sp;return $224;
  default: assert(0, "bad label: " + label);
 }

}


function _create_duplicate_rtn_relation($db,$rel,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $rtrel;
 var $rname;
 var $rel_name=sp;
 var $path=(sp)+(32);
 var $attrdescr=(sp)+(4128);
 var $attr=(sp)+(4136);
 var $count;
 var $ctuple=(sp)+(4144);
 var $anum=(sp)+(4152);
 var $nf=(sp)+(4160);
 $2=$db;
 $3=$rel;
 $4=$destname;
 var $5=$rel_name;
 _memset($5, 0, 26)|0;
 var $6=$path;
 _memset($6, 0, 4096)|0;
 var $7=$4;
 var $8=_strlen($7);
 var $9=($8|0)==0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($rel_name)|0);
 var $12=_generate_random_string(6,$11);
 $rname=$12;
 label=4;break;
 case 3: 
 var $14=$4;
 $rname=$14;
 label=4;break;
 case 4: 
 var $16=$2;
 var $17=$rname;
 var $18=_relation_create($16,$17,1,0);
 $rtrel=$18;
 var $19=$rtrel;
 var $20=($19|0)==0;
 if($20){label=6;break;}else{label=5;break;}
 case 5: 
 var $22=$3;
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 $1=0;
 label=30;break;
 case 7: 
 var $26=(($path)|0);
 var $27=$rtrel;
 var $28=(($27+26)|0);
 var $29=(($28)|0);
 var $30=$rname;
 var $31=_sprintf($26,9656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$29,HEAP32[(((tempVarArgs)+(8))>>2)]=$30,HEAP32[(((tempVarArgs)+(16))>>2)]=24744,tempVarArgs)); STACKTOP=tempVarArgs;
 var $32=(($path)|0);
 _do_debug(3,20760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,tempVarArgs)); STACKTOP=tempVarArgs;
 var $33=(($path)|0);
 var $34=_fopen($33,17232);
 HEAP32[(($nf)>>2)]=$34;
 var $35=HEAP8[(37320)];
 var $36=($35&255);
 var $37=($36|0)!=0;
 if($37){label=8;break;}else{label=13;break;}
 case 8: 
 var $39=HEAP32[((37312)>>2)];
 var $40=($39|0)>=2;
 if($40){label=9;break;}else{label=13;break;}
 case 9: 
 var $42=HEAP32[(($nf)>>2)];
 var $43=($42|0)!=0;
 if($43){label=10;break;}else{label=11;break;}
 case 10: 
 var $45=HEAP32[((_stderr)>>2)];
 var $46=(($path)|0);
 _leap_fprintf($45,13368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$46,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 11: 
 var $48=HEAP32[((_stderr)>>2)];
 var $49=(($path)|0);
 _leap_fprintf($48,10528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $52=$rtrel;
 var $53=(($52+4644)|0);
 HEAP8[($53)]=0;
 var $54=$3;
 var $55=_relation_attribute_readfirst($54,$ctuple,$anum);
 HEAP32[(($attr)>>2)]=$55;
 $count=0;
 label=14;break;
 case 14: 
 var $57=HEAP32[(($attr)>>2)];
 var $58=($57|0)!=0;
 if($58){label=15;break;}else{label=28;break;}
 case 15: 
 var $60=HEAP32[(($nf)>>2)];
 var $61=_fseek($60,0,2);
 var $62=HEAP32[(($attr)>>2)];
 var $63=_relation_create_write_attribute($62,$nf);
 var $64=$count;
 var $65=((($64)+(1))|0);
 $count=$65;
 var $66=$2;
 var $67=(($66+4136)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68>>>0)>=5;
 if($69){label=16;break;}else{label=24;break;}
 case 16: 
 var $71=HEAP8[(16)];
 var $72=($71&255);
 var $73=($72|0)==1;
 if($73){label=17;break;}else{label=22;break;}
 case 17: 
 var $75=HEAP8[(47136)];
 var $76=($75&255);
 var $77=($76|0)!=1;
 if($77){label=18;break;}else{label=22;break;}
 case 18: 
 var $79=$2;
 var $80=_database_name($79);
 var $81=_strcmp($80,5320);
 var $82=($81|0)!=0;
 if($82){label=19;break;}else{label=22;break;}
 case 19: 
 var $84=$rtrel;
 var $85=(($84)|0);
 var $86=(($85)|0);
 var $87=HEAP8[($86)];
 var $88=(($87<<24)>>24);
 var $89=($88|0)==122;
 if($89){label=20;break;}else{label=22;break;}
 case 20: 
 var $91=$rtrel;
 var $92=(($91)|0);
 var $93=(($92+1)|0);
 var $94=HEAP8[($93)];
 var $95=(($94<<24)>>24);
 var $96=($95|0)==122;
 if($96){label=21;break;}else{label=22;break;}
 case 21: 
 var $98=HEAP32[((37152)>>2)];
 var $99=$rtrel;
 var $100=(($99)|0);
 var $101=(($100)|0);
 var $102=HEAP32[(($attr)>>2)];
 var $103=(($102)|0);
 var $104=(($103)|0);
 var $105=(($attrdescr)|0);
 var $106=HEAP32[(($attr)>>2)];
 var $107=(($106+48)|0);
 var $108=HEAP8[($107)];
 var $109=_get_attribute_info($105,$108);
 var $110=HEAP32[(($attr)>>2)];
 var $111=(($110+52)|0);
 var $112=HEAP32[(($111)>>2)];
 _ddmaintenance($98,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1912,HEAP32[(((tempVarArgs)+(8))>>2)]=$101,HEAP32[(((tempVarArgs)+(16))>>2)]=$104,HEAP32[(((tempVarArgs)+(24))>>2)]=$109,HEAP32[(((tempVarArgs)+(32))>>2)]=$112,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 22: 
 var $114=$2;
 var $115=$rtrel;
 var $116=(($115)|0);
 var $117=(($116)|0);
 var $118=HEAP32[(($attr)>>2)];
 var $119=(($118)|0);
 var $120=(($119)|0);
 var $121=(($attrdescr)|0);
 var $122=HEAP32[(($attr)>>2)];
 var $123=(($122+48)|0);
 var $124=HEAP8[($123)];
 var $125=_get_attribute_info($121,$124);
 var $126=HEAP32[(($attr)>>2)];
 var $127=(($126+52)|0);
 var $128=HEAP32[(($127)>>2)];
 _ddmaintenance($114,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1912,HEAP32[(((tempVarArgs)+(8))>>2)]=$117,HEAP32[(((tempVarArgs)+(16))>>2)]=$120,HEAP32[(((tempVarArgs)+(24))>>2)]=$125,HEAP32[(((tempVarArgs)+(32))>>2)]=$128,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $131=$count;
 var $132=($131>>>0)>=64;
 if($132){label=25;break;}else{label=26;break;}
 case 25: 
 _raise_error(11,0,21880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=64,tempVarArgs)); STACKTOP=tempVarArgs;
 _attribute_dispose($attr);
 label=27;break;
 case 26: 
 var $135=$3;
 var $136=HEAP32[(($attr)>>2)];
 var $137=_relation_attribute_readnext($135,$ctuple,$136,$anum);
 HEAP32[(($attr)>>2)]=$137;
 label=27;break;
 case 27: 
 label=14;break;
 case 28: 
 var $140=HEAP32[(($nf)>>2)];
 var $141=_fclose($140);
 var $142=(($path)|0);
 var $143=_fopen($142,29864);
 HEAP32[(($nf)>>2)]=$143;
 var $144=$2;
 var $145=$rname;
 var $146=$count;
 var $147=(($146)&255);
 var $148=$rtrel;
 var $149=(($148+4660)|0);
 var $150=HEAP8[($149)];
 var $151=$rtrel;
 var $152=(($151+4669)|0);
 var $153=HEAP8[($152)];
 var $154=_relation_update_header($144,$145,$147,$150,$153,$nf);
 var $155=HEAP32[(($nf)>>2)];
 var $156=_fseek($155,0,2);
 var $157=HEAP32[(($nf)>>2)];
 var $158=_fflush($157);
 var $159=$count;
 var $160=(($159)&255);
 var $161=_relation_create_write_eoh_marker($160,$nf);
 var $162=HEAP32[(($nf)>>2)];
 var $163=_fclose($162);
 _close_tuple($ctuple,2);
 label=29;break;
 case 29: 
 var $165=$rtrel;
 $1=$165;
 label=30;break;
 case 30: 
 var $167=$1;
 STACKTOP=sp;return $167;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_project($db,$rel,$attribute_list,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+34600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $rtrel;
 var $HT=sp;
 var $att_list=(sp)+(8);
 var $attrib;
 var $tuple_string=(sp)+(1672);
 var $attribmkr;
 var $found_string=(sp)+(17992);
 var $success=(sp)+(34312);
 var $att=(sp)+(34320);
 var $ta=(sp)+(34328);
 var $bta;
 var $nt=(sp)+(34336);
 var $c;
 var $noattributes;
 var $reference=(sp)+(34344);
 var $reference_position;
 var $readresult;
 $2=$db;
 $3=$rel;
 $4=$attribute_list;
 $5=$destname;
 $readresult=0;
 _do_debug(1,21424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 var $9=$5;
 var $10=_project_create_rtn_relation($6,$7,$8,$9);
 $rtrel=$10;
 var $11=$rtrel;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 var $14=$3;
 var $15=($14|0)==0;
 if($15){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=45;break;
 case 4: 
 $c=0;
 label=5;break;
 case 5: 
 var $19=$c;
 var $20=($19>>>0)<64;
 if($20){label=6;break;}else{label=8;break;}
 case 6: 
 var $22=$c;
 var $23=(($reference+($22<<2))|0);
 HEAP32[(($23)>>2)]=0;
 label=7;break;
 case 7: 
 var $25=$c;
 var $26=((($25)+(1))|0);
 $c=$26;
 label=5;break;
 case 8: 
 var $28=_hashing_create();
 HEAP32[(($HT)>>2)]=$28;
 var $29=(($att_list)|0);
 var $30=$4;
 var $31=_sprintf($29,21080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=44,HEAP32[(((tempVarArgs)+(8))>>2)]=$30,HEAP32[(((tempVarArgs)+(16))>>2)]=44,tempVarArgs)); STACKTOP=tempVarArgs;
 var $32=(($att_list)|0);
 _do_debug(3,20784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,tempVarArgs)); STACKTOP=tempVarArgs;
 var $33=(($att_list)|0);
 var $34=_strchr($33,44);
 $attrib=$34;
 var $35=$attrib;
 var $36=(($35+1)|0);
 $attrib=$36;
 var $37=$attrib;
 _strip_leading_spaces($37);
 var $38=$attrib;
 var $39=_strchr($38,44);
 $attribmkr=$39;
 var $40=$attribmkr;
 HEAP8[($40)]=0;
 var $41=$3;
 var $42=$attrib;
 var $43=_attribute_find($41,$42);
 HEAP32[(($att)>>2)]=$43;
 var $44=HEAP32[(($att)>>2)];
 var $45=($44|0)!=0;
 if($45){label=9;break;}else{label=42;break;}
 case 9: 
 _attribute_dispose($att);
 var $47=$3;
 var $48=_tuple_readfirst($47,1,0);
 HEAP32[(($ta)>>2)]=$48;
 var $49=HEAP32[(($ta)>>2)];
 $bta=$49;
 $reference_position=0;
 label=10;break;
 case 10: 
 var $51=HEAP32[(($ta)>>2)];
 var $52=($51|0)!=0;
 if($52){label=11;break;}else{var $57=0;label=12;break;}
 case 11: 
 var $54=$attrib;
 var $55=($54|0)!=0;
 var $57=$55;label=12;break;
 case 12: 
 var $57;
 if($57){label=13;break;}else{label=25;break;}
 case 13: 
 $c=0;
 var $59=$3;
 var $60=(($59+4644)|0);
 var $61=HEAP8[($60)];
 var $62=($61&255);
 _do_debug(3,20360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$62,tempVarArgs)); STACKTOP=tempVarArgs;
 var $63=$attrib;
 _do_debug(3,20072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$63,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 var $65=$c;
 var $66=$3;
 var $67=(($66+4644)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=($65>>>0)<($69>>>0);
 if($70){label=15;break;}else{var $86=0;label=16;break;}
 case 15: 
 var $72=$attrib;
 var $73=$c;
 var $74=HEAP32[(($ta)>>2)];
 var $75=(($74)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+($73<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80)|0);
 var $82=(($81)|0);
 var $83=_strcmp($72,$82);
 var $84=($83|0)!=0;
 var $86=$84;label=16;break;
 case 16: 
 var $86;
 if($86){label=17;break;}else{label=18;break;}
 case 17: 
 var $88=$c;
 var $89=((($88)+(1))|0);
 $c=$89;
 label=14;break;
 case 18: 
 var $91=$c;
 _do_debug(5,19776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$91,tempVarArgs)); STACKTOP=tempVarArgs;
 var $92=$c;
 var $93=HEAP32[(($ta)>>2)];
 var $94=(($93)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+($92<<2))|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)!=0;
 if($100){label=19;break;}else{label=20;break;}
 case 19: 
 var $102=$c;
 var $103=$reference_position;
 var $104=(($reference+($103<<2))|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=$reference_position;
 var $106=((($105)+(1))|0);
 $reference_position=$106;
 label=21;break;
 case 20: 
 var $108=$attrib;
 _raise_error(5,0,19504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$108,tempVarArgs)); STACKTOP=tempVarArgs;
 _close_tuple($ta,2);
 $1=0;
 label=45;break;
 case 21: 
 var $110=$attribmkr;
 $attrib=$110;
 var $111=$attrib;
 var $112=(($111+1)|0);
 $attrib=$112;
 var $113=$attrib;
 var $114=_strchr($113,44);
 $attribmkr=$114;
 var $115=$attribmkr;
 var $116=($115|0)!=0;
 if($116){label=22;break;}else{label=23;break;}
 case 22: 
 var $118=$attribmkr;
 HEAP8[($118)]=0;
 var $119=$attrib;
 _strip_leading_spaces($119);
 label=24;break;
 case 23: 
 $attrib=0;
 label=24;break;
 case 24: 
 label=10;break;
 case 25: 
 var $123=$rtrel;
 var $124=_tuple_prepare($123);
 HEAP32[(($nt)>>2)]=$124;
 var $125=HEAP32[(($nt)>>2)];
 var $126=($125|0)!=0;
 if($126){label=26;break;}else{label=40;break;}
 case 26: 
 var $128=$reference_position;
 $noattributes=$128;
 label=27;break;
 case 27: 
 var $130=HEAP32[(($ta)>>2)];
 var $131=($130|0)!=0;
 if($131){label=28;break;}else{var $136=0;label=29;break;}
 case 28: 
 var $133=$readresult;
 var $134=($133|0)!=-1;
 var $136=$134;label=29;break;
 case 29: 
 var $136;
 if($136){label=30;break;}else{label=39;break;}
 case 30: 
 $reference_position=0;
 label=31;break;
 case 31: 
 var $139=$reference_position;
 var $140=$noattributes;
 var $141=($139>>>0)<($140>>>0);
 if($141){label=32;break;}else{label=33;break;}
 case 32: 
 var $143=$reference_position;
 var $144=HEAP32[(($nt)>>2)];
 var $145=(($144)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+($143<<2))|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+8)|0);
 var $150=(($149)|0);
 var $151=$reference_position;
 var $152=(($reference+($151<<2))|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=HEAP32[(($ta)>>2)];
 var $155=(($154)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+($153<<2))|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+8)|0);
 var $160=(($159)|0);
 var $161=_strcpy($150,$160);
 var $162=$reference_position;
 var $163=((($162)+(1))|0);
 $reference_position=$163;
 label=31;break;
 case 33: 
 var $165=HEAP32[(($nt)>>2)];
 var $166=(($tuple_string)|0);
 _tuple_to_string($165,$166);
 var $167=(($tuple_string)|0);
 _do_debug(5,19184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$167,tempVarArgs)); STACKTOP=tempVarArgs;
 var $168=HEAP32[(($HT)>>2)];
 var $169=(($tuple_string)|0);
 var $170=(($found_string)|0);
 _hashing_retrieve($168,$169,$170,$success);
 var $171=HEAP8[($success)];
 var $172=(($171<<24)>>24)!=0;
 if($172){label=35;break;}else{label=34;break;}
 case 34: 
 var $174=HEAP32[(($HT)>>2)];
 var $175=(($tuple_string)|0);
 _hashing_insert($174,$175,54);
 var $176=HEAP32[(($nt)>>2)];
 var $177=_tuple_append($176);
 label=38;break;
 case 35: 
 var $179=HEAP8[(37320)];
 var $180=(($179<<24)>>24)!=0;
 if($180){label=36;break;}else{label=37;break;}
 case 36: 
 var $182=(($tuple_string)|0);
 _do_debug(3,18744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$182,tempVarArgs)); STACKTOP=tempVarArgs;
 label=37;break;
 case 37: 
 label=38;break;
 case 38: 
 var $185=_tuple_readnext($ta,1);
 HEAP32[(($ta)>>2)]=$185;
 label=27;break;
 case 39: 
 _close_tuple($nt,2);
 label=41;break;
 case 40: 
 var $188=HEAP32[((_stderr)>>2)];
 _leap_fprintf($188,18352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=41;break;
 case 41: 
 _close_tuple($ta,2);
 label=43;break;
 case 42: 
 var $191=$attrib;
 _raise_error(5,0,$191,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 _hashing_terminate($HT);
 _do_debug(1,18040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $194=$rtrel;
 $1=$194;
 label=45;break;
 case 45: 
 var $196=$1;
 STACKTOP=sp;return $196;
  default: assert(0, "bad label: " + label);
 }

}


function _populate($string_array,$rel){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $attr;
 var $count;
 var $ctuple=sp;
 var $anum=(sp)+(8);
 $1=$string_array;
 $2=$rel;
 $count=0;
 var $3=$2;
 var $4=_relation_attribute_readfirst($3,$ctuple,$anum);
 $attr=$4;
 label=2;break;
 case 2: 
 var $6=$attr;
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$count;
 var $10=$1;
 var $11=(($10+((($9)*(255))&-1))|0);
 var $12=(($11)|0);
 var $13=$attr;
 var $14=(($13)|0);
 var $15=(($14)|0);
 var $16=_strcpy($12,$15);
 var $17=$attr;
 var $18=_relation_attribute_readnext(0,$ctuple,$17,$anum);
 $attr=$18;
 var $19=$count;
 var $20=((($19)+(1))|0);
 $count=$20;
 label=2;break;
 case 4: 
 _close_tuple($ctuple,2);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_is_union_compatible($rel1,$rel2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32640)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $result;
 var $noattributes;
 var $idx1;
 var $idx2;
 var $r1=sp;
 var $r2=(sp)+(16320);
 $1=$rel1;
 $2=$rel2;
 $result=0;
 var $3=$1;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=18;break;}
 case 2: 
 var $6=$2;
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=18;break;}
 case 3: 
 var $9=$1;
 var $10=(($9+4644)|0);
 var $11=HEAP8[($10)];
 var $12=($11&255);
 var $13=$2;
 var $14=(($13+4644)|0);
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($12|0)==($16|0);
 if($17){label=4;break;}else{label=18;break;}
 case 4: 
 var $19=$1;
 var $20=(($19+4644)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 $noattributes=$22;
 var $23=(($r1)|0);
 var $24=$1;
 _populate($23,$24);
 var $25=(($r2)|0);
 var $26=$2;
 _populate($25,$26);
 $idx1=0;
 $idx2=0;
 label=5;break;
 case 5: 
 var $28=$result;
 var $29=($28&255);
 var $30=($29|0)==0;
 if($30){label=6;break;}else{var $36=0;label=7;break;}
 case 6: 
 var $32=$idx1;
 var $33=$noattributes;
 var $34=($32>>>0)<($33>>>0);
 var $36=$34;label=7;break;
 case 7: 
 var $36;
 if($36){label=8;break;}else{label=17;break;}
 case 8: 
 label=9;break;
 case 9: 
 var $39=$idx1;
 var $40=(($r1+((($39)*(255))&-1))|0);
 var $41=(($40)|0);
 var $42=$idx2;
 var $43=(($r2+((($42)*(255))&-1))|0);
 var $44=(($43)|0);
 var $45=_strcmp($41,$44);
 var $46=($45|0)!=0;
 if($46){label=10;break;}else{var $52=0;label=11;break;}
 case 10: 
 var $48=$idx2;
 var $49=$noattributes;
 var $50=($48>>>0)<($49>>>0);
 var $52=$50;label=11;break;
 case 11: 
 var $52;
 if($52){label=12;break;}else{label=13;break;}
 case 12: 
 var $54=$idx2;
 var $55=((($54)+(1))|0);
 $idx2=$55;
 label=9;break;
 case 13: 
 var $57=$idx2;
 var $58=$noattributes;
 var $59=($57>>>0)>($58>>>0);
 if($59){label=14;break;}else{label=15;break;}
 case 14: 
 $result=1;
 label=16;break;
 case 15: 
 var $62=$idx1;
 var $63=((($62)+(1))|0);
 $idx1=$63;
 label=16;break;
 case 16: 
 label=5;break;
 case 17: 
 var $66=$result;
 var $67=(($66<<24)>>24)!=0;
 var $68=$67^1;
 var $69=($68&1);
 var $70=(($69)&255);
 $result=$70;
 label=18;break;
 case 18: 
 var $72=$result;
 STACKTOP=sp;return $72;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_union($db,$rel1,$rel2,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $rtrel;
 var $counter;
 var $ct=sp;
 var $nt=(sp)+(8);
 var $oct=(sp)+(16);
 $2=$db;
 $3=$rel1;
 $4=$rel2;
 $5=$destname;
 var $6=$3;
 var $7=$4;
 var $8=_rl_is_union_compatible($6,$7);
 var $9=(($8<<24)>>24)!=0;
 if($9){label=2;break;}else{label=18;break;}
 case 2: 
 var $11=$2;
 var $12=$4;
 var $13=$5;
 var $14=_create_duplicate_rtn_relation($11,$12,$13);
 $rtrel=$14;
 var $15=$rtrel;
 var $16=($15|0)!=0;
 if($16){label=3;break;}else{label=16;break;}
 case 3: 
 var $18=$rtrel;
 var $19=_tuple_prepare($18);
 HEAP32[(($nt)>>2)]=$19;
 var $20=$3;
 var $21=_tuple_readfirst($20,1,0);
 HEAP32[(($ct)>>2)]=$21;
 var $22=HEAP32[(($ct)>>2)];
 HEAP32[(($oct)>>2)]=$22;
 label=4;break;
 case 4: 
 var $24=HEAP32[(($ct)>>2)];
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=9;break;}
 case 5: 
 $counter=0;
 label=6;break;
 case 6: 
 var $28=$counter;
 var $29=HEAP32[(($ct)>>2)];
 var $30=(($29+8)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=($28>>>0)<($32>>>0);
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=$counter;
 var $36=HEAP32[(($nt)>>2)];
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+($35<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=(($41)|0);
 var $43=$counter;
 var $44=HEAP32[(($ct)>>2)];
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+($43<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+8)|0);
 var $50=(($49)|0);
 var $51=_strcpy($42,$50);
 var $52=$counter;
 var $53=((($52)+(1))|0);
 $counter=$53;
 label=6;break;
 case 8: 
 var $55=HEAP32[(($nt)>>2)];
 var $56=_tuple_append($55);
 var $57=_tuple_readnext($ct,0);
 label=4;break;
 case 9: 
 _close_tuple($oct,2);
 var $59=$4;
 var $60=_tuple_readfirst($59,1,0);
 HEAP32[(($ct)>>2)]=$60;
 var $61=HEAP32[(($ct)>>2)];
 HEAP32[(($oct)>>2)]=$61;
 label=10;break;
 case 10: 
 var $63=HEAP32[(($ct)>>2)];
 var $64=($63|0)!=0;
 if($64){label=11;break;}else{label=15;break;}
 case 11: 
 $counter=0;
 label=12;break;
 case 12: 
 var $67=$counter;
 var $68=HEAP32[(($ct)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP8[($69)];
 var $71=($70&255);
 var $72=($67>>>0)<($71>>>0);
 if($72){label=13;break;}else{label=14;break;}
 case 13: 
 var $74=$counter;
 var $75=HEAP32[(($nt)>>2)];
 var $76=(($75)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+($74<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+8)|0);
 var $81=(($80)|0);
 var $82=$counter;
 var $83=HEAP32[(($ct)>>2)];
 var $84=(($83)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+($82<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=(($88)|0);
 var $90=_strcpy($81,$89);
 var $91=$counter;
 var $92=((($91)+(1))|0);
 $counter=$92;
 label=12;break;
 case 14: 
 var $94=HEAP32[(($nt)>>2)];
 var $95=_tuple_append($94);
 var $96=_tuple_readnext($ct,0);
 label=10;break;
 case 15: 
 label=17;break;
 case 16: 
 $1=0;
 label=20;break;
 case 17: 
 _close_tuple($nt,2);
 _close_tuple($oct,2);
 label=19;break;
 case 18: 
 $rtrel=0;
 var $101=$3;
 var $102=(($101)|0);
 var $103=(($102)|0);
 var $104=$4;
 var $105=(($104)|0);
 var $106=(($105)|0);
 _raise_error(7,0,17592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$103,HEAP32[(((tempVarArgs)+(8))>>2)]=$106,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 19: 
 var $108=$rtrel;
 $1=$108;
 label=20;break;
 case 20: 
 var $110=$1;
 STACKTOP=sp;return $110;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_intersect($db,$rel1,$rel2,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $rtrel;
 var $s=sp;
 var $result=(sp)+(16320);
 var $success=(sp)+(32640);
 var $counter;
 var $htable=(sp)+(32648);
 var $ct=(sp)+(32656);
 var $nt=(sp)+(32664);
 $2=$db;
 $3=$rel1;
 $4=$rel2;
 $5=$destname;
 var $6=$3;
 var $7=$4;
 var $8=_rl_is_union_compatible($6,$7);
 var $9=(($8<<24)>>24)!=0;
 if($9){label=2;break;}else{label=20;break;}
 case 2: 
 var $11=$2;
 var $12=$4;
 var $13=$5;
 var $14=_create_duplicate_rtn_relation($11,$12,$13);
 $rtrel=$14;
 var $15=$rtrel;
 var $16=($15|0)!=0;
 if($16){label=3;break;}else{label=18;break;}
 case 3: 
 var $18=$rtrel;
 var $19=_tuple_prepare($18);
 HEAP32[(($nt)>>2)]=$19;
 var $20=_hashing_create();
 HEAP32[(($htable)>>2)]=$20;
 var $21=$3;
 var $22=_tuple_readfirst($21,1,0);
 HEAP32[(($ct)>>2)]=$22;
 label=4;break;
 case 4: 
 var $24=HEAP32[(($ct)>>2)];
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=9;break;}
 case 5: 
 $counter=0;
 label=6;break;
 case 6: 
 var $28=$counter;
 var $29=HEAP32[(($ct)>>2)];
 var $30=(($29+8)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=($28>>>0)<($32>>>0);
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=$counter;
 var $36=HEAP32[(($nt)>>2)];
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+($35<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=(($41)|0);
 var $43=$counter;
 var $44=HEAP32[(($ct)>>2)];
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+($43<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+8)|0);
 var $50=(($49)|0);
 var $51=_strcpy($42,$50);
 var $52=$counter;
 var $53=((($52)+(1))|0);
 $counter=$53;
 label=6;break;
 case 8: 
 var $55=HEAP32[(($nt)>>2)];
 var $56=(($s)|0);
 _tuple_to_string($55,$56);
 var $57=HEAP32[(($htable)>>2)];
 var $58=(($s)|0);
 _hashing_insert($57,$58,54);
 var $59=_tuple_readnext($ct,1);
 label=4;break;
 case 9: 
 var $61=$4;
 var $62=_tuple_readfirst($61,1,0);
 HEAP32[(($ct)>>2)]=$62;
 label=10;break;
 case 10: 
 var $64=HEAP32[(($ct)>>2)];
 var $65=($64|0)!=0;
 if($65){label=11;break;}else{label=17;break;}
 case 11: 
 $counter=0;
 var $67=HEAP32[(($ct)>>2)];
 var $68=(($s)|0);
 _tuple_to_string($67,$68);
 HEAP8[($success)]=0;
 var $69=HEAP32[(($htable)>>2)];
 var $70=(($s)|0);
 var $71=(($result)|0);
 _hashing_retrieve($69,$70,$71,$success);
 var $72=HEAP8[($success)];
 var $73=(($72<<24)>>24)!=0;
 if($73){label=12;break;}else{label=16;break;}
 case 12: 
 label=13;break;
 case 13: 
 var $76=$counter;
 var $77=HEAP32[(($ct)>>2)];
 var $78=(($77+8)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=($76>>>0)<($80>>>0);
 if($81){label=14;break;}else{label=15;break;}
 case 14: 
 var $83=$counter;
 var $84=HEAP32[(($nt)>>2)];
 var $85=(($84)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+($83<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+8)|0);
 var $90=(($89)|0);
 var $91=$counter;
 var $92=HEAP32[(($ct)>>2)];
 var $93=(($92)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+($91<<2))|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+8)|0);
 var $98=(($97)|0);
 var $99=_strcpy($90,$98);
 var $100=$counter;
 var $101=((($100)+(1))|0);
 $counter=$101;
 label=13;break;
 case 15: 
 var $103=HEAP32[(($nt)>>2)];
 var $104=_tuple_append($103);
 label=16;break;
 case 16: 
 var $106=_tuple_readnext($ct,1);
 label=10;break;
 case 17: 
 _close_tuple($nt,2);
 _hashing_terminate($htable);
 label=19;break;
 case 18: 
 $1=0;
 label=22;break;
 case 19: 
 label=21;break;
 case 20: 
 $rtrel=0;
 var $111=$3;
 var $112=(($111)|0);
 var $113=(($112)|0);
 var $114=$4;
 var $115=(($114)|0);
 var $116=(($115)|0);
 _raise_error(7,0,17592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$113,HEAP32[(((tempVarArgs)+(8))>>2)]=$116,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 21: 
 var $118=$rtrel;
 $1=$118;
 label=22;break;
 case 22: 
 var $120=$1;
 STACKTOP=sp;return $120;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_difference($db,$rel1,$rel2,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $rtrel;
 var $s=sp;
 var $result=(sp)+(16320);
 var $success=(sp)+(32640);
 var $counter;
 var $htable=(sp)+(32648);
 var $ct=(sp)+(32656);
 var $nt=(sp)+(32664);
 $2=$db;
 $3=$rel1;
 $4=$rel2;
 $5=$destname;
 _do_debug(1,17248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$3;
 var $7=$4;
 var $8=_rl_is_union_compatible($6,$7);
 var $9=(($8<<24)>>24)!=0;
 if($9){label=2;break;}else{label=26;break;}
 case 2: 
 var $11=$2;
 var $12=$4;
 var $13=$5;
 var $14=_create_duplicate_rtn_relation($11,$12,$13);
 $rtrel=$14;
 var $15=$rtrel;
 var $16=($15|0)!=0;
 if($16){label=3;break;}else{label=24;break;}
 case 3: 
 var $18=$rtrel;
 var $19=_tuple_prepare($18);
 HEAP32[(($nt)>>2)]=$19;
 var $20=_hashing_create();
 HEAP32[(($htable)>>2)]=$20;
 var $21=$4;
 var $22=_tuple_readfirst($21,1,0);
 HEAP32[(($ct)>>2)]=$22;
 label=4;break;
 case 4: 
 var $24=HEAP32[(($ct)>>2)];
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=9;break;}
 case 5: 
 $counter=0;
 label=6;break;
 case 6: 
 var $28=$counter;
 var $29=HEAP32[(($ct)>>2)];
 var $30=(($29+8)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=($28>>>0)<($32>>>0);
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=$counter;
 var $36=HEAP32[(($nt)>>2)];
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+($35<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=(($41)|0);
 var $43=$counter;
 var $44=HEAP32[(($ct)>>2)];
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+($43<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+8)|0);
 var $50=(($49)|0);
 var $51=_strcpy($42,$50);
 var $52=$counter;
 var $53=((($52)+(1))|0);
 $counter=$53;
 label=6;break;
 case 8: 
 var $55=HEAP32[(($nt)>>2)];
 var $56=(($s)|0);
 _tuple_to_string($55,$56);
 var $57=HEAP32[(($htable)>>2)];
 var $58=(($s)|0);
 _hashing_insert($57,$58,54);
 var $59=_tuple_readnext($ct,1);
 label=4;break;
 case 9: 
 var $61=$3;
 var $62=_tuple_readfirst($61,1,0);
 HEAP32[(($ct)>>2)]=$62;
 label=10;break;
 case 10: 
 var $64=HEAP32[(($ct)>>2)];
 var $65=($64|0)!=0;
 if($65){label=11;break;}else{label=23;break;}
 case 11: 
 $counter=0;
 var $67=HEAP32[(($ct)>>2)];
 var $68=(($s)|0);
 _tuple_to_string($67,$68);
 HEAP8[($success)]=0;
 var $69=HEAP32[(($htable)>>2)];
 var $70=(($s)|0);
 var $71=(($result)|0);
 _hashing_retrieve($69,$70,$71,$success);
 var $72=HEAP8[(37320)];
 var $73=($72&255);
 var $74=($73|0)!=0;
 if($74){label=12;break;}else{label=17;break;}
 case 12: 
 var $76=HEAP32[((37312)>>2)];
 var $77=($76|0)>=3;
 if($77){label=13;break;}else{label=17;break;}
 case 13: 
 var $79=HEAP8[($success)];
 var $80=(($79<<24)>>24)!=0;
 if($80){label=14;break;}else{label=15;break;}
 case 14: 
 var $82=(($s)|0);
 _leap_printf(16872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$82,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 15: 
 var $84=(($s)|0);
 _leap_printf(16624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$84,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $87=HEAP8[($success)];
 var $88=(($87<<24)>>24)!=0;
 if($88){label=22;break;}else{label=18;break;}
 case 18: 
 label=19;break;
 case 19: 
 var $91=$counter;
 var $92=HEAP32[(($ct)>>2)];
 var $93=(($92+8)|0);
 var $94=HEAP8[($93)];
 var $95=($94&255);
 var $96=($91>>>0)<($95>>>0);
 if($96){label=20;break;}else{label=21;break;}
 case 20: 
 var $98=$counter;
 var $99=HEAP32[(($nt)>>2)];
 var $100=(($99)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+($98<<2))|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+8)|0);
 var $105=(($104)|0);
 var $106=$counter;
 var $107=HEAP32[(($ct)>>2)];
 var $108=(($107)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+($106<<2))|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+8)|0);
 var $113=(($112)|0);
 var $114=_strcpy($105,$113);
 var $115=$counter;
 var $116=((($115)+(1))|0);
 $counter=$116;
 label=19;break;
 case 21: 
 var $118=HEAP32[(($nt)>>2)];
 var $119=_tuple_append($118);
 label=22;break;
 case 22: 
 var $121=_tuple_readnext($ct,1);
 label=10;break;
 case 23: 
 _close_tuple($nt,2);
 _hashing_terminate($htable);
 label=25;break;
 case 24: 
 _do_debug(1,16296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=28;break;
 case 25: 
 label=27;break;
 case 26: 
 $rtrel=0;
 var $126=$3;
 var $127=(($126)|0);
 var $128=(($127)|0);
 var $129=$4;
 var $130=(($129)|0);
 var $131=(($130)|0);
 _raise_error(7,0,17592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$128,HEAP32[(((tempVarArgs)+(8))>>2)]=$131,tempVarArgs)); STACKTOP=tempVarArgs;
 label=27;break;
 case 27: 
 _do_debug(1,15944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $133=$rtrel;
 $1=$133;
 label=28;break;
 case 28: 
 var $135=$1;
 STACKTOP=sp;return $135;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_display($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ntuple=sp;
 var $bntuple=(sp)+(8);
 $1=$rel;
 _do_debug(1,15552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=9;break;}
 case 2: 
 var $5=$1;
 var $6=_tuple_readfirst($5,1,0);
 HEAP32[(($ntuple)>>2)]=$6;
 var $7=HEAP32[(($ntuple)>>2)];
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 _do_debug(3,14968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $10=HEAP32[(($ntuple)>>2)];
 HEAP32[(($bntuple)>>2)]=$10;
 var $11=HEAP32[(($ntuple)>>2)];
 _attributes_printtuple($11);
 label=4;break;
 case 4: 
 var $13=HEAP32[(($ntuple)>>2)];
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 var $16=HEAP32[(($ntuple)>>2)];
 _tuple_print($16);
 var $17=_tuple_readnext($ntuple,0);
 label=4;break;
 case 6: 
 _close_tuple($bntuple,2);
 label=8;break;
 case 7: 
 _do_debug(3,14512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $20=$1;
 _attributes_printfromrel($20);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 _do_debug(1,14144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $23=$1;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_revdisplay($rel){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $ntuple=sp;
 var $bntuple=(sp)+(8);
 $1=$rel;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=6;break;}
 case 2: 
 var $5=$1;
 var $6=_tuple_readfirst($5,1,0);
 HEAP32[(($ntuple)>>2)]=$6;
 var $7=HEAP32[(($ntuple)>>2)];
 HEAP32[(($bntuple)>>2)]=$7;
 label=3;break;
 case 3: 
 var $9=HEAP32[(($ntuple)>>2)];
 var $10=($9|0)!=0;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$1;
 var $13=HEAP32[(($ntuple)>>2)];
 _tuple_revprint($12,$13);
 var $14=_tuple_readnext($ntuple,0);
 label=3;break;
 case 5: 
 _close_tuple($bntuple,2);
 label=6;break;
 case 6: 
 var $17=$1;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _attribute_used($attrib_list,$attrib){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $counter;
 $2=$attrib_list;
 $3=$attrib;
 $counter=0;
 label=2;break;
 case 2: 
 var $5=$counter;
 var $6=$2;
 var $7=(($6+((($5)*(26))&-1))|0);
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=$3;
 var $11=(($10)|0);
 var $12=(($11)|0);
 var $13=_strcmp($9,$12);
 var $14=($13|0)!=0;
 if($14){label=3;break;}else{var $19=0;label=4;break;}
 case 3: 
 var $16=$counter;
 var $17=($16>>>0)<64;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$counter;
 var $22=((($21)+(1))|0);
 $counter=$22;
 label=2;break;
 case 6: 
 var $24=$counter;
 var $25=$2;
 var $26=(($25+((($24)*(26))&-1))|0);
 var $27=(($26)|0);
 var $28=(($27)|0);
 var $29=_strlen($28);
 var $30=($29|0)!=0;
 if($30){label=7;break;}else{label=9;break;}
 case 7: 
 var $32=$counter;
 var $33=($32>>>0)<64;
 if($33){label=8;break;}else{label=9;break;}
 case 8: 
 $1=1;
 label=10;break;
 case 9: 
 $1=0;
 label=10;break;
 case 10: 
 var $37=$1;
 STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_create_both($db,$rel1,$rel2,$name,$skip_list){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+6000)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $rname;
 var $rel_name=sp;
 var $path=(sp)+(32);
 var $attrdescr=(sp)+(4128);
 var $rtrel;
 var $attrib_names=(sp)+(4136);
 var $sptr;
 var $tmp=(sp)+(5800);
 var $temp=(sp)+(5864);
 var $counter;
 var $cattr=(sp)+(5968);
 var $exceeded_limit;
 var $ctuple=(sp)+(5976);
 var $anum=(sp)+(5984);
 var $nf=(sp)+(5992);
 $1=$db;
 $2=$rel1;
 $3=$rel2;
 $4=$name;
 $5=$skip_list;
 $exceeded_limit=0;
 _do_debug(1,13784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$2;
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=53;break;}
 case 2: 
 var $9=$3;
 var $10=($9|0)!=0;
 if($10){label=3;break;}else{label=53;break;}
 case 3: 
 var $12=$4;
 var $13=_strlen($12);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=(($rel_name)|0);
 var $17=_generate_random_string(6,$16);
 $rname=$17;
 label=6;break;
 case 5: 
 var $19=$4;
 $rname=$19;
 label=6;break;
 case 6: 
 var $21=$1;
 var $22=$rname;
 var $23=_relation_create($21,$22,1,0);
 $rtrel=$23;
 var $24=$rtrel;
 var $25=($24|0)!=0;
 if($25){label=7;break;}else{label=52;break;}
 case 7: 
 var $27=$rtrel;
 var $28=(($27+4644)|0);
 HEAP8[($28)]=0;
 var $29=(($path)|0);
 var $30=$rtrel;
 var $31=(($30+26)|0);
 var $32=(($31)|0);
 var $33=$rname;
 var $34=_sprintf($29,9656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,HEAP32[(((tempVarArgs)+(8))>>2)]=$33,HEAP32[(((tempVarArgs)+(16))>>2)]=24744,tempVarArgs)); STACKTOP=tempVarArgs;
 var $35=(($path)|0);
 _do_debug(3,13440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($path)|0);
 var $37=_fopen($36,17232);
 HEAP32[(($nf)>>2)]=$37;
 var $38=HEAP8[(37320)];
 var $39=($38&255);
 var $40=($39|0)!=0;
 if($40){label=8;break;}else{label=13;break;}
 case 8: 
 var $42=HEAP32[((37312)>>2)];
 var $43=($42|0)>=3;
 if($43){label=9;break;}else{label=13;break;}
 case 9: 
 var $45=HEAP32[(($nf)>>2)];
 var $46=($45|0)!=0;
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=HEAP32[((_stdout)>>2)];
 var $49=(($path)|0);
 _leap_fprintf($48,13368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 11: 
 var $51=HEAP32[((_stdout)>>2)];
 var $52=(($path)|0);
 _leap_fprintf($51,10528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$52,tempVarArgs)); STACKTOP=tempVarArgs;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 $counter=0;
 label=14;break;
 case 14: 
 var $56=$counter;
 var $57=($56>>>0)<64;
 if($57){label=15;break;}else{label=17;break;}
 case 15: 
 var $59=$counter;
 var $60=(($attrib_names+((($59)*(26))&-1))|0);
 var $61=(($60)|0);
 var $62=(($61)|0);
 var $63=_strcpy($62,51528);
 label=16;break;
 case 16: 
 var $65=$counter;
 var $66=((($65)+(1))|0);
 $counter=$66;
 label=14;break;
 case 17: 
 var $68=(($tmp)|0);
 var $69=$5;
 var $70=_strcpy($68,$69);
 $counter=0;
 var $71=$2;
 var $72=_relation_attribute_readfirst($71,$ctuple,$anum);
 HEAP32[(($cattr)>>2)]=$72;
 label=18;break;
 case 18: 
 var $74=HEAP32[(($cattr)>>2)];
 var $75=($74|0)!=0;
 if($75){label=19;break;}else{var $81=0;label=20;break;}
 case 19: 
 var $77=$exceeded_limit;
 var $78=($77&255);
 var $79=($78|0)==0;
 var $81=$79;label=20;break;
 case 20: 
 var $81;
 if($81){label=21;break;}else{label=39;break;}
 case 21: 
 var $83=(($tmp)|0);
 var $84=HEAP32[(($cattr)>>2)];
 var $85=(($84)|0);
 var $86=(($85)|0);
 var $87=_strstr($83,$86);
 $sptr=$87;
 var $88=$sptr;
 var $89=($88|0)==0;
 if($89){label=22;break;}else{label=37;break;}
 case 22: 
 var $91=$counter;
 var $92=(($attrib_names+((($91)*(26))&-1))|0);
 var $93=(($92)|0);
 var $94=(($93)|0);
 var $95=HEAP32[(($cattr)>>2)];
 var $96=(($95)|0);
 var $97=(($96)|0);
 var $98=_strcpy($94,$97);
 var $99=$counter;
 var $100=((($99)+(1))|0);
 $counter=$100;
 var $101=HEAP8[(37288)];
 var $102=($101&255);
 var $103=($102|0)==1;
 if($103){label=23;break;}else{label=24;break;}
 case 23: 
 var $105=(($temp)|0);
 var $106=$2;
 var $107=(($106)|0);
 var $108=(($107)|0);
 var $109=HEAP32[(($cattr)>>2)];
 var $110=(($109)|0);
 var $111=(($110)|0);
 var $112=_sprintf($105,12936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$108,HEAP32[(((tempVarArgs)+(8))>>2)]=$111,tempVarArgs)); STACKTOP=tempVarArgs;
 label=25;break;
 case 24: 
 var $114=(($temp)|0);
 var $115=HEAP32[(($cattr)>>2)];
 var $116=(($115)|0);
 var $117=(($116)|0);
 var $118=_strcpy($114,$117);
 label=25;break;
 case 25: 
 var $120=HEAP32[(($cattr)>>2)];
 var $121=(($120)|0);
 var $122=(($121)|0);
 var $123=(($temp)|0);
 var $124=_strcpy($122,$123);
 var $125=HEAP32[(($nf)>>2)];
 var $126=_fseek($125,0,2);
 var $127=HEAP32[(($cattr)>>2)];
 var $128=_relation_create_write_attribute($127,$nf);
 var $129=$1;
 var $130=(($129+4136)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($131>>>0)>=5;
 if($132){label=26;break;}else{label=34;break;}
 case 26: 
 var $134=HEAP8[(16)];
 var $135=($134&255);
 var $136=($135|0)==1;
 if($136){label=27;break;}else{label=32;break;}
 case 27: 
 var $138=HEAP8[(47136)];
 var $139=($138&255);
 var $140=($139|0)!=1;
 if($140){label=28;break;}else{label=32;break;}
 case 28: 
 var $142=$1;
 var $143=_database_name($142);
 var $144=_strcmp($143,5320);
 var $145=($144|0)!=0;
 if($145){label=29;break;}else{label=32;break;}
 case 29: 
 var $147=$rtrel;
 var $148=(($147)|0);
 var $149=(($148)|0);
 var $150=HEAP8[($149)];
 var $151=(($150<<24)>>24);
 var $152=($151|0)==122;
 if($152){label=30;break;}else{label=32;break;}
 case 30: 
 var $154=$rtrel;
 var $155=(($154)|0);
 var $156=(($155+1)|0);
 var $157=HEAP8[($156)];
 var $158=(($157<<24)>>24);
 var $159=($158|0)==122;
 if($159){label=31;break;}else{label=32;break;}
 case 31: 
 var $161=HEAP32[((37152)>>2)];
 var $162=$rtrel;
 var $163=(($162)|0);
 var $164=(($163)|0);
 var $165=HEAP32[(($cattr)>>2)];
 var $166=(($165)|0);
 var $167=(($166)|0);
 var $168=(($attrdescr)|0);
 var $169=HEAP32[(($cattr)>>2)];
 var $170=(($169+48)|0);
 var $171=HEAP8[($170)];
 var $172=_get_attribute_info($168,$171);
 var $173=HEAP32[(($cattr)>>2)];
 var $174=(($173+52)|0);
 var $175=HEAP32[(($174)>>2)];
 _ddmaintenance($161,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1912,HEAP32[(((tempVarArgs)+(8))>>2)]=$164,HEAP32[(((tempVarArgs)+(16))>>2)]=$167,HEAP32[(((tempVarArgs)+(24))>>2)]=$172,HEAP32[(((tempVarArgs)+(32))>>2)]=$175,tempVarArgs)); STACKTOP=tempVarArgs;
 label=33;break;
 case 32: 
 var $177=$1;
 var $178=$rtrel;
 var $179=(($178)|0);
 var $180=(($179)|0);
 var $181=HEAP32[(($cattr)>>2)];
 var $182=(($181)|0);
 var $183=(($182)|0);
 var $184=(($attrdescr)|0);
 var $185=HEAP32[(($cattr)>>2)];
 var $186=(($185+48)|0);
 var $187=HEAP8[($186)];
 var $188=_get_attribute_info($184,$187);
 var $189=HEAP32[(($cattr)>>2)];
 var $190=(($189+52)|0);
 var $191=HEAP32[(($190)>>2)];
 _ddmaintenance($177,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1912,HEAP32[(((tempVarArgs)+(8))>>2)]=$180,HEAP32[(((tempVarArgs)+(16))>>2)]=$183,HEAP32[(((tempVarArgs)+(24))>>2)]=$188,HEAP32[(((tempVarArgs)+(32))>>2)]=$191,tempVarArgs)); STACKTOP=tempVarArgs;
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $194=$counter;
 var $195=($194|0)==64;
 if($195){label=35;break;}else{label=36;break;}
 case 35: 
 _raise_error(11,0,12688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=64,tempVarArgs)); STACKTOP=tempVarArgs;
 _attribute_dispose($cattr);
 $exceeded_limit=1;
 label=36;break;
 case 36: 
 label=38;break;
 case 37: 
 var $199=$sptr;
 HEAP8[($199)]=95;
 label=38;break;
 case 38: 
 var $201=HEAP32[(($cattr)>>2)];
 var $202=_relation_attribute_readnext(0,$ctuple,$201,$anum);
 HEAP32[(($cattr)>>2)]=$202;
 label=18;break;
 case 39: 
 _close_tuple($ctuple,2);
 var $204=$exceeded_limit;
 var $205=($204&255);
 var $206=($205|0)==0;
 if($206){label=40;break;}else{label=51;break;}
 case 40: 
 var $208=$3;
 var $209=_relation_attribute_readfirst($208,$ctuple,$anum);
 HEAP32[(($cattr)>>2)]=$209;
 label=41;break;
 case 41: 
 var $211=HEAP32[(($cattr)>>2)];
 var $212=($211|0)!=0;
 if($212){label=42;break;}else{label=50;break;}
 case 42: 
 var $214=(($attrib_names)|0);
 var $215=HEAP32[(($cattr)>>2)];
 var $216=_attribute_used($214,$215);
 var $217=($216&255);
 var $218=($217|0)!=0;
 if($218){label=44;break;}else{label=43;break;}
 case 43: 
 var $220=HEAP8[(37288)];
 var $221=($220&255);
 var $222=($221|0)==1;
 if($222){label=44;break;}else{label=45;break;}
 case 44: 
 var $224=$counter;
 var $225=(($attrib_names+((($224)*(26))&-1))|0);
 var $226=(($225)|0);
 var $227=(($226)|0);
 var $228=$3;
 var $229=(($228)|0);
 var $230=(($229)|0);
 var $231=HEAP32[(($cattr)>>2)];
 var $232=(($231)|0);
 var $233=(($232)|0);
 var $234=_sprintf($227,12936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$230,HEAP32[(((tempVarArgs)+(8))>>2)]=$233,tempVarArgs)); STACKTOP=tempVarArgs;
 label=46;break;
 case 45: 
 var $236=$counter;
 var $237=(($attrib_names+((($236)*(26))&-1))|0);
 var $238=(($237)|0);
 var $239=(($238)|0);
 var $240=HEAP32[(($cattr)>>2)];
 var $241=(($240)|0);
 var $242=(($241)|0);
 var $243=_strcpy($239,$242);
 label=46;break;
 case 46: 
 var $245=HEAP32[(($cattr)>>2)];
 var $246=(($245)|0);
 var $247=(($246)|0);
 var $248=$counter;
 var $249=(($attrib_names+((($248)*(26))&-1))|0);
 var $250=(($249)|0);
 var $251=(($250)|0);
 var $252=_strcpy($247,$251);
 var $253=HEAP32[(($nf)>>2)];
 var $254=_fseek($253,0,2);
 var $255=HEAP32[(($cattr)>>2)];
 var $256=_relation_create_write_attribute($255,$nf);
 var $257=$counter;
 var $258=((($257)+(1))|0);
 $counter=$258;
 var $259=$counter;
 var $260=($259|0)==64;
 if($260){label=47;break;}else{label=48;break;}
 case 47: 
 _raise_error(11,0,12408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=64,tempVarArgs)); STACKTOP=tempVarArgs;
 _attribute_dispose($cattr);
 $exceeded_limit=1;
 label=49;break;
 case 48: 
 var $263=HEAP32[(($cattr)>>2)];
 var $264=_relation_attribute_readnext(0,$ctuple,$263,$anum);
 HEAP32[(($cattr)>>2)]=$264;
 label=49;break;
 case 49: 
 label=41;break;
 case 50: 
 var $267=HEAP32[(($nf)>>2)];
 var $268=_fclose($267);
 var $269=(($path)|0);
 var $270=_fopen($269,29864);
 HEAP32[(($nf)>>2)]=$270;
 var $271=$1;
 var $272=$rname;
 var $273=$counter;
 var $274=(($273)&255);
 var $275=$rtrel;
 var $276=(($275+4660)|0);
 var $277=HEAP8[($276)];
 var $278=$rtrel;
 var $279=(($278+4669)|0);
 var $280=HEAP8[($279)];
 var $281=_relation_update_header($271,$272,$274,$277,$280,$nf);
 var $282=HEAP32[(($nf)>>2)];
 var $283=_fclose($282);
 var $284=(($path)|0);
 var $285=_fopen($284,29864);
 HEAP32[(($nf)>>2)]=$285;
 var $286=HEAP32[(($nf)>>2)];
 var $287=_fseek($286,0,2);
 var $288=HEAP32[(($nf)>>2)];
 var $289=_fflush($288);
 var $290=$counter;
 var $291=(($290)&255);
 var $292=_relation_create_write_eoh_marker($291,$nf);
 var $293=HEAP32[(($nf)>>2)];
 var $294=_fclose($293);
 label=51;break;
 case 51: 
 _close_tuple($ctuple,2);
 label=52;break;
 case 52: 
 label=54;break;
 case 53: 
 _do_debug(1,12136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $rtrel=0;
 label=54;break;
 case 54: 
 _do_debug(1,11760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $299=$rtrel;
 STACKTOP=sp;return $299;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_product($db,$rel1,$rel2,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $rname;
 var $return_rel;
 var $ct1=sp;
 var $ct2=(sp)+(8);
 var $nt=(sp)+(16);
 var $pct1=(sp)+(24);
 var $pct2=(sp)+(32);
 var $count;
 var $rel_name=(sp)+(40);
 $1=$db;
 $2=$rel1;
 $3=$rel2;
 $4=$destname;
 _do_debug(1,11456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$4;
 var $6=_strlen($5);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=(($rel_name)|0);
 var $10=_generate_random_string(6,$9);
 $rname=$10;
 label=4;break;
 case 3: 
 var $12=$4;
 $rname=$12;
 label=4;break;
 case 4: 
 var $14=$1;
 var $15=$2;
 var $16=$3;
 var $17=$rname;
 var $18=_relation_create_both($14,$15,$16,$17,51528);
 $return_rel=$18;
 var $19=$return_rel;
 var $20=($19|0)!=0;
 if($20){label=5;break;}else{label=18;break;}
 case 5: 
 var $22=$return_rel;
 var $23=_tuple_prepare($22);
 HEAP32[(($nt)>>2)]=$23;
 var $24=$2;
 var $25=_tuple_readfirst($24,1,0);
 HEAP32[(($ct1)>>2)]=$25;
 var $26=HEAP32[(($ct1)>>2)];
 HEAP32[(($pct1)>>2)]=$26;
 HEAP32[(($ct2)>>2)]=0;
 var $27=$3;
 var $28=_tuple_readfirst($27,1,0);
 HEAP32[(($pct2)>>2)]=$28;
 label=6;break;
 case 6: 
 var $30=HEAP32[(($ct1)>>2)];
 var $31=($30|0)!=0;
 if($31){label=7;break;}else{label=17;break;}
 case 7: 
 var $33=$3;
 var $34=HEAP32[(($pct2)>>2)];
 var $35=_tuple_readfirst($33,0,$34);
 HEAP32[(($ct2)>>2)]=$35;
 label=8;break;
 case 8: 
 var $37=HEAP32[(($ct2)>>2)];
 var $38=($37|0)!=0;
 if($38){label=9;break;}else{label=16;break;}
 case 9: 
 $count=0;
 label=10;break;
 case 10: 
 var $41=$count;
 var $42=HEAP32[(($ct1)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=($41>>>0)<($45>>>0);
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $48=$count;
 var $49=HEAP32[(($nt)>>2)];
 var $50=(($49)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+($48<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+8)|0);
 var $55=(($54)|0);
 var $56=$count;
 var $57=HEAP32[(($ct1)>>2)];
 var $58=(($57)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+($56<<2))|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+8)|0);
 var $63=(($62)|0);
 var $64=_strcpy($55,$63);
 var $65=$count;
 var $66=((($65)+(1))|0);
 $count=$66;
 label=10;break;
 case 12: 
 $count=0;
 label=13;break;
 case 13: 
 var $69=$count;
 var $70=HEAP32[(($ct2)>>2)];
 var $71=(($70+8)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=($69>>>0)<($73>>>0);
 if($74){label=14;break;}else{label=15;break;}
 case 14: 
 var $76=$count;
 var $77=HEAP32[(($ct1)>>2)];
 var $78=(($77+8)|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=((($76)+($80))|0);
 var $82=HEAP32[(($nt)>>2)];
 var $83=(($82)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+($81<<2))|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+8)|0);
 var $88=(($87)|0);
 var $89=$count;
 var $90=HEAP32[(($ct2)>>2)];
 var $91=(($90)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+($89<<2))|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+8)|0);
 var $96=(($95)|0);
 var $97=_strcpy($88,$96);
 var $98=$count;
 var $99=((($98)+(1))|0);
 $count=$99;
 label=13;break;
 case 15: 
 var $101=HEAP32[(($nt)>>2)];
 var $102=_tuple_append($101);
 var $103=_tuple_readnext($ct2,0);
 label=8;break;
 case 16: 
 _close_tuple($ct2,0);
 var $105=_tuple_readnext($ct1,0);
 label=6;break;
 case 17: 
 _close_tuple($pct1,2);
 _close_tuple($pct2,2);
 _close_tuple($ct2,2);
 _close_tuple($nt,2);
 label=18;break;
 case 18: 
 _do_debug(1,11144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $108=$return_rel;
 STACKTOP=sp;return $108;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_select($db,$rel,$qualification,$dest){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1048)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $rtrel;
 var $ct=sp;
 var $nt=(sp)+(8);
 var $condition=(sp)+(16);
 var $counter;
 var $spare_qualification=(sp)+(24);
 $2=$db;
 $3=$rel;
 $4=$qualification;
 $5=$dest;
 _do_debug(1,10912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$4;
 var $7=$5;
 _do_debug(3,10584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$7,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=$4;
 var $9=_strlen($8);
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(33,0,10264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $12=(($spare_qualification)|0);
 var $13=_strcpy($12,32);
 var $14=(($spare_qualification)|0);
 $4=$14;
 label=3;break;
 case 3: 
 var $16=$2;
 var $17=$3;
 var $18=$5;
 var $19=_create_duplicate_rtn_relation($16,$17,$18);
 $rtrel=$19;
 var $20=$rtrel;
 var $21=($20|0)!=0;
 if($21){label=4;break;}else{label=22;break;}
 case 4: 
 var $23=$3;
 var $24=($23|0)!=0;
 if($24){label=5;break;}else{label=22;break;}
 case 5: 
 var $26=$3;
 var $27=_tuple_readfirst($26,1,0);
 HEAP32[(($ct)>>2)]=$27;
 var $28=HEAP32[(($ct)>>2)];
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=21;break;}
 case 6: 
 var $31=$rtrel;
 var $32=_tuple_prepare($31);
 HEAP32[(($nt)>>2)]=$32;
 var $33=$4;
 var $34=HEAP32[(($ct)>>2)];
 var $35=_build_condition($33,$34,0);
 HEAP32[(($condition)>>2)]=$35;
 var $36=HEAP32[(($condition)>>2)];
 var $37=($36|0)!=0;
 if($37){label=7;break;}else{label=20;break;}
 case 7: 
 var $39=HEAP8[(37320)];
 var $40=($39&255);
 var $41=($40|0)!=0;
 if($41){label=8;break;}else{label=10;break;}
 case 8: 
 var $43=HEAP32[((37312)>>2)];
 var $44=($43|0)>=3;
 if($44){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=HEAP32[(($condition)>>2)];
 _print_condition($46);
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $49=HEAP32[(($ct)>>2)];
 var $50=($49|0)!=0;
 if($50){label=12;break;}else{label=19;break;}
 case 12: 
 var $52=HEAP32[(($condition)>>2)];
 var $53=HEAP32[(($ct)>>2)];
 var $54=_evaluate($52,$53,0);
 var $55=($54&255);
 var $56=($55|0)==1;
 if($56){label=13;break;}else{label=17;break;}
 case 13: 
 _do_debug(2,9936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $counter=0;
 label=14;break;
 case 14: 
 var $59=$counter;
 var $60=HEAP32[(($ct)>>2)];
 var $61=(($60+8)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=($59|0)<($63|0);
 if($64){label=15;break;}else{label=16;break;}
 case 15: 
 var $66=$counter;
 var $67=HEAP32[(($nt)>>2)];
 var $68=(($67)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+($66<<2))|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+8)|0);
 var $73=(($72)|0);
 var $74=$counter;
 var $75=HEAP32[(($ct)>>2)];
 var $76=(($75)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+($74<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+8)|0);
 var $81=(($80)|0);
 var $82=_strcpy($73,$81);
 var $83=$counter;
 var $84=((($83)+(1))|0);
 $counter=$84;
 label=14;break;
 case 16: 
 var $86=HEAP32[(($nt)>>2)];
 var $87=_tuple_append($86);
 label=18;break;
 case 17: 
 _do_debug(2,9696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 var $90=_tuple_readnext($ct,1);
 label=11;break;
 case 19: 
 var $92=_destroy_condition($condition);
 _close_tuple($nt,2);
 _close_tuple($ct,2);
 _do_debug(1,9488,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $93=$rtrel;
 $1=$93;
 label=23;break;
 case 20: 
 _close_tuple($nt,2);
 _do_debug(1,9216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=23;break;
 case 21: 
 _do_debug(1,9216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=23;break;
 case 22: 
 _do_debug(1,9216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=23;break;
 case 23: 
 var $98=$1;
 STACKTOP=sp;return $98;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_erase($db,$rel,$qualification,$dest){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $ct=sp;
 var $condition=(sp)+(8);
 var $spare_qualification=(sp)+(16);
 $2=$db;
 $3=$rel;
 $4=$qualification;
 $5=$dest;
 _do_debug(1,8784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$4;
 var $7=$5;
 _do_debug(3,10584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$7,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=$4;
 var $9=_strlen($8);
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(33,0,10264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $12=(($spare_qualification)|0);
 var $13=_strcpy($12,32);
 var $14=(($spare_qualification)|0);
 $4=$14;
 label=3;break;
 case 3: 
 var $16=$3;
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=15;break;}
 case 4: 
 var $19=$3;
 var $20=_tuple_readfirst($19,1,0);
 HEAP32[(($ct)>>2)]=$20;
 var $21=$4;
 var $22=HEAP32[(($ct)>>2)];
 var $23=_build_condition($21,$22,0);
 HEAP32[(($condition)>>2)]=$23;
 var $24=HEAP32[(($condition)>>2)];
 var $25=($24|0)!=0;
 if($25){label=5;break;}else{label=14;break;}
 case 5: 
 var $27=HEAP8[(37320)];
 var $28=($27&255);
 var $29=($28|0)!=0;
 if($29){label=6;break;}else{label=8;break;}
 case 6: 
 var $31=HEAP32[((37312)>>2)];
 var $32=($31|0)>=3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=HEAP32[(($condition)>>2)];
 _print_condition($34);
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $37=HEAP32[(($ct)>>2)];
 var $38=($37|0)!=0;
 if($38){label=10;break;}else{label=13;break;}
 case 10: 
 var $40=HEAP32[(($condition)>>2)];
 var $41=HEAP32[(($ct)>>2)];
 var $42=_evaluate($40,$41,0);
 var $43=($42&255);
 var $44=($43|0)==1;
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 var $46=HEAP32[(($ct)>>2)];
 var $47=(($46+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=HEAP32[(($ct)>>2)];
 var $50=_tuple_delete($48,$49);
 label=12;break;
 case 12: 
 var $52=_tuple_readnext($ct,1);
 label=9;break;
 case 13: 
 var $54=_destroy_condition($condition);
 _close_tuple($ct,2);
 _do_debug(1,8520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $55=$3;
 $1=$55;
 label=16;break;
 case 14: 
 _do_debug(1,8256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $57=_destroy_condition($condition);
 _close_tuple($ct,2);
 $1=0;
 label=16;break;
 case 15: 
 _do_debug(1,8256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=16;break;
 case 16: 
 var $60=$1;
 STACKTOP=sp;return $60;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_update($db,$rel,$qualification,$set,$dest){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $rtrel;
 var $ct=sp;
 var $condition=(sp)+(8);
 var $attrib=(sp)+(16);
 var $spare_qualification=(sp)+(24);
 var $nvalue;
 var $key;
 var $value;
 var $assign;
 var $string=(sp)+(1056);
 var $setm=(sp)+(2088);
 var $expression=(sp)+(3120);
 var $epos;
 $2=$db;
 $3=$rel;
 $4=$qualification;
 $5=$set;
 $6=$dest;
 _do_debug(1,8008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$4;
 var $8=$6;
 var $9=$5;
 _do_debug(3,7808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$7,HEAP32[(((tempVarArgs)+(8))>>2)]=$8,HEAP32[(((tempVarArgs)+(16))>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $10=$4;
 var $11=_strlen($10);
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(33,0,10264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $14=(($spare_qualification)|0);
 var $15=_strcpy($14,32);
 var $16=(($spare_qualification)|0);
 $4=$16;
 label=3;break;
 case 3: 
 var $18=$5;
 var $19=_strlen($18);
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 _raise_error(15,0,7504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,7296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=47;break;
 case 5: 
 var $23=$3;
 $rtrel=$23;
 var $24=$rtrel;
 var $25=($24|0)!=0;
 if($25){label=6;break;}else{label=46;break;}
 case 6: 
 var $27=$3;
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=46;break;}
 case 7: 
 var $30=$3;
 var $31=_tuple_readfirst($30,1,0);
 HEAP32[(($ct)>>2)]=$31;
 var $32=HEAP32[(($ct)>>2)];
 var $33=($32|0)!=0;
 if($33){label=8;break;}else{label=45;break;}
 case 8: 
 var $35=HEAP32[(($ct)>>2)];
 var $36=_getendposition($35);
 $epos=$36;
 var $37=$4;
 var $38=HEAP32[(($ct)>>2)];
 var $39=_build_condition($37,$38,0);
 HEAP32[(($condition)>>2)]=$39;
 var $40=HEAP32[(($condition)>>2)];
 var $41=($40|0)!=0;
 if($41){label=9;break;}else{label=44;break;}
 case 9: 
 var $43=HEAP8[(37320)];
 var $44=($43&255);
 var $45=($44|0)!=0;
 if($45){label=10;break;}else{label=12;break;}
 case 10: 
 var $47=HEAP32[((37312)>>2)];
 var $48=($47|0)>=3;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 var $50=HEAP32[(($condition)>>2)];
 _print_condition($50);
 label=12;break;
 case 12: 
 var $52=(($setm)|0);
 var $53=$5;
 var $54=_strcpy($52,$53);
 label=13;break;
 case 13: 
 var $56=HEAP32[(($ct)>>2)];
 var $57=($56|0)!=0;
 if($57){label=14;break;}else{var $65=0;label=15;break;}
 case 14: 
 var $59=HEAP32[(($ct)>>2)];
 var $60=$epos;
 var $61=_atend($59,$60);
 var $62=($61&255);
 var $63=($62|0)!=1;
 var $65=$63;label=15;break;
 case 15: 
 var $65;
 if($65){label=16;break;}else{label=40;break;}
 case 16: 
 var $67=$5;
 var $68=(($setm)|0);
 var $69=_strcpy($67,$68);
 var $70=HEAP32[(($condition)>>2)];
 var $71=HEAP32[(($ct)>>2)];
 var $72=_evaluate($70,$71,0);
 var $73=($72&255);
 var $74=($73|0)==1;
 if($74){label=17;break;}else{label=38;break;}
 case 17: 
 var $76=HEAP32[((37312)>>2)];
 var $77=($76|0)>=5;
 if($77){label=18;break;}else{label=21;break;}
 case 18: 
 _do_debug(5,7104,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $79=HEAP32[(($ct)>>2)];
 var $80=($79|0)!=0;
 if($80){label=19;break;}else{label=20;break;}
 case 19: 
 var $82=HEAP32[(($ct)>>2)];
 _attributes_printtuple($82);
 var $83=HEAP32[(($ct)>>2)];
 _tuple_print($83);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 _do_debug(3,6920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $86=HEAP32[(($ct)>>2)];
 var $87=(($86+16)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=HEAP32[(($ct)>>2)];
 var $90=_tuple_delete($88,$89);
 var $91=$5;
 var $92=(($string)|0);
 var $93=_cut_token($91,44,$92);
 var $94=(($string)|0);
 var $95=_strlen($94);
 var $96=($95|0)==0;
 if($96){label=22;break;}else{label=23;break;}
 case 22: 
 var $98=(($string)|0);
 var $99=$5;
 var $100=_strcpy($98,$99);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $103=(($string)|0);
 var $104=_strlen($103);
 var $105=($104>>>0)>0;
 if($105){label=25;break;}else{label=33;break;}
 case 25: 
 var $107=(($string)|0);
 $key=$107;
 var $108=(($string)|0);
 var $109=_strchr($108,61);
 $assign=$109;
 var $110=$assign;
 var $111=($110|0)==0;
 if($111){label=26;break;}else{label=27;break;}
 case 26: 
 _raise_error(15,0,7504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _raise_message(1,6752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $113=_destroy_condition($condition);
 _close_tuple($ct,2);
 $1=0;
 label=47;break;
 case 27: 
 var $115=$assign;
 HEAP8[($115)]=0;
 var $116=$assign;
 var $117=(($116+1)|0);
 $value=$117;
 $nvalue=0;
 var $118=$value;
 var $119=_allbut($118,6464);
 $nvalue=$119;
 var $120=$3;
 var $121=(($string)|0);
 var $122=_attribute_find($120,$121);
 HEAP32[(($attrib)>>2)]=$122;
 var $123=HEAP32[(($attrib)>>2)];
 var $124=($123|0)!=0;
 if($124){label=28;break;}else{label=29;break;}
 case 28: 
 var $126=HEAP32[(($attrib)>>2)];
 var $127=(($126+44)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=HEAP32[(($ct)>>2)];
 var $130=(($129)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+($128<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+8)|0);
 var $135=(($134)|0);
 var $136=$nvalue;
 _do_debug(5,6184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$135,HEAP32[(((tempVarArgs)+(8))>>2)]=$136,tempVarArgs)); STACKTOP=tempVarArgs;
 var $137=HEAP32[(($attrib)>>2)];
 var $138=(($137+44)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=HEAP32[(($ct)>>2)];
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+($139<<2))|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+8)|0);
 var $146=(($145)|0);
 var $147=$nvalue;
 var $148=_strcpy($146,$147);
 _attribute_dispose($attrib);
 label=30;break;
 case 29: 
 var $150=(($string)|0);
 _raise_error(5,0,$150,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=30;break;
 case 30: 
 var $152=$nvalue;
 var $153=($152|0)!=0;
 if($153){label=31;break;}else{label=32;break;}
 case 31: 
 var $155=$nvalue;
 _free($155);
 label=32;break;
 case 32: 
 var $157=$5;
 var $158=(($string)|0);
 var $159=_cut_token($157,44,$158);
 var $160=(($string)|0);
 var $161=_strlen($160);
 _do_debug(5,5848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$161,tempVarArgs)); STACKTOP=tempVarArgs;
 label=24;break;
 case 33: 
 var $163=HEAP32[(($ct)>>2)];
 var $164=_tuple_appendandreturn($163);
 _do_debug(3,5600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $165=HEAP32[((37312)>>2)];
 var $166=($165|0)>=5;
 if($166){label=34;break;}else{label=37;break;}
 case 34: 
 _do_debug(5,5368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $168=HEAP32[(($ct)>>2)];
 var $169=($168|0)!=0;
 if($169){label=35;break;}else{label=36;break;}
 case 35: 
 var $171=HEAP32[(($ct)>>2)];
 _attributes_printtuple($171);
 var $172=HEAP32[(($ct)>>2)];
 _tuple_print($172);
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 label=39;break;
 case 38: 
 _do_debug(3,5152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=39;break;
 case 39: 
 var $177=_tuple_readnext($ct,1);
 label=13;break;
 case 40: 
 var $179=_destroy_condition($condition);
 _close_tuple($ct,2);
 _do_debug(1,4944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $180=$3;
 var $181=(($180)|0);
 var $182=(($181)|0);
 var $183=_strcmp($182,4744);
 var $184=($183|0)!=0;
 if($184){label=41;break;}else{label=42;break;}
 case 41: 
 _do_debug(3,4528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $186=(($expression)|0);
 var $187=$3;
 var $188=(($187)|0);
 var $189=(($188)|0);
 var $190=_sprintf($186,4344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4744,HEAP32[(((tempVarArgs)+(8))>>2)]=4120,HEAP32[(((tempVarArgs)+(16))>>2)]=$189,HEAP32[(((tempVarArgs)+(24))>>2)]=4000,HEAP32[(((tempVarArgs)+(32))>>2)]=3880,tempVarArgs)); STACKTOP=tempVarArgs;
 var $191=$2;
 var $192=(($expression)|0);
 _ddmaintenance($191,$192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=43;break;
 case 42: 
 _do_debug(3,3720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=43;break;
 case 43: 
 var $195=$rtrel;
 $1=$195;
 label=47;break;
 case 44: 
 _do_debug(1,7296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=47;break;
 case 45: 
 _do_debug(1,7296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=47;break;
 case 46: 
 _do_debug(1,7296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=47;break;
 case 47: 
 var $200=$1;
 STACKTOP=sp;return $200;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_naturaljoin($db,$lrel,$rrel,$qualification,$destname,$join_type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+6704)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $rtrel;
 var $rname;
 var $rel_name=sp;
 var $ltuple=(sp)+(32);
 var $rtuple=(sp)+(40);
 var $ntuple=(sp)+(48);
 var $prtuple=(sp)+(56);
 var $pltuple=(sp)+(64);
 var $condition=(sp)+(72);
 var $spare_qualification=(sp)+(80);
 var $generated_qualification=(sp)+(1112);
 var $lresult;
 var $rresult;
 var $count;
 var $position;
 var $internal_jointype;
 var $qualification_length;
 var $primary_keys=(sp)+(2144);
 var $foreign_keys=(sp)+(3176);
 var $spare_foreign_keys=(sp)+(4208);
 var $spare_primary_keys=(sp)+(5240);
 var $temp=(sp)+(6272);
 var $pkey=(sp)+(6376);
 var $fkey=(sp)+(6408);
 var $finished;
 var $skip_list=(sp)+(6440);
 var $noskippable;
 var $att=(sp)+(6696);
 $2=$db;
 $3=$lrel;
 $4=$rrel;
 $5=$qualification;
 $6=$destname;
 $7=$join_type;
 HEAP32[(($condition)>>2)]=0;
 var $8=$generated_qualification;
 _memset($8, 0, 1025)|0;
 $internal_jointype=7;
 $finished=0;
 $noskippable=0;
 _do_debug(1,3592,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=$3;
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=101;break;}
 case 2: 
 var $12=$4;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=101;break;}
 case 3: 
 var $15=$7;
 var $16=($15|0)!=7;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$7;
 $internal_jointype=$18;
 label=5;break;
 case 5: 
 var $20=$5;
 var $21=_strlen($20);
 $qualification_length=$21;
 var $22=$internal_jointype;
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=6;break;}
 case 6: 
 var $25=$qualification_length;
 var $26=($25|0)==0;
 if($26){label=7;break;}else{label=34;break;}
 case 7: 
 var $28=$qualification_length;
 var $29=($28|0)==0;
 if($29){label=8;break;}else{label=33;break;}
 case 8: 
 var $31=$2;
 var $32=$3;
 var $33=$4;
 var $34=(($foreign_keys)|0);
 var $35=(($primary_keys)|0);
 var $36=_get_keys($31,$32,$33,$34,$35);
 var $37=(($primary_keys)|0);
 var $38=_strlen($37);
 var $39=($38|0)==0;
 if($39){label=9;break;}else{label=22;break;}
 case 9: 
 var $41=(($foreign_keys)|0);
 var $42=_strlen($41);
 var $43=($42|0)==0;
 if($43){label=10;break;}else{label=22;break;}
 case 10: 
 var $45=HEAP8[(37240)];
 var $46=($45&255);
 var $47=($46|0)!=0;
 if($47){label=11;break;}else{label=13;break;}
 case 11: 
 var $49=HEAP8[(37320)];
 var $50=($49&255);
 var $51=($50|0)!=0;
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 _raise_message(1,3424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 13: 
 var $54=$2;
 var $55=$4;
 var $56=$3;
 var $57=(($primary_keys)|0);
 var $58=(($foreign_keys)|0);
 var $59=_get_keys($54,$55,$56,$57,$58);
 var $60=(($primary_keys)|0);
 var $61=_strlen($60);
 var $62=($61|0)==0;
 if($62){label=14;break;}else{label=21;break;}
 case 14: 
 var $64=(($foreign_keys)|0);
 var $65=_strlen($64);
 var $66=($65|0)==0;
 if($66){label=15;break;}else{label=21;break;}
 case 15: 
 var $68=HEAP8[(37320)];
 var $69=($68&255);
 var $70=($69|0)!=0;
 if($70){label=17;break;}else{label=16;break;}
 case 16: 
 var $72=HEAP8[(37240)];
 var $73=($72&255);
 var $74=($73|0)!=0;
 if($74){label=17;break;}else{label=18;break;}
 case 17: 
 _raise_message(1,3256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 _raise_message(1,3056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=2928,tempVarArgs)); STACKTOP=tempVarArgs;
 var $77=HEAP8[(37280)];
 var $78=($77&255);
 var $79=($78|0)==1;
 if($79){label=19;break;}else{label=20;break;}
 case 19: 
 _raise_message(1,2768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $81=$5;
 var $82=_strcpy($81,2576);
 var $83=$2;
 var $84=$3;
 var $85=$4;
 var $86=$5;
 var $87=$6;
 var $88=_rl_naturaljoin($83,$84,$85,$86,$87,7);
 $1=$88;
 label=102;break;
 case 20: 
 $1=0;
 label=102;break;
 case 21: 
 label=22;break;
 case 22: 
 var $92=(($spare_foreign_keys)|0);
 var $93=(($foreign_keys)|0);
 var $94=_strcpy($92,$93);
 var $95=(($spare_primary_keys)|0);
 var $96=(($primary_keys)|0);
 var $97=_strcpy($95,$96);
 var $98=HEAP8[(37320)];
 var $99=($98&255);
 var $100=($99|0)!=0;
 if($100){label=23;break;}else{label=25;break;}
 case 23: 
 var $102=HEAP32[((37312)>>2)];
 var $103=($102|0)>=3;
 if($103){label=24;break;}else{label=25;break;}
 case 24: 
 _do_trace(2424);
 var $105=(($primary_keys)|0);
 _do_trace($105);
 var $106=(($foreign_keys)|0);
 _do_trace($106);
 label=25;break;
 case 25: 
 var $108=(($primary_keys)|0);
 var $109=(($pkey)|0);
 var $110=_cut_token($108,0,$109);
 var $111=(($foreign_keys)|0);
 var $112=(($fkey)|0);
 var $113=_cut_token($111,0,$112);
 var $114=(($temp)|0);
 var $115=$3;
 var $116=(($115)|0);
 var $117=(($116)|0);
 var $118=(($fkey)|0);
 var $119=$4;
 var $120=(($119)|0);
 var $121=(($120)|0);
 var $122=(($pkey)|0);
 var $123=_sprintf($114,2280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$117,HEAP32[(((tempVarArgs)+(8))>>2)]=$118,HEAP32[(((tempVarArgs)+(16))>>2)]=$121,HEAP32[(((tempVarArgs)+(24))>>2)]=$122,tempVarArgs)); STACKTOP=tempVarArgs;
 var $124=(($generated_qualification)|0);
 var $125=(($temp)|0);
 var $126=_strcat($124,$125);
 $finished=0;
 label=26;break;
 case 26: 
 var $128=(($primary_keys)|0);
 var $129=(($pkey)|0);
 var $130=_cut_token($128,0,$129);
 var $131=(($foreign_keys)|0);
 var $132=(($fkey)|0);
 var $133=_cut_token($131,0,$132);
 var $134=(($pkey)|0);
 var $135=_strlen($134);
 var $136=($135>>>0)>0;
 if($136){label=27;break;}else{label=29;break;}
 case 27: 
 var $138=(($fkey)|0);
 var $139=_strlen($138);
 var $140=($139>>>0)>0;
 if($140){label=28;break;}else{label=29;break;}
 case 28: 
 var $142=(($temp)|0);
 var $143=$3;
 var $144=(($143)|0);
 var $145=(($144)|0);
 var $146=(($fkey)|0);
 var $147=$4;
 var $148=(($147)|0);
 var $149=(($148)|0);
 var $150=(($pkey)|0);
 var $151=_sprintf($142,2088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$145,HEAP32[(((tempVarArgs)+(8))>>2)]=$146,HEAP32[(((tempVarArgs)+(16))>>2)]=$149,HEAP32[(((tempVarArgs)+(24))>>2)]=$150,tempVarArgs)); STACKTOP=tempVarArgs;
 var $152=(($generated_qualification)|0);
 var $153=(($temp)|0);
 var $154=_strcat($152,$153);
 label=30;break;
 case 29: 
 $finished=1;
 label=30;break;
 case 30: 
 var $157=(($temp)|0);
 _do_debug(3,1960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$157,tempVarArgs)); STACKTOP=tempVarArgs;
 label=31;break;
 case 31: 
 var $159=$finished;
 var $160=($159&255);
 var $161=($160|0)!=1;
 if($161){label=26;break;}else{label=32;break;}
 case 32: 
 var $163=(($generated_qualification)|0);
 $5=$163;
 label=33;break;
 case 33: 
 $internal_jointype=0;
 label=35;break;
 case 34: 
 var $166=(($spare_foreign_keys)|0);
 var $167=_strcpy($166,51528);
 var $168=(($spare_primary_keys)|0);
 var $169=_strcpy($168,51528);
 $internal_jointype=2;
 label=35;break;
 case 35: 
 var $171=$5;
 _do_debug(3,1840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$171,tempVarArgs)); STACKTOP=tempVarArgs;
 var $172=$6;
 var $173=_strlen($172);
 var $174=($173|0)==0;
 if($174){label=36;break;}else{label=37;break;}
 case 36: 
 var $176=(($rel_name)|0);
 var $177=_generate_random_string(6,$176);
 $rname=$177;
 label=38;break;
 case 37: 
 var $179=$6;
 $rname=$179;
 label=38;break;
 case 38: 
 var $181=$2;
 var $182=$3;
 var $183=$4;
 var $184=$rname;
 var $185=(($spare_foreign_keys)|0);
 var $186=_relation_create_both($181,$182,$183,$184,$185);
 $rtrel=$186;
 var $187=$rtrel;
 var $188=($187|0)!=0;
 if($188){label=39;break;}else{label=100;break;}
 case 39: 
 var $190=$internal_jointype;
 var $191=($190|0)==0;
 if($191){label=40;break;}else{label=51;break;}
 case 40: 
 $noskippable=64;
 label=41;break;
 case 41: 
 var $194=$noskippable;
 var $195=($194|0)>=0;
 if($195){label=42;break;}else{label=44;break;}
 case 42: 
 var $197=$noskippable;
 var $198=(($skip_list+($197<<2))|0);
 HEAP32[(($198)>>2)]=-1;
 label=43;break;
 case 43: 
 var $200=$noskippable;
 var $201=((($200)-(1))|0);
 $noskippable=$201;
 label=41;break;
 case 44: 
 var $203=(($spare_foreign_keys)|0);
 var $204=(($temp)|0);
 var $205=_cut_token($203,0,$204);
 $noskippable=0;
 label=45;break;
 case 45: 
 var $207=(($temp)|0);
 var $208=_strlen($207);
 var $209=($208>>>0)>0;
 if($209){label=46;break;}else{label=50;break;}
 case 46: 
 var $211=$3;
 var $212=(($temp)|0);
 var $213=_attribute_find($211,$212);
 HEAP32[(($att)>>2)]=$213;
 var $214=HEAP32[(($att)>>2)];
 var $215=($214|0)!=0;
 if($215){label=47;break;}else{label=48;break;}
 case 47: 
 var $217=HEAP32[(($att)>>2)];
 var $218=(($217+44)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$noskippable;
 var $221=(($skip_list+($220<<2))|0);
 HEAP32[(($221)>>2)]=$219;
 var $222=$noskippable;
 var $223=((($222)+(1))|0);
 $noskippable=$223;
 var $224=(($spare_foreign_keys)|0);
 var $225=(($temp)|0);
 var $226=_cut_token($224,0,$225);
 _attribute_dispose($att);
 label=49;break;
 case 48: 
 var $228=(($temp)|0);
 _raise_error(5,0,$228,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=102;break;
 case 49: 
 label=45;break;
 case 50: 
 label=51;break;
 case 51: 
 var $232=$5;
 var $233=_strlen($232);
 var $234=($233|0)==0;
 if($234){label=52;break;}else{label=53;break;}
 case 52: 
 _raise_error(33,0,10264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $236=(($spare_qualification)|0);
 var $237=_strcpy($236,32);
 var $238=(($spare_qualification)|0);
 $5=$238;
 label=53;break;
 case 53: 
 var $240=$3;
 var $241=_tuple_readfirst($240,1,0);
 HEAP32[(($ltuple)>>2)]=$241;
 var $242=HEAP32[(($ltuple)>>2)];
 HEAP32[(($pltuple)>>2)]=$242;
 var $243=HEAP32[(($pltuple)>>2)];
 _do_debug(5,1704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$243,tempVarArgs)); STACKTOP=tempVarArgs;
 var $244=$4;
 var $245=_tuple_readfirst($244,1,0);
 HEAP32[(($rtuple)>>2)]=$245;
 var $246=HEAP32[(($rtuple)>>2)];
 HEAP32[(($prtuple)>>2)]=$246;
 var $247=$rtrel;
 var $248=_tuple_prepare($247);
 HEAP32[(($ntuple)>>2)]=$248;
 var $249=HEAP32[(($ntuple)>>2)];
 var $250=($249|0)!=0;
 if($250){label=54;break;}else{label=98;break;}
 case 54: 
 var $252=HEAP32[(($rtuple)>>2)];
 var $253=($252|0)!=0;
 if($253){label=55;break;}else{label=98;break;}
 case 55: 
 var $255=HEAP32[(($ltuple)>>2)];
 var $256=($255|0)!=0;
 if($256){label=56;break;}else{label=98;break;}
 case 56: 
 var $258=$5;
 var $259=HEAP32[(($ltuple)>>2)];
 var $260=HEAP32[(($rtuple)>>2)];
 var $261=_build_condition($258,$259,$260);
 HEAP32[(($condition)>>2)]=$261;
 var $262=HEAP32[(($condition)>>2)];
 var $263=($262|0)!=0;
 if($263){label=57;break;}else{label=96;break;}
 case 57: 
 $lresult=0;
 label=58;break;
 case 58: 
 var $266=HEAP32[(($condition)>>2)];
 var $267=($266|0)!=0;
 if($267){label=59;break;}else{var $272=0;label=60;break;}
 case 59: 
 var $269=HEAP32[(($ltuple)>>2)];
 var $270=($269|0)!=0;
 var $272=$270;label=60;break;
 case 60: 
 var $272;
 if($272){label=61;break;}else{label=95;break;}
 case 61: 
 var $274=$4;
 var $275=HEAP32[(($prtuple)>>2)];
 var $276=_tuple_readfirst($274,0,$275);
 HEAP32[(($rtuple)>>2)]=$276;
 $rresult=0;
 label=62;break;
 case 62: 
 var $278=HEAP32[(($rtuple)>>2)];
 var $279=($278|0)!=0;
 if($279){label=63;break;}else{label=94;break;}
 case 63: 
 var $281=HEAP8[(37320)];
 var $282=($281&255);
 var $283=($282|0)!=0;
 if($283){label=64;break;}else{label=66;break;}
 case 64: 
 var $285=HEAP32[((37312)>>2)];
 var $286=($285|0)>=3;
 if($286){label=65;break;}else{label=66;break;}
 case 65: 
 var $288=HEAP32[((_stderr)>>2)];
 _leap_fprintf($288,1632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $289=HEAP32[(($ltuple)>>2)];
 _tuple_print($289);
 var $290=HEAP32[((_stderr)>>2)];
 _leap_fprintf($290,1544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $291=HEAP32[(($rtuple)>>2)];
 _tuple_print($291);
 label=66;break;
 case 66: 
 var $293=HEAP32[(($condition)>>2)];
 var $294=HEAP32[(($ltuple)>>2)];
 var $295=HEAP32[(($rtuple)>>2)];
 var $296=_evaluate($293,$294,$295);
 var $297=($296&255);
 var $298=($297|0)==1;
 if($298){label=67;break;}else{label=92;break;}
 case 67: 
 _do_debug(3,30848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $count=0;
 var $300=$internal_jointype;
 var $301=($300|0)==0;
 if($301){label=68;break;}else{label=78;break;}
 case 68: 
 $position=0;
 label=69;break;
 case 69: 
 var $304=$count;
 var $305=HEAP32[(($ltuple)>>2)];
 var $306=(($305+8)|0);
 var $307=HEAP8[($306)];
 var $308=($307&255);
 var $309=($304|0)<($308|0);
 if($309){label=70;break;}else{label=77;break;}
 case 70: 
 var $311=$position;
 var $312=(($skip_list+($311<<2))|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=$count;
 var $315=($313|0)==($314|0);
 if($315){label=71;break;}else{label=72;break;}
 case 71: 
 var $317=$position;
 var $318=((($317)+(1))|0);
 $position=$318;
 label=73;break;
 case 72: 
 var $320=$count;
 var $321=$position;
 var $322=((($320)-($321))|0);
 var $323=HEAP32[(($ntuple)>>2)];
 var $324=(($323)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=(($325+($322<<2))|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(($327+8)|0);
 var $329=(($328)|0);
 var $330=$count;
 var $331=HEAP32[(($ltuple)>>2)];
 var $332=(($331)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($333+($330<<2))|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($335+8)|0);
 var $337=(($336)|0);
 var $338=_strcpy($329,$337);
 label=73;break;
 case 73: 
 var $340=HEAP8[(37320)];
 var $341=($340&255);
 var $342=($341|0)!=0;
 if($342){label=74;break;}else{label=76;break;}
 case 74: 
 var $344=HEAP32[((37312)>>2)];
 var $345=($344|0)>=3;
 if($345){label=75;break;}else{label=76;break;}
 case 75: 
 var $347=HEAP32[(($ntuple)>>2)];
 _tuple_def($347);
 label=76;break;
 case 76: 
 var $349=$count;
 var $350=((($349)+(1))|0);
 $count=$350;
 label=69;break;
 case 77: 
 label=82;break;
 case 78: 
 $position=0;
 label=79;break;
 case 79: 
 var $354=$count;
 var $355=HEAP32[(($ltuple)>>2)];
 var $356=(($355+8)|0);
 var $357=HEAP8[($356)];
 var $358=($357&255);
 var $359=($354|0)<($358|0);
 if($359){label=80;break;}else{label=81;break;}
 case 80: 
 var $361=$count;
 var $362=HEAP32[(($ntuple)>>2)];
 var $363=(($362)|0);
 var $364=HEAP32[(($363)>>2)];
 var $365=(($364+($361<<2))|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(($366+8)|0);
 var $368=(($367)|0);
 var $369=$count;
 var $370=HEAP32[(($ltuple)>>2)];
 var $371=(($370)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($372+($369<<2))|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(($374+8)|0);
 var $376=(($375)|0);
 var $377=_strcpy($368,$376);
 var $378=$count;
 var $379=((($378)+(1))|0);
 $count=$379;
 label=79;break;
 case 81: 
 label=82;break;
 case 82: 
 var $382=HEAP8[(37320)];
 var $383=($382&255);
 var $384=($383|0)!=0;
 if($384){label=83;break;}else{label=85;break;}
 case 83: 
 var $386=HEAP32[((37312)>>2)];
 var $387=($386|0)>=3;
 if($387){label=84;break;}else{label=85;break;}
 case 84: 
 var $389=HEAP32[(($ntuple)>>2)];
 _tuple_def($389);
 label=85;break;
 case 85: 
 $count=0;
 label=86;break;
 case 86: 
 var $392=$count;
 var $393=HEAP32[(($rtuple)>>2)];
 var $394=(($393+8)|0);
 var $395=HEAP8[($394)];
 var $396=($395&255);
 var $397=($392|0)<($396|0);
 if($397){label=87;break;}else{label=88;break;}
 case 87: 
 var $399=$count;
 var $400=HEAP32[(($ltuple)>>2)];
 var $401=(($400+8)|0);
 var $402=HEAP8[($401)];
 var $403=($402&255);
 var $404=((($399)+($403))|0);
 var $405=$position;
 var $406=((($404)-($405))|0);
 var $407=HEAP32[(($ntuple)>>2)];
 var $408=(($407)|0);
 var $409=HEAP32[(($408)>>2)];
 var $410=(($409+($406<<2))|0);
 var $411=HEAP32[(($410)>>2)];
 var $412=(($411+8)|0);
 var $413=(($412)|0);
 var $414=$count;
 var $415=HEAP32[(($rtuple)>>2)];
 var $416=(($415)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=(($417+($414<<2))|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=(($419+8)|0);
 var $421=(($420)|0);
 var $422=_strcpy($413,$421);
 var $423=$count;
 var $424=((($423)+(1))|0);
 $count=$424;
 label=86;break;
 case 88: 
 var $426=HEAP8[(37320)];
 var $427=($426&255);
 var $428=($427|0)!=0;
 if($428){label=89;break;}else{label=91;break;}
 case 89: 
 var $430=HEAP32[((37312)>>2)];
 var $431=($430|0)>=3;
 if($431){label=90;break;}else{label=91;break;}
 case 90: 
 var $433=HEAP32[(($ntuple)>>2)];
 _tuple_def($433);
 label=91;break;
 case 91: 
 var $435=HEAP32[(($ntuple)>>2)];
 var $436=_tuple_append($435);
 label=93;break;
 case 92: 
 _do_debug(3,30544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=93;break;
 case 93: 
 var $439=_tuple_readnext($rtuple,0);
 label=62;break;
 case 94: 
 _close_tuple($rtuple,0);
 var $441=_tuple_readnext($ltuple,0);
 label=58;break;
 case 95: 
 var $443=_destroy_condition($condition);
 var $444=HEAP32[(($pltuple)>>2)];
 _do_debug(3,1704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$444,tempVarArgs)); STACKTOP=tempVarArgs;
 _close_tuple($pltuple,2);
 _close_tuple($ntuple,2);
 _close_tuple($prtuple,2);
 label=97;break;
 case 96: 
 _do_debug(3,30392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _close_tuple($ltuple,2);
 _close_tuple($rtuple,2);
 _close_tuple($ntuple,2);
 label=97;break;
 case 97: 
 label=99;break;
 case 98: 
 _do_debug(3,30256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _close_tuple($ltuple,2);
 _close_tuple($rtuple,2);
 _close_tuple($ntuple,2);
 label=99;break;
 case 99: 
 _do_debug(1,30072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $449=$rtrel;
 $1=$449;
 label=102;break;
 case 100: 
 _do_debug(1,29912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=102;break;
 case 101: 
 _do_debug(1,29784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=102;break;
 case 102: 
 var $453=$1;
 STACKTOP=sp;return $453;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_duplicate($db,$rel,$destname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $rtrel;
 var $rname;
 var $rel_name=sp;
 var $ct=(sp)+(32);
 var $nt=(sp)+(40);
 var $counter;
 $2=$db;
 $3=$rel;
 $4=$destname;
 _do_debug(1,29632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$4;
 var $6=_strlen($5);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=(($rel_name)|0);
 var $10=_generate_random_string(6,$9);
 $rname=$10;
 label=4;break;
 case 3: 
 var $12=$4;
 $rname=$12;
 label=4;break;
 case 4: 
 var $14=$2;
 var $15=$3;
 var $16=$rname;
 var $17=_create_duplicate_rtn_relation($14,$15,$16);
 $rtrel=$17;
 var $18=$rtrel;
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=13;break;}
 case 5: 
 var $21=$3;
 var $22=($21|0)!=0;
 if($22){label=6;break;}else{label=13;break;}
 case 6: 
 var $24=$3;
 var $25=_tuple_readfirst($24,1,0);
 HEAP32[(($ct)>>2)]=$25;
 var $26=$rtrel;
 var $27=_tuple_prepare($26);
 HEAP32[(($nt)>>2)]=$27;
 label=7;break;
 case 7: 
 var $29=HEAP32[(($ct)>>2)];
 var $30=($29|0)!=0;
 if($30){label=8;break;}else{label=12;break;}
 case 8: 
 $counter=0;
 label=9;break;
 case 9: 
 var $33=$counter;
 var $34=HEAP32[(($ct)>>2)];
 var $35=(($34+8)|0);
 var $36=HEAP8[($35)];
 var $37=($36&255);
 var $38=($33>>>0)<($37>>>0);
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=$counter;
 var $41=HEAP32[(($nt)>>2)];
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+($40<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+8)|0);
 var $47=(($46)|0);
 var $48=$counter;
 var $49=HEAP32[(($ct)>>2)];
 var $50=(($49)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+($48<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+8)|0);
 var $55=(($54)|0);
 var $56=_strcpy($47,$55);
 var $57=$counter;
 var $58=((($57)+(1))|0);
 $counter=$58;
 label=9;break;
 case 11: 
 var $60=HEAP32[(($nt)>>2)];
 var $61=_tuple_append($60);
 var $62=_tuple_readnext($ct,0);
 label=7;break;
 case 12: 
 label=14;break;
 case 13: 
 _do_debug(1,29520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=15;break;
 case 14: 
 _close_tuple($nt,2);
 _do_debug(1,29440,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $66=$rtrel;
 $1=$66;
 label=15;break;
 case 15: 
 var $68=$1;
 STACKTOP=sp;return $68;
  default: assert(0, "bad label: " + label);
 }

}


function _rl_compact($db,$rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $nrel;
 var $rtrel;
 var $targetname=sp;
 var $noattribs=(sp)+(32);
 var $nnoattribs=(sp)+(40);
 var $temp=(sp)+(48);
 var $ntemp=(sp)+(56);
 var $sys=(sp)+(64);
 var $nsys=(sp)+(72);
 var $fptr=(sp)+(80);
 var $nname=(sp)+(88);
 var $rname=(sp)+(120);
 var $redirect;
 $2=$db;
 $3=$rel;
 var $4=$targetname;
 _memset($4, 0, 26)|0;
 var $5=$3;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+4669)|0);
 var $8=HEAP8[($7)];
 $redirect=$8;
 var $9=$redirect;
 var $10=($9&255);
 var $11=($10|0)==1;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=_ddredirect_start();
 label=3;break;
 case 3: 
 var $15=$2;
 var $16=$3;
 var $17=HEAP32[(($16)>>2)];
 var $18=_rl_duplicate($15,$17,29336);
 $nrel=$18;
 var $19=$nrel;
 var $20=($19|0)!=0;
 if($20){label=4;break;}else{label=12;break;}
 case 4: 
 var $22=(($targetname)|0);
 var $23=$3;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24)|0);
 var $26=(($25)|0);
 var $27=_strcpy($22,$26);
 var $28=$3;
 var $29=HEAP32[(($28)>>2)];
 var $30=_generate_fileh($29);
 HEAP32[(($fptr)>>2)]=$30;
 var $31=(($rname)|0);
 var $32=_tuple_readheader($fptr,$noattribs,$temp,$sys,$31);
 var $33=HEAP32[(($fptr)>>2)];
 var $34=_fclose($33);
 var $35=$2;
 var $36=$3;
 _relation_remove($35,$36);
 var $37=$2;
 var $38=$nrel;
 var $39=(($38)|0);
 var $40=(($39)|0);
 var $41=(($targetname)|0);
 var $42=_relation_rename($37,$40,$41);
 $rtrel=$42;
 var $43=HEAP8[($temp)];
 var $44=$rtrel;
 var $45=(($44+4660)|0);
 HEAP8[($45)]=$43;
 var $46=HEAP8[($sys)];
 var $47=$rtrel;
 var $48=(($47+4669)|0);
 HEAP8[($48)]=$46;
 var $49=$rtrel;
 var $50=_generate_fileh($49);
 HEAP32[(($fptr)>>2)]=$50;
 var $51=(($nname)|0);
 var $52=_tuple_readheader($fptr,$nnoattribs,$ntemp,$nsys,$51);
 var $53=$2;
 var $54=(($targetname)|0);
 var $55=HEAP8[($noattribs)];
 var $56=HEAP8[($temp)];
 var $57=HEAP8[($sys)];
 var $58=_relation_update_header($53,$54,$55,$56,$57,$fptr);
 var $59=HEAP32[(($fptr)>>2)];
 var $60=_fclose($59);
 var $61=$redirect;
 var $62=($61&255);
 var $63=($62|0)==1;
 if($63){label=5;break;}else{label=8;break;}
 case 5: 
 var $65=_ddredirect_stop();
 var $66=($65|0)==1;
 if($66){label=6;break;}else{label=7;break;}
 case 6: 
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $70=$rtrel;
 var $71=($70|0)!=0;
 if($71){label=9;break;}else{label=10;break;}
 case 9: 
 var $73=$rtrel;
 var $74=$3;
 HEAP32[(($74)>>2)]=$73;
 label=11;break;
 case 10: 
 var $76=(($targetname)|0);
 _raise_error(60,0,$76,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=15;break;
 case 11: 
 label=15;break;
 case 12: 
 var $79=_ddredirect_stop();
 var $80=($79|0)==1;
 if($80){label=13;break;}else{label=14;break;}
 case 13: 
 var $82=$2;
 var $83=_ddredirect_execute($82);
 label=14;break;
 case 14: 
 var $85=$3;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86)|0);
 var $88=(($87)|0);
 _raise_error(60,0,$88,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=15;break;
 case 15: 
 var $90=$1;
 STACKTOP=sp;return $90;
  default: assert(0, "bad label: " + label);
 }

}


function _insert($db,$rel,$data){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+17360)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $nt=sp;
 var $all=(sp)+(8);
 var $citem;
 var $expression=(sp)+(16328);
 var $counter;
 $2=$db;
 $3=$rel;
 $4=$data;
 $counter=0;
 var $5=$3;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=14;break;}
 case 2: 
 var $8=$3;
 var $9=_tuple_prepare($8);
 HEAP32[(($nt)>>2)]=$9;
 var $10=(($all)|0);
 var $11=$4;
 var $12=_strcpy($10,$11);
 var $13=(($all)|0);
 var $14=_strtok($13,29072);
 $citem=$14;
 label=3;break;
 case 3: 
 var $16=$counter;
 var $17=HEAP32[(($nt)>>2)];
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+4644)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=($16>>>0)<=($26>>>0);
 if($27){label=4;break;}else{var $32=0;label=5;break;}
 case 4: 
 var $29=$citem;
 var $30=($29|0)!=0;
 var $32=$30;label=5;break;
 case 5: 
 var $32;
 if($32){label=6;break;}else{label=10;break;}
 case 6: 
 var $34=$citem;
 _strip_leading_spaces($34);
 var $35=$citem;
 _strip_trailing_spaces($35);
 var $36=$citem;
 var $37=_strcmp($36,28936);
 var $38=($37|0)==0;
 if($38){label=7;break;}else{label=8;break;}
 case 7: 
 var $40=$counter;
 var $41=HEAP32[(($nt)>>2)];
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+($40<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+8)|0);
 var $47=(($46)|0);
 var $48=_strcpy($47,51528);
 label=9;break;
 case 8: 
 var $50=$counter;
 var $51=HEAP32[(($nt)>>2)];
 var $52=(($51)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+($50<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+8)|0);
 var $57=(($56)|0);
 var $58=$citem;
 var $59=_strcpy($57,$58);
 label=9;break;
 case 9: 
 var $61=_strtok(0,29072);
 $citem=$61;
 var $62=$counter;
 var $63=((($62)+(1))|0);
 $counter=$63;
 label=3;break;
 case 10: 
 var $65=HEAP32[(($nt)>>2)];
 var $66=_tuple_append($65);
 _close_tuple($nt,2);
 var $67=$3;
 var $68=(($67)|0);
 var $69=(($68)|0);
 var $70=_strcmp($69,4744);
 var $71=($70|0)!=0;
 if($71){label=11;break;}else{label=12;break;}
 case 11: 
 _do_debug(3,4528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $73=(($expression)|0);
 var $74=$3;
 var $75=(($74)|0);
 var $76=(($75)|0);
 var $77=_sprintf($73,4344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=4744,HEAP32[(((tempVarArgs)+(8))>>2)]=4120,HEAP32[(((tempVarArgs)+(16))>>2)]=$76,HEAP32[(((tempVarArgs)+(24))>>2)]=4000,HEAP32[(((tempVarArgs)+(32))>>2)]=3880,tempVarArgs)); STACKTOP=tempVarArgs;
 var $78=$2;
 var $79=(($expression)|0);
 _ddmaintenance($78,$79,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 12: 
 _do_debug(3,3720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 13: 
 var $82=$3;
 $1=$82;
 label=15;break;
 case 14: 
 $1=0;
 label=15;break;
 case 15: 
 var $85=$1;
 STACKTOP=sp;return $85;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_dispose($ntuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $count;
 $1=$ntuple;
 _do_debug(1,6008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=10;break;}
 case 2: 
 var $5=$1;
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=10;break;}
 case 3: 
 _levindicator(0);
 $count=0;
 label=4;break;
 case 4: 
 var $10=$count;
 var $11=($10>>>0)<64;
 if($11){label=5;break;}else{label=7;break;}
 case 5: 
 var $13=$count;
 _do_debug(7,23648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 var $14=$count;
 var $15=$1;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+($14<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+4)|0);
 _attribute_dispose($21);
 var $22=$count;
 var $23=$1;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+($22<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 _free($29);
 var $30=$count;
 var $31=$1;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+($30<<2))|0);
 HEAP32[(($35)>>2)]=0;
 label=6;break;
 case 6: 
 var $37=$count;
 var $38=((($37)+(1))|0);
 $count=$38;
 label=4;break;
 case 7: 
 _levindicator(1);
 var $40=$count;
 _do_debug(7,20128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$40,tempVarArgs)); STACKTOP=tempVarArgs;
 var $41=$1;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+4)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0)!=0;
 if($45){label=8;break;}else{label=9;break;}
 case 8: 
 var $47=$count;
 _do_debug(7,16672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$47,tempVarArgs)); STACKTOP=tempVarArgs;
 var $48=$1;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=_fclose($51);
 var $53=$count;
 _do_debug(7,12984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$53,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 var $55=$1;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58)|0);
 var $60=$59;
 _free($60);
 var $61=$count;
 _do_debug(7,10072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$61,tempVarArgs)); STACKTOP=tempVarArgs;
 var $62=$1;
 var $63=HEAP32[(($62)>>2)];
 var $64=$63;
 _free($64);
 var $65=$1;
 HEAP32[(($65)>>2)]=0;
 label=10;break;
 case 10: 
 _do_debug(1,7344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _raw_tuple_prepare(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $count;
 var $newtuple;
 var $1=_malloc(24);
 var $2=$1;
 $newtuple=$2;
 var $3=$newtuple;
 var $4=$3;
 _check_assign($4,5000);
 var $5=_malloc(256);
 var $6=$5;
 var $7=$newtuple;
 var $8=(($7)|0);
 HEAP32[(($8)>>2)]=$6;
 var $9=$newtuple;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 _check_assign($12,3328);
 $count=0;
 label=2;break;
 case 2: 
 var $14=$count;
 var $15=($14>>>0)<64;
 if($15){label=3;break;}else{label=5;break;}
 case 3: 
 var $17=_malloc(264);
 var $18=$17;
 var $19=$count;
 var $20=$newtuple;
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+($19<<2))|0);
 HEAP32[(($23)>>2)]=$18;
 var $24=$count;
 var $25=$newtuple;
 var $26=(($25)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+($24<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 _check_assign($30,1752);
 var $31=$count;
 var $32=$newtuple;
 var $33=(($32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+($31<<2))|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36)|0);
 HEAP32[(($37)>>2)]=0;
 var $38=$count;
 var $39=$newtuple;
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+($38<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+4)|0);
 HEAP32[(($44)>>2)]=0;
 var $45=$count;
 var $46=$newtuple;
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+8)|0);
 var $52=(($51)|0);
 var $53=_strcpy($52,51576);
 label=4;break;
 case 4: 
 var $55=$count;
 var $56=((($55)+(1))|0);
 $count=$56;
 label=2;break;
 case 5: 
 var $58=$newtuple;
 var $59=(($58+4)|0);
 HEAP32[(($59)>>2)]=0;
 var $60=$newtuple;
 var $61=(($60+20)|0);
 HEAP32[(($61)>>2)]=-1;
 var $62=$newtuple;
 var $63=(($62+16)|0);
 HEAP32[(($63)>>2)]=0;
 var $64=$newtuple;
 var $65=(($64+12)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=$newtuple;
 STACKTOP=sp;return $66;
  default: assert(0, "bad label: " + label);
 }

}


function _get_relation($t){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$t;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 STACKTOP=sp;return $8;
}


function _close_tuple($ntuple,$reuse){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$ntuple;
 $2=$reuse;
 var $3=$1;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=7;break;}
 case 2: 
 var $6=$1;
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=6;break;}
 case 3: 
 var $10=$2;
 var $11=($10|0)!=0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$1;
 _tuple_dispose($13);
 var $14=$1;
 HEAP32[(($14)>>2)]=0;
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_revprint($rel,$ntuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $counter;
 $1=$rel;
 $2=$ntuple;
 $counter=0;
 var $3=$1;
 var $4=(($3)|0);
 var $5=(($4)|0);
 _leap_printf(24776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$5,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 var $7=$counter;
 var $8=$2;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+($7<<2))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)!=0;
 if($15){label=3;break;}else{label=9;break;}
 case 3: 
 var $17=$counter;
 var $18=$2;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+($17<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=(($23)|0);
 var $25=_strlen($24);
 var $26=($25|0)==0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 _leap_printf(24080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 5: 
 var $29=$counter;
 var $30=$2;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+($29<<2))|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+8)|0);
 var $36=(($35)|0);
 _leap_printf(23560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$36,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 var $38=$counter;
 var $39=((($38)+(1))|0);
 $counter=$39;
 var $40=$counter;
 var $41=$2;
 var $42=(($41)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+($40<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)!=0;
 if($48){label=7;break;}else{label=8;break;}
 case 7: 
 _leap_printf(23184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 label=2;break;
 case 9: 
 _leap_printf(22832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_def($ntuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $counter;
 var $fmt=sp;
 var $spacing_var;
 var $tabs;
 $1=$ntuple;
 $tabs=0;
 $counter=0;
 var $2=_resolve_variable(22584);
 $spacing_var=$2;
 var $3=$spacing_var;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=9;break;}
 case 2: 
 var $6=$spacing_var;
 var $7=_strcmp($6,22184);
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $tabs=0;
 label=8;break;
 case 4: 
 var $11=$spacing_var;
 var $12=_strcmp($11,21872);
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 $tabs=-1;
 label=7;break;
 case 6: 
 var $16=$spacing_var;
 var $17=_atoi($16);
 $tabs=$17;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $22=$counter;
 var $23=$1;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+($22<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)!=0;
 if($30){label=11;break;}else{label=26;break;}
 case 11: 
 var $32=$counter;
 var $33=$1;
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+($32<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+52)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41>>>0)>0;
 if($42){label=12;break;}else{label=17;break;}
 case 12: 
 var $44=$tabs;
 var $45=($44|0)==0;
 if($45){label=13;break;}else{label=17;break;}
 case 13: 
 var $47=$counter;
 var $48=$1;
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+($47<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+48)|0);
 var $56=HEAP8[($55)];
 var $57=(($56<<24)>>24);
 var $58=($57|0)==3;
 if($58){label=14;break;}else{label=15;break;}
 case 14: 
 var $60=(($fmt)|0);
 var $61=_sprintf($60,21408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 15: 
 var $63=(($fmt)|0);
 var $64=$counter;
 var $65=$1;
 var $66=(($65)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+($64<<2))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+4)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+52)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$counter;
 var $75=$1;
 var $76=(($75)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+($74<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+4)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+52)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=_sprintf($63,21064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$73,HEAP32[(((tempVarArgs)+(8))>>2)]=$83,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 16: 
 label=25;break;
 case 17: 
 var $87=$counter;
 var $88=$1;
 var $89=(($88)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+($87<<2))|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+4)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(($94+52)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96>>>0)<=0;
 if($97){label=19;break;}else{label=18;break;}
 case 18: 
 var $99=$tabs;
 var $100=($99|0)==-1;
 if($100){label=19;break;}else{label=20;break;}
 case 19: 
 var $102=(($fmt)|0);
 var $103=_sprintf($102,20776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=24;break;
 case 20: 
 var $105=$counter;
 var $106=$1;
 var $107=(($106)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+($105<<2))|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+4)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+48)|0);
 var $114=HEAP8[($113)];
 var $115=(($114<<24)>>24);
 var $116=($115|0)==3;
 if($116){label=21;break;}else{label=22;break;}
 case 21: 
 var $118=(($fmt)|0);
 var $119=_sprintf($118,21408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 22: 
 var $121=(($fmt)|0);
 var $122=$tabs;
 var $123=$tabs;
 var $124=_sprintf($121,21064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$122,HEAP32[(((tempVarArgs)+(8))>>2)]=$123,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $128=HEAP32[((_stdout)>>2)];
 var $129=$counter;
 var $130=$1;
 var $131=(($130)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+($129<<2))|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+44)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$counter;
 var $140=$1;
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+($139<<2))|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+4)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146)|0);
 var $148=(($147)|0);
 _leap_fprintf($128,20344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$138,HEAP32[(((tempVarArgs)+(8))>>2)]=$148,tempVarArgs)); STACKTOP=tempVarArgs;
 var $149=$counter;
 var $150=((($149)+(1))|0);
 $counter=$150;
 label=10;break;
 case 26: 
 var $152=HEAP32[((_stdout)>>2)];
 _leap_fprintf($152,20064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $counter=0;
 label=27;break;
 case 27: 
 var $154=$counter;
 var $155=$1;
 var $156=(($155)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+($154<<2))|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($161|0)!=0;
 if($162){label=28;break;}else{label=43;break;}
 case 28: 
 var $164=$counter;
 var $165=$1;
 var $166=(($165)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+($164<<2))|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+4)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+52)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($173>>>0)>0;
 if($174){label=29;break;}else{label=34;break;}
 case 29: 
 var $176=$tabs;
 var $177=($176|0)==0;
 if($177){label=30;break;}else{label=34;break;}
 case 30: 
 var $179=$counter;
 var $180=$1;
 var $181=(($180)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+($179<<2))|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+48)|0);
 var $188=HEAP8[($187)];
 var $189=(($188<<24)>>24);
 var $190=($189|0)==3;
 if($190){label=31;break;}else{label=32;break;}
 case 31: 
 var $192=(($fmt)|0);
 var $193=_sprintf($192,21408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=33;break;
 case 32: 
 var $195=(($fmt)|0);
 var $196=$counter;
 var $197=$1;
 var $198=(($197)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+($196<<2))|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+4)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+52)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=$counter;
 var $207=$1;
 var $208=(($207)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+($206<<2))|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+4)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+52)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=_sprintf($195,21064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$205,HEAP32[(((tempVarArgs)+(8))>>2)]=$215,tempVarArgs)); STACKTOP=tempVarArgs;
 label=33;break;
 case 33: 
 label=42;break;
 case 34: 
 var $219=$counter;
 var $220=$1;
 var $221=(($220)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=(($222+($219<<2))|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224+4)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+52)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228>>>0)<=0;
 if($229){label=36;break;}else{label=35;break;}
 case 35: 
 var $231=$tabs;
 var $232=($231|0)==-1;
 if($232){label=36;break;}else{label=37;break;}
 case 36: 
 var $234=(($fmt)|0);
 var $235=_sprintf($234,20776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=41;break;
 case 37: 
 var $237=$counter;
 var $238=$1;
 var $239=(($238)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+($237<<2))|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+4)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+48)|0);
 var $246=HEAP8[($245)];
 var $247=(($246<<24)>>24);
 var $248=($247|0)==3;
 if($248){label=38;break;}else{label=39;break;}
 case 38: 
 var $250=(($fmt)|0);
 var $251=_sprintf($250,21408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=40;break;
 case 39: 
 var $253=(($fmt)|0);
 var $254=$tabs;
 var $255=$tabs;
 var $256=_sprintf($253,21064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$254,HEAP32[(((tempVarArgs)+(8))>>2)]=$255,tempVarArgs)); STACKTOP=tempVarArgs;
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 var $260=HEAP32[((_stdout)>>2)];
 var $261=(($fmt)|0);
 var $262=$counter;
 var $263=$1;
 var $264=(($263)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($265+($262<<2))|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($267+8)|0);
 var $269=(($268)|0);
 _leap_fprintf($260,$261,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$269,tempVarArgs)); STACKTOP=tempVarArgs;
 var $270=$counter;
 var $271=((($270)+(1))|0);
 $counter=$271;
 label=27;break;
 case 43: 
 var $273=HEAP32[((_stdout)>>2)];
 _leap_fprintf($273,20064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_print($ntuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $counter;
 var $spacing_var;
 var $tabs;
 $1=$ntuple;
 $tabs=0;
 $counter=0;
 var $2=_resolve_variable(22584);
 $spacing_var=$2;
 var $3=$spacing_var;
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=9;break;}
 case 2: 
 var $6=$spacing_var;
 var $7=_strcmp($6,22184);
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 $tabs=0;
 label=8;break;
 case 4: 
 var $11=$spacing_var;
 var $12=_strcmp($11,21872);
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 $tabs=-1;
 label=7;break;
 case 6: 
 var $16=$spacing_var;
 var $17=_atoi($16);
 $tabs=$17;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $22=$counter;
 var $23=$1;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+($22<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)!=0;
 if($30){label=11;break;}else{label=12;break;}
 case 11: 
 var $32=$counter;
 var $33=$1;
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+($32<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+26)|0);
 var $41=(($40)|0);
 var $42=$counter;
 var $43=$1;
 var $44=(($43)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+($42<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=(($48)|0);
 _leap_printf($41,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$49,tempVarArgs)); STACKTOP=tempVarArgs;
 var $50=$counter;
 var $51=((($50)+(1))|0);
 $counter=$51;
 label=10;break;
 case 12: 
 _leap_printf(20064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_to_string($t,$tuple_string){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $position;
 $1=$t;
 $2=$tuple_string;
 $position=0;
 label=2;break;
 case 2: 
 var $4=$position;
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+($4<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=7;break;}
 case 3: 
 var $14=$position;
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$2;
 var $18=$position;
 var $19=$1;
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+8)|0);
 var $25=(($24)|0);
 var $26=_strcpy($17,$25);
 label=6;break;
 case 5: 
 var $28=$2;
 var $29=$position;
 var $30=$1;
 var $31=(($30)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+($29<<2))|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+8)|0);
 var $36=(($35)|0);
 var $37=_strcat($28,$36);
 label=6;break;
 case 6: 
 var $39=$position;
 var $40=((($39)+(1))|0);
 $position=$40;
 label=2;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_find_attribute($ct,$name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $counter;
 var $found;
 $2=$ct;
 $3=$name;
 $counter=0;
 $found=0;
 label=2;break;
 case 2: 
 var $5=$found;
 var $6=($5&255);
 var $7=($6|0)==0;
 if($7){label=3;break;}else{var $19=0;label=4;break;}
 case 3: 
 var $9=$counter;
 var $10=$2;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+($9<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)!=0;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=$3;
 var $22=$counter;
 var $23=$2;
 var $24=(($23)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+($22<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+4)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29)|0);
 var $31=(($30)|0);
 var $32=_strcmp($21,$31);
 var $33=($32|0)==0;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 $found=1;
 label=8;break;
 case 7: 
 var $36=$counter;
 var $37=((($36)+(1))|0);
 $counter=$37;
 label=8;break;
 case 8: 
 label=2;break;
 case 9: 
 var $40=$found;
 var $41=($40&255);
 var $42=($41|0)==1;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $44=$counter;
 var $45=$2;
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+($44<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+4)|0);
 var $51=HEAP32[(($50)>>2)];
 $1=$51;
 label=12;break;
 case 11: 
 $1=0;
 label=12;break;
 case 12: 
 var $54=$1;
 STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_find_attribute_val($ct,$name){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $counter;
 var $found;
 $2=$ct;
 $3=$name;
 $counter=0;
 $found=0;
 label=2;break;
 case 2: 
 var $5=$found;
 var $6=($5&255);
 var $7=($6|0)==0;
 if($7){label=3;break;}else{var $22=0;label=5;break;}
 case 3: 
 var $9=$2;
 var $10=($9|0)!=0;
 if($10){label=4;break;}else{var $22=0;label=5;break;}
 case 4: 
 var $12=$counter;
 var $13=$2;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+($12<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)!=0;
 var $22=$20;label=5;break;
 case 5: 
 var $22;
 if($22){label=6;break;}else{label=10;break;}
 case 6: 
 var $24=$3;
 var $25=$counter;
 var $26=$2;
 var $27=(($26)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32)|0);
 var $34=(($33)|0);
 var $35=_strcmp($24,$34);
 var $36=($35|0)==0;
 if($36){label=7;break;}else{label=8;break;}
 case 7: 
 $found=1;
 label=9;break;
 case 8: 
 var $39=$counter;
 var $40=((($39)+(1))|0);
 $counter=$40;
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 var $43=$found;
 var $44=($43&255);
 var $45=($44|0)==1;
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=$counter;
 var $48=$2;
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+($47<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+8)|0);
 var $54=(($53)|0);
 $1=$54;
 label=13;break;
 case 12: 
 $1=0;
 label=13;break;
 case 13: 
 var $57=$1;
 STACKTOP=sp;return $57;
  default: assert(0, "bad label: " + label);
 }

}


function _get_attribute_info($outdtype,$dtype){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$outdtype;
 $2=$dtype;
 var $3=$2;
 var $4=($3&255);
 if(($4|0)==1){ label=2;break;}else if(($4|0)==2){ label=3;break;}else if(($4|0)==3){ label=4;break;}else{label=5;break;}
 case 2: 
 var $6=$1;
 var $7=_strcpy($6,18032);
 label=6;break;
 case 3: 
 var $9=$1;
 var $10=_strcpy($9,17584);
 label=6;break;
 case 4: 
 var $12=$1;
 var $13=_strcpy($12,17240);
 label=6;break;
 case 5: 
 var $15=$1;
 var $16=_strcpy($15,16856);
 label=6;break;
 case 6: 
 var $18=$1;
 STACKTOP=sp;return $18;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_create_write_attribute($catt,$fptr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $res;
 var $dtype=sp;
 var $size=(sp)+(8);
 var $keycomponent=(sp)+(16);
 $2=$catt;
 $3=$fptr;
 HEAP8[($keycomponent)]=0;
 _do_debug(1,16576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=$2;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=$3;
 var $8=HEAP32[(($7)>>2)];
 var $9=_fwrite($6,25,1,$8);
 $res=$9;
 var $10=$res;
 var $11=($10|0)!=1;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=HEAP32[((_stdout)>>2)];
 _leap_fprintf($13,16240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,15880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=17;break;
 case 3: 
 var $15=$2;
 var $16=(($15+48)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 if(($18|0)==1){ label=4;break;}else if(($18|0)==2){ label=7;break;}else if(($18|0)==3){ label=8;break;}else{label=9;break;}
 case 4: 
 HEAP8[($dtype)]=1;
 var $20=$2;
 var $21=(($20+52)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22)&255);
 HEAP8[($size)]=$23;
 var $24=HEAP8[($size)];
 var $25=($24&255);
 var $26=($25|0)==0;
 if($26){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP8[($size)]=-1;
 label=6;break;
 case 6: 
 label=10;break;
 case 7: 
 HEAP8[($dtype)]=2;
 HEAP8[($size)]=4;
 label=10;break;
 case 8: 
 HEAP8[($dtype)]=3;
 HEAP8[($size)]=1;
 label=10;break;
 case 9: 
 HEAP8[($dtype)]=0;
 HEAP8[($size)]=-1;
 label=10;break;
 case 10: 
 var $33=$3;
 var $34=HEAP32[(($33)>>2)];
 var $35=_fwrite($dtype,1,1,$34);
 $res=$35;
 var $36=$res;
 var $37=($36|0)!=1;
 if($37){label=11;break;}else{label=12;break;}
 case 11: 
 var $39=_printf(15528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,15880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=17;break;
 case 12: 
 var $41=$3;
 var $42=HEAP32[(($41)>>2)];
 var $43=_fwrite($size,1,1,$42);
 $res=$43;
 var $44=$res;
 var $45=($44|0)!=1;
 if($45){label=13;break;}else{label=14;break;}
 case 13: 
 var $47=HEAP32[((_stdout)>>2)];
 _leap_fprintf($47,14944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,15880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=17;break;
 case 14: 
 var $49=$3;
 var $50=HEAP32[(($49)>>2)];
 var $51=_fwrite($keycomponent,1,1,$50);
 $res=$51;
 var $52=$res;
 var $53=($52|0)!=1;
 if($53){label=15;break;}else{label=16;break;}
 case 15: 
 var $55=HEAP32[((_stdout)>>2)];
 _leap_fprintf($55,14480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,15880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=17;break;
 case 16: 
 var $57=$3;
 var $58=HEAP32[(($57)>>2)];
 var $59=_fflush($58);
 _do_debug(1,14088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=17;break;
 case 17: 
 var $61=$1;
 STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_create_write_header($name,$noattribs,$temporary,$system,$fptr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(8);
 var $5=(sp)+(16);
 var $6;
 var $retname;
 var $retatt;
 var $rettmp;
 var $retver;
 var $ver=(sp)+(24);
 $2=$name;
 HEAP8[($3)]=$noattribs;
 HEAP8[($4)]=$temporary;
 HEAP8[($5)]=$system;
 $6=$fptr;
 HEAP32[(($ver)>>2)]=126;
 _do_debug(1,13744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$ver;
 var $8=$6;
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,1,$9);
 $retver=$10;
 var $11=$2;
 var $12=$6;
 var $13=HEAP32[(($12)>>2)];
 var $14=_fwrite($11,25,1,$13);
 $retname=$14;
 var $15=$6;
 var $16=HEAP32[(($15)>>2)];
 var $17=_fwrite($4,1,1,$16);
 $rettmp=$17;
 var $18=$6;
 var $19=HEAP32[(($18)>>2)];
 var $20=_fwrite($5,1,1,$19);
 $rettmp=$20;
 var $21=$6;
 var $22=HEAP32[(($21)>>2)];
 var $23=_fwrite($3,1,1,$22);
 $retatt=$23;
 var $24=$retver;
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=2;break;}
 case 2: 
 var $27=$retname;
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=3;break;}
 case 3: 
 var $30=$retatt;
 var $31=($30|0)==0;
 if($31){label=5;break;}else{label=4;break;}
 case 4: 
 var $33=$rettmp;
 var $34=($33|0)==0;
 if($34){label=5;break;}else{label=6;break;}
 case 5: 
 _do_debug(1,13384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=7;break;
 case 6: 
 _do_debug(1,13112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=7;break;
 case 7: 
 var $38=$1;
 STACKTOP=sp;return $38;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_update_header($db,$name,$noattribs,$temporary,$system,$fptr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $curpos;
 var $tpos;
 var $retval;
 var $expression=sp;
 $1=$db;
 $2=$name;
 $3=$noattribs;
 $4=$temporary;
 $5=$system;
 $6=$fptr;
 _do_debug(1,12896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=_ftell($8);
 $curpos=$9;
 var $10=$curpos;
 _do_debug(3,12672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$10,tempVarArgs)); STACKTOP=tempVarArgs;
 var $11=$6;
 var $12=HEAP32[(($11)>>2)];
 var $13=_fseek($12,0,0);
 var $14=$6;
 var $15=HEAP32[(($14)>>2)];
 var $16=_ftell($15);
 $tpos=$16;
 var $17=$tpos;
 _do_debug(3,12384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$2;
 var $19=$3;
 var $20=$4;
 var $21=$5;
 var $22=$6;
 var $23=_relation_create_write_header($18,$19,$20,$21,$22);
 $retval=$23;
 var $24=$6;
 var $25=HEAP32[(($24)>>2)];
 var $26=$curpos;
 var $27=_fseek($25,$26,0);
 var $28=$6;
 var $29=HEAP32[(($28)>>2)];
 var $30=_ftell($29);
 $tpos=$30;
 var $31=$tpos;
 _do_debug(3,12112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$31,tempVarArgs)); STACKTOP=tempVarArgs;
 var $32=(($expression)|0);
 var $33=$2;
 var $34=$3;
 var $35=($34&255);
 var $36=_sprintf($32,11728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=11448,HEAP32[(((tempVarArgs)+(8))>>2)]=11136,HEAP32[(((tempVarArgs)+(16))>>2)]=$33,HEAP32[(((tempVarArgs)+(24))>>2)]=10896,HEAP32[(((tempVarArgs)+(32))>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=$1;
 var $38=$2;
 var $39=_whichdb($37,$38);
 var $40=(($expression)|0);
 _ddmaintenance($39,$40,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,10552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $41=$retval;
 STACKTOP=sp;return $41;
}


function _relation_create_write_eoh_marker($noattributes,$fptr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $marker=sp;
 var $mptr;
 var $res;
 $2=$noattributes;
 $3=$fptr;
 _do_debug(1,10216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=(($marker)|0);
 var $5=_sprintf($4,9928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,HEAP32[(((tempVarArgs)+(8))>>2)]=0,HEAP32[(((tempVarArgs)+(16))>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=(($marker)|0);
 $mptr=$6;
 var $7=$mptr;
 var $8=$2;
 var $9=($8&255);
 var $10=_sprintf($7,9688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $11=(($marker)|0);
 var $12=$3;
 var $13=HEAP32[(($12)>>2)];
 var $14=_fwrite($11,4,1,$13);
 $res=$14;
 var $15=$res;
 var $16=($15|0)!=1;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=HEAP32[((_stdout)>>2)];
 _leap_fprintf($18,9464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,9152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=4;break;
 case 3: 
 _do_debug(1,8720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=4;break;
 case 4: 
 var $21=$1;
 STACKTOP=sp;return $21;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_read_eoh_marker($noattributes,$fptr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $marker=sp;
 var $mptr;
 var $readnoattribs=(sp)+(8);
 var $res;
 var $t;
 $2=$noattributes;
 $3=$fptr;
 _do_debug(1,8480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=_ftell($5);
 $t=$6;
 var $7=$t;
 _do_debug(3,8240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$7,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=(($marker)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=_fread($8,4,1,$10);
 $res=$11;
 var $12=$res;
 var $13=($12|0)!=1;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=HEAP32[((_stdout)>>2)];
 _leap_fprintf($15,7984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,7752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=6;break;
 case 3: 
 var $17=(($marker)|0);
 $mptr=$17;
 var $18=$mptr;
 var $19=_sscanf($18,9688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$readnoattribs,tempVarArgs)); STACKTOP=tempVarArgs;
 var $20=HEAP8[($readnoattribs)];
 var $21=($20&255);
 var $22=$2;
 var $23=($22&255);
 _do_debug(3,7464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,HEAP32[(((tempVarArgs)+(8))>>2)]=$23,tempVarArgs)); STACKTOP=tempVarArgs;
 var $24=HEAP8[($readnoattribs)];
 var $25=($24&255);
 var $26=$2;
 var $27=($26&255);
 var $28=($25|0)==($27|0);
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 _do_debug(1,7240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=6;break;
 case 5: 
 _do_debug(1,7752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=6;break;
 case 6: 
 var $32=$1;
 STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }

}


function _printrelinfo($path){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $fptr=sp;
 var $name=(sp)+(8);
 var $aname=(sp)+(40);
 var $noattribs=(sp)+(72);
 var $count;
 var $c;
 var $res;
 var $finish;
 var $dtype=(sp)+(80);
 var $types=(sp)+(88);
 var $rsize;
 var $leapver=(sp)+(152);
 var $size=(sp)+(160);
 var $totalsize;
 var $sizes=(sp)+(168);
 var $keycomponent=(sp)+(232);
 var $temporary=(sp)+(240);
 var $system=(sp)+(248);
 var $status=(sp)+(256);
 var $number=(sp)+(264);
 var $bool=(sp)+(272);
 var $string=(sp)+(280);
 $2=$path;
 _do_debug(1,7080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=HEAP32[((_stdout)>>2)];
 _leap_fprintf($3,6896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=$2;
 var $5=_fopen($4,6744);
 HEAP32[(($fptr)>>2)]=$5;
 var $6=HEAP32[(($fptr)>>2)];
 var $7=($6|0)!=0;
 if($7){label=2;break;}else{label=71;break;}
 case 2: 
 var $9=$leapver;
 var $10=HEAP32[(($fptr)>>2)];
 var $11=_fread($9,4,1,$10);
 $res=$11;
 var $12=$res;
 var $13=($12|0)!=1;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=HEAP32[((_stdout)>>2)];
 _leap_fprintf($15,6424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 4: 
 var $17=(($name)|0);
 var $18=HEAP32[(($fptr)>>2)];
 var $19=_fread($17,25,1,$18);
 $res=$19;
 var $20=$res;
 var $21=($20|0)!=1;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=HEAP32[((_stdout)>>2)];
 _leap_fprintf($23,5816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 6: 
 var $25=HEAP32[(($fptr)>>2)];
 var $26=_fread($temporary,1,1,$25);
 $res=$26;
 var $27=$res;
 var $28=($27|0)!=1;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=HEAP32[((_stdout)>>2)];
 _leap_fprintf($30,5552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 8: 
 var $32=HEAP32[(($fptr)>>2)];
 var $33=_fread($system,1,1,$32);
 $res=$33;
 var $34=$res;
 var $35=($34|0)!=1;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=HEAP32[((_stdout)>>2)];
 _leap_fprintf($37,5328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 10: 
 var $39=HEAP32[(($fptr)>>2)];
 var $40=_fread($noattribs,1,1,$39);
 $res=$40;
 var $41=$res;
 var $42=($41|0)!=1;
 if($42){label=11;break;}else{label=12;break;}
 case 11: 
 var $44=HEAP32[((_stdout)>>2)];
 _leap_fprintf($44,5120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 12: 
 var $46=HEAP32[((_stdout)>>2)];
 var $47=(($name)|0);
 _leap_fprintf($46,4920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$47,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(4728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $48=HEAP8[($temporary)];
 var $49=($48&255);
 var $50=($49|0)==1;
 if($50){label=13;break;}else{label=14;break;}
 case 13: 
 var $52=HEAP32[((_stdout)>>2)];
 _leap_fprintf($52,4512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=15;break;
 case 14: 
 var $54=HEAP32[((_stdout)>>2)];
 _leap_fprintf($54,4328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=15;break;
 case 15: 
 _leap_printf(4728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $56=HEAP8[($system)];
 var $57=($56&255);
 var $58=($57|0)==1;
 if($58){label=16;break;}else{label=17;break;}
 case 16: 
 _leap_printf(4096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 17: 
 _leap_printf(3976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 var $62=HEAP8[($noattribs)];
 var $63=($62&255);
 _do_debug(3,3856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$63,tempVarArgs)); STACKTOP=tempVarArgs;
 var $64=HEAP32[(($leapver)>>2)];
 _leap_printf(3696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$64,tempVarArgs)); STACKTOP=tempVarArgs;
 $totalsize=0;
 $count=0;
 label=19;break;
 case 19: 
 var $66=$count;
 var $67=($66&255);
 var $68=HEAP8[($noattribs)];
 var $69=($68&255);
 var $70=($67|0)<($69|0);
 if($70){label=20;break;}else{label=30;break;}
 case 20: 
 var $72=(($aname)|0);
 var $73=HEAP32[(($fptr)>>2)];
 var $74=_fread($72,25,1,$73);
 $res=$74;
 var $75=$res;
 var $76=($75|0)!=1;
 if($76){label=21;break;}else{label=22;break;}
 case 21: 
 var $78=HEAP32[((_stdout)>>2)];
 var $79=$count;
 var $80=($79&255);
 _leap_fprintf($78,3552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$80,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 22: 
 var $82=HEAP32[(($fptr)>>2)];
 var $83=_fread($dtype,1,1,$82);
 $res=$83;
 var $84=$res;
 var $85=($84|0)!=1;
 if($85){label=23;break;}else{label=24;break;}
 case 23: 
 var $87=HEAP32[((_stdout)>>2)];
 var $88=$count;
 var $89=($88&255);
 _leap_fprintf($87,3384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$89,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 24: 
 var $91=HEAP32[(($fptr)>>2)];
 var $92=_fread($size,1,1,$91);
 $res=$92;
 var $93=$res;
 var $94=($93|0)!=1;
 if($94){label=25;break;}else{label=26;break;}
 case 25: 
 var $96=HEAP32[((_stdout)>>2)];
 var $97=$count;
 var $98=($97&255);
 _leap_fprintf($96,3216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$98,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 26: 
 var $100=HEAP32[(($fptr)>>2)];
 var $101=_fread($keycomponent,1,1,$100);
 $res=$101;
 var $102=$res;
 var $103=($102|0)!=1;
 if($103){label=27;break;}else{label=28;break;}
 case 27: 
 var $105=HEAP32[((_stdout)>>2)];
 var $106=$count;
 var $107=($106&255);
 _leap_fprintf($105,3008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$107,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 28: 
 var $109=HEAP32[((_stdout)>>2)];
 var $110=$count;
 var $111=($110&255);
 var $112=(($aname)|0);
 _leap_fprintf($109,2896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$111,HEAP32[(((tempVarArgs)+(8))>>2)]=$112,tempVarArgs)); STACKTOP=tempVarArgs;
 var $113=HEAP32[((_stdout)>>2)];
 var $114=$count;
 var $115=($114&255);
 var $116=HEAP8[($dtype)];
 var $117=($116&255);
 _leap_fprintf($113,2736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$115,HEAP32[(((tempVarArgs)+(8))>>2)]=$117,tempVarArgs)); STACKTOP=tempVarArgs;
 var $118=HEAP8[($dtype)];
 var $119=$count;
 var $120=($119&255);
 var $121=(($types+$120)|0);
 HEAP8[($121)]=$118;
 var $122=HEAP8[($size)];
 var $123=$count;
 var $124=($123&255);
 var $125=(($sizes+$124)|0);
 HEAP8[($125)]=$122;
 var $126=HEAP8[($size)];
 var $127=($126&255);
 var $128=$totalsize;
 var $129=((($128)+($127))|0);
 $totalsize=$129;
 var $130=HEAP32[((_stdout)>>2)];
 var $131=$count;
 var $132=($131&255);
 var $133=HEAP8[($size)];
 var $134=($133&255);
 _leap_fprintf($130,2544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$132,HEAP32[(((tempVarArgs)+(8))>>2)]=$134,tempVarArgs)); STACKTOP=tempVarArgs;
 var $135=HEAP32[((_stdout)>>2)];
 var $136=$count;
 var $137=($136&255);
 var $138=HEAP8[($keycomponent)];
 var $139=($138&255);
 _leap_fprintf($135,2392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$137,HEAP32[(((tempVarArgs)+(8))>>2)]=$139,tempVarArgs)); STACKTOP=tempVarArgs;
 label=29;break;
 case 29: 
 var $141=$count;
 var $142=((($141)+(1))&255);
 $count=$142;
 label=19;break;
 case 30: 
 var $144=HEAP32[((_stdout)>>2)];
 _leap_fprintf($144,2248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $145=HEAP32[((_stdout)>>2)];
 var $146=$totalsize;
 _leap_fprintf($145,2056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$146,tempVarArgs)); STACKTOP=tempVarArgs;
 var $147=HEAP8[($noattribs)];
 var $148=_relation_read_eoh_marker($147,$fptr);
 var $149=($148|0)==1;
 if($149){label=31;break;}else{label=69;break;}
 case 31: 
 var $151=HEAP32[((_stdout)>>2)];
 _leap_fprintf($151,1928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $finish=0;
 label=32;break;
 case 32: 
 var $153=$finish;
 var $154=($153&255);
 var $155=($154|0)!=1;
 if($155){label=33;break;}else{label=68;break;}
 case 33: 
 var $157=HEAP32[(($fptr)>>2)];
 var $158=_fread($status,1,1,$157);
 $res=$158;
 var $159=$res;
 var $160=($159|0)==0;
 if($160){label=34;break;}else{label=37;break;}
 case 34: 
 var $162=HEAP8[(37240)];
 var $163=(($162<<24)>>24)!=0;
 if($163){label=35;break;}else{label=36;break;}
 case 35: 
 var $165=HEAP32[((_stdout)>>2)];
 _leap_fprintf($165,1808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=36;break;
 case 36: 
 $finish=1;
 label=43;break;
 case 37: 
 var $168=HEAP8[($status)];
 var $169=($168&255);
 if(($169|0)==0){ label=38;break;}else if(($169|0)==1){ label=39;break;}else if(($169|0)==2){ label=40;break;}else{label=41;break;}
 case 38: 
 var $171=HEAP32[((_stdout)>>2)];
 _leap_fprintf($171,1696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=42;break;
 case 39: 
 var $173=HEAP32[((_stdout)>>2)];
 _leap_fprintf($173,1624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=42;break;
 case 40: 
 var $175=HEAP32[((_stdout)>>2)];
 _leap_fprintf($175,1536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=42;break;
 case 41: 
 var $177=HEAP32[((_stdout)>>2)];
 _leap_fprintf($177,30840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 var $180=$finish;
 var $181=($180&255);
 var $182=($181|0)!=1;
 if($182){label=44;break;}else{label=67;break;}
 case 44: 
 $c=0;
 label=45;break;
 case 45: 
 var $185=$c;
 var $186=($185&255);
 var $187=$count;
 var $188=($187&255);
 var $189=($186|0)<($188|0);
 if($189){label=46;break;}else{label=66;break;}
 case 46: 
 var $191=$c;
 var $192=($191&255);
 var $193=($192|0)>0;
 if($193){label=47;break;}else{label=48;break;}
 case 47: 
 var $195=HEAP32[((_stdout)>>2)];
 _leap_fprintf($195,30536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=48;break;
 case 48: 
 var $197=$c;
 var $198=($197&255);
 _leap_printf(30376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$198,tempVarArgs)); STACKTOP=tempVarArgs;
 var $199=HEAP32[(($fptr)>>2)];
 var $200=_ftell($199);
 _leap_printf(30240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$200,tempVarArgs)); STACKTOP=tempVarArgs;
 var $201=$c;
 var $202=($201&255);
 var $203=(($types+$202)|0);
 var $204=HEAP8[($203)];
 var $205=($204&255);
 if(($205|0)==1){ label=49;break;}else if(($205|0)==2){ label=50;break;}else if(($205|0)==3){ label=51;break;}else{label=52;break;}
 case 49: 
 var $207=$c;
 var $208=($207&255);
 var $209=(($sizes+$208)|0);
 var $210=HEAP8[($209)];
 var $211=($210&255);
 $rsize=$211;
 var $212=$rsize;
 _leap_printf(30056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$212,tempVarArgs)); STACKTOP=tempVarArgs;
 var $213=(($string)|0);
 var $214=$rsize;
 var $215=HEAP32[(($fptr)>>2)];
 var $216=_fread($213,$214,1,$215);
 $res=$216;
 var $217=$rsize;
 var $218=(($string+$217)|0);
 HEAP8[($218)]=0;
 label=53;break;
 case 50: 
 $rsize=4;
 var $220=$rsize;
 _leap_printf(29896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$220,tempVarArgs)); STACKTOP=tempVarArgs;
 var $221=$number;
 var $222=$rsize;
 var $223=HEAP32[(($fptr)>>2)];
 var $224=_fread($221,$222,1,$223);
 $res=$224;
 label=53;break;
 case 51: 
 $rsize=1;
 var $226=$rsize;
 _leap_printf(29768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$226,tempVarArgs)); STACKTOP=tempVarArgs;
 var $227=$rsize;
 var $228=HEAP32[(($fptr)>>2)];
 var $229=_fread($bool,$227,1,$228);
 $res=$229;
 label=53;break;
 case 52: 
 var $231=$c;
 var $232=($231&255);
 var $233=(($sizes+$232)|0);
 var $234=HEAP8[($233)];
 var $235=($234&255);
 $rsize=$235;
 var $236=$rsize;
 _leap_printf(29616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$236,tempVarArgs)); STACKTOP=tempVarArgs;
 var $237=(($string)|0);
 var $238=$rsize;
 var $239=HEAP32[(($fptr)>>2)];
 var $240=_fread($237,$238,1,$239);
 $res=$240;
 var $241=$rsize;
 var $242=(($string+$241)|0);
 HEAP8[($242)]=0;
 label=53;break;
 case 53: 
 var $244=$res;
 var $245=($244|0)!=1;
 if($245){label=54;break;}else{label=55;break;}
 case 54: 
 _leap_printf(29504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=55;break;
 case 55: 
 var $248=$c;
 var $249=($248&255);
 var $250=(($types+$249)|0);
 var $251=HEAP8[($250)];
 var $252=($251&255);
 if(($252|0)==1){ label=56;break;}else if(($252|0)==2){ label=57;break;}else if(($252|0)==3){ label=58;break;}else{label=63;break;}
 case 56: 
 var $254=(($string)|0);
 _leap_printf(29432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$254,tempVarArgs)); STACKTOP=tempVarArgs;
 label=64;break;
 case 57: 
 var $256=HEAP32[(($number)>>2)];
 _leap_printf(29328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$256,tempVarArgs)); STACKTOP=tempVarArgs;
 label=64;break;
 case 58: 
 var $258=HEAP8[($bool)];
 var $259=($258&255);
 if(($259|0)==1){ label=59;break;}else if(($259|0)==0){ label=60;break;}else{label=61;break;}
 case 59: 
 _leap_printf(29048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=62;break;
 case 60: 
 _leap_printf(28920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=62;break;
 case 61: 
 _leap_printf(28920,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=62;break;
 case 62: 
 label=64;break;
 case 63: 
 var $265=(($string)|0);
 _leap_printf(28728,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$265,tempVarArgs)); STACKTOP=tempVarArgs;
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 var $268=$c;
 var $269=((($268)+(1))&255);
 $c=$269;
 label=45;break;
 case 66: 
 label=67;break;
 case 67: 
 var $272=HEAP32[((42616)>>2)];
 var $273=((($272)+(1))|0);
 HEAP32[((42616)>>2)]=$273;
 label=32;break;
 case 68: 
 label=70;break;
 case 69: 
 _leap_printf(28480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 70: 
 var $277=HEAP32[(($fptr)>>2)];
 var $278=_fclose($277);
 _do_debug(1,28376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=72;break;
 case 71: 
 var $280=$2;
 _leap_printf(28248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$280,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,6144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=72;break;
 case 72: 
 var $282=$1;
 STACKTOP=sp;return $282;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_attribute_read($fptr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $att;
 var $aname=sp;
 var $dtype=(sp)+(32);
 var $size=(sp)+(40);
 var $keycomp=(sp)+(48);
 var $res;
 $2=$fptr;
 _do_debug(1,28128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=_malloc(64);
 var $4=$3;
 $att=$4;
 var $5=$att;
 var $6=(($5)|0);
 var $7=(($6)|0);
 var $8=_strncpy($7,51576,25);
 var $9=$att;
 var $10=(($9+48)|0);
 HEAP8[($10)]=0;
 var $11=$att;
 var $12=(($11+52)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$att;
 var $14=$13;
 _check_assign($14,28032);
 var $15=(($aname)|0);
 var $16=$2;
 var $17=HEAP32[(($16)>>2)];
 var $18=_fread($15,25,1,$17);
 $res=$18;
 var $19=$res;
 var $20=($19|0)!=1;
 if($20){label=2;break;}else{label=3;break;}
 case 2: 
 _leap_printf(27968,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $22=$att;
 var $23=$22;
 _free($23);
 _do_debug(1,27888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=10;break;
 case 3: 
 var $25=$2;
 var $26=HEAP32[(($25)>>2)];
 var $27=_fread($dtype,1,1,$26);
 $res=$27;
 var $28=$res;
 var $29=($28|0)!=1;
 if($29){label=4;break;}else{label=5;break;}
 case 4: 
 _leap_printf(27704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $31=$att;
 var $32=$31;
 _free($32);
 _do_debug(1,27888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=10;break;
 case 5: 
 var $34=$2;
 var $35=HEAP32[(($34)>>2)];
 var $36=_fread($size,1,1,$35);
 $res=$36;
 var $37=$res;
 var $38=($37|0)!=1;
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 _leap_printf(27600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $40=$att;
 var $41=$40;
 _free($41);
 _do_debug(1,27888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=10;break;
 case 7: 
 var $43=$2;
 var $44=HEAP32[(($43)>>2)];
 var $45=_fread($keycomp,1,1,$44);
 $res=$45;
 var $46=$res;
 var $47=($46|0)!=1;
 if($47){label=8;break;}else{label=9;break;}
 case 8: 
 _leap_printf(27504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $49=$att;
 var $50=$49;
 _free($50);
 _do_debug(1,27888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=10;break;
 case 9: 
 var $52=$att;
 var $53=(($52)|0);
 var $54=(($53)|0);
 var $55=(($aname)|0);
 var $56=_strncpy($54,$55,25);
 var $57=HEAP8[($dtype)];
 var $58=$att;
 var $59=(($58+48)|0);
 HEAP8[($59)]=$57;
 var $60=HEAP8[($size)];
 var $61=($60&255);
 var $62=$att;
 var $63=(($62+52)|0);
 HEAP32[(($63)>>2)]=$61;
 _do_debug(1,27384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $64=$att;
 $1=$64;
 label=10;break;
 case 10: 
 var $66=$1;
 STACKTOP=sp;return $66;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_readheader($fptr,$noattributes,$temp,$system,$rname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $t=sp;
 var $res;
 var $leapver=(sp)+(32);
 $2=$fptr;
 $3=$noattributes;
 $4=$temp;
 $5=$system;
 $6=$rname;
 $res=0;
 var $7=$leapver;
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 var $10=_fread($7,4,1,$9);
 $res=$10;
 var $11=$res;
 var $12=($11|0)!=1;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 _leap_printf(27352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 3: 
 var $15=(($t)|0);
 var $16=$2;
 var $17=HEAP32[(($16)>>2)];
 var $18=_fread($15,25,1,$17);
 $res=$18;
 var $19=$6;
 var $20=(($t)|0);
 var $21=_strncpy($19,$20,25);
 var $22=$res;
 var $23=($22|0)!=1;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 _leap_printf(5816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 5: 
 var $26=$4;
 var $27=$2;
 var $28=HEAP32[(($27)>>2)];
 var $29=_fread($26,1,1,$28);
 $res=$29;
 var $30=$res;
 var $31=($30|0)!=1;
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 _leap_printf(5552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 7: 
 var $34=$5;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=_fread($34,1,1,$36);
 $res=$37;
 var $38=$res;
 var $39=($38|0)!=1;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 _leap_printf(5328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 9: 
 var $42=$3;
 var $43=$2;
 var $44=HEAP32[(($43)>>2)];
 var $45=_fread($42,1,1,$44);
 $res=$45;
 var $46=$res;
 var $47=($46|0)!=1;
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 _leap_printf(27192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 11: 
 $1=1;
 label=12;break;
 case 12: 
 var $51=$1;
 STACKTOP=sp;return $51;
  default: assert(0, "bad label: " + label);
 }

}


function _generate_fileh($rel){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $fileh;
 var $fname=sp;
 $1=$rel;
 var $2=$1;
 var $3=(($fname)|0);
 _relation_full_path($2,$3);
 var $4=(($fname)|0);
 var $5=_strcat($4,27168);
 var $6=(($fname)|0);
 var $7=_fopen($6,27144);
 $fileh=$7;
 var $8=$fileh;
 STACKTOP=sp;return $8;
}


function _tuple_prepare($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $noattributes=sp;
 var $temp=(sp)+(8);
 var $system=(sp)+(16);
 var $att;
 var $count;
 var $ntuple;
 var $fname=(sp)+(24);
 var $rname=(sp)+(4128);
 $2=$rel;
 var $3=$fname;
 _memset($3, 0, 4097)|0;
 var $4=$rname;
 _memset($4, 0, 26)|0;
 var $5=(($rname)|0);
 var $6=_strcpy($5,51576);
 var $7=(($fname)|0);
 var $8=_strcpy($7,51576);
 _do_debug(1,27096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=_raw_tuple_prepare();
 $ntuple=$9;
 var $10=$2;
 var $11=_generate_fileh($10);
 var $12=$ntuple;
 var $13=(($12+4)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$ntuple;
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=$2;
 var $20=(($fname)|0);
 _relation_full_path($19,$20);
 var $21=(($fname)|0);
 var $22=_strcat($21,27168);
 var $23=(($fname)|0);
 _raise_error(2,0,$23,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 3: 
 var $25=$2;
 var $26=(($25+4648)|0);
 HEAP32[(($26)>>2)]=1;
 HEAP8[($temp)]=1;
 HEAP8[($system)]=1;
 HEAP8[($noattributes)]=2;
 var $27=$ntuple;
 var $28=(($27+4)|0);
 var $29=(($rname)|0);
 var $30=_tuple_readheader($28,$noattributes,$temp,$system,$29);
 var $31=($30|0)!=1;
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=12;break;
 case 5: 
 var $34=HEAP8[($noattributes)];
 var $35=$2;
 var $36=(($35+4644)|0);
 HEAP8[($36)]=$34;
 var $37=HEAP8[($noattributes)];
 var $38=($37&255);
 _do_debug(3,3856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$38,tempVarArgs)); STACKTOP=tempVarArgs;
 var $39=HEAP8[($noattributes)];
 var $40=$ntuple;
 var $41=(($40+8)|0);
 HEAP8[($41)]=$39;
 $count=0;
 label=6;break;
 case 6: 
 var $43=$count;
 var $44=HEAP8[($noattributes)];
 var $45=($44&255);
 var $46=($43>>>0)<($45>>>0);
 if($46){label=7;break;}else{label=9;break;}
 case 7: 
 var $48=$ntuple;
 var $49=(($48+4)|0);
 var $50=_relation_attribute_read($49);
 $att=$50;
 var $51=$count;
 var $52=$att;
 var $53=(($52+44)|0);
 HEAP32[(($53)>>2)]=$51;
 var $54=$att;
 var $55=$count;
 var $56=$ntuple;
 var $57=(($56)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+($55<<2))|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+4)|0);
 HEAP32[(($61)>>2)]=$54;
 var $62=$2;
 var $63=$count;
 var $64=$ntuple;
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+($63<<2))|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 HEAP32[(($69)>>2)]=$62;
 label=8;break;
 case 8: 
 var $71=$count;
 var $72=((($71)+(1))|0);
 $count=$72;
 label=6;break;
 case 9: 
 var $74=HEAP8[($noattributes)];
 var $75=$ntuple;
 var $76=(($75+4)|0);
 var $77=_relation_read_eoh_marker($74,$76);
 var $78=($77|0)!=1;
 if($78){label=10;break;}else{label=11;break;}
 case 10: 
 _leap_printf(26792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27032,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 11: 
 _do_debug(2,26752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,26632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $81=$ntuple;
 $1=$81;
 label=12;break;
 case 12: 
 var $83=$1;
 STACKTOP=sp;return $83;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_attribute_getfirst($ctuple,$anum){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$ctuple;
 $3=$anum;
 _do_debug(1,26520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=HEAP8[(37320)];
 var $5=($4&255);
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 var $8=HEAP32[((37312)>>2)];
 var $9=($8|0)>=3;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 _tuple_def($11);
 label=4;break;
 case 4: 
 var $13=$2;
 var $14=($13|0)!=0;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 var $16=$3;
 HEAP32[(($16)>>2)]=0;
 _do_debug(1,26448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=$2;
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+4)|0);
 var $23=HEAP32[(($22)>>2)];
 $1=$23;
 label=7;break;
 case 6: 
 _do_debug(1,26360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=7;break;
 case 7: 
 var $26=$1;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_attribute_readfirst($rel,$ctuple,$anum){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$rel;
 $3=$ctuple;
 $4=$anum;
 _do_debug(1,26304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$2;
 var $6=_tuple_prepare($5);
 var $7=$3;
 HEAP32[(($7)>>2)]=$6;
 var $8=HEAP8[(37320)];
 var $9=($8&255);
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=4;break;}
 case 2: 
 var $12=HEAP32[((37312)>>2)];
 var $13=($12|0)>=3;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$3;
 var $16=HEAP32[(($15)>>2)];
 _tuple_def($16);
 label=4;break;
 case 4: 
 var $18=$3;
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=7;break;}
 case 5: 
 var $21=$3;
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)!=0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$4;
 HEAP32[(($25)>>2)]=0;
 _do_debug(1,26208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $26=$3;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+4)|0);
 var $33=HEAP32[(($32)>>2)];
 $1=$33;
 label=8;break;
 case 7: 
 _do_debug(1,26088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=8;break;
 case 8: 
 var $36=$1;
 STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_attribute_getnext($ctuple,$cattr,$anum){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $nattr;
 $2=$ctuple;
 $3=$cattr;
 $4=$anum;
 _do_debug(1,26016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)+(1))|0);
 var $8=$2;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+($7<<2))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 $nattr=$14;
 var $15=$nattr;
 var $16=($15|0)!=0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$4;
 var $19=HEAP32[(($18)>>2)];
 var $20=((($19)+(1))|0);
 HEAP32[(($18)>>2)]=$20;
 _do_debug(1,25800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $21=$nattr;
 $1=$21;
 label=4;break;
 case 3: 
 var $23=$4;
 HEAP32[(($23)>>2)]=0;
 _do_debug(1,25800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=4;break;
 case 4: 
 var $25=$1;
 STACKTOP=sp;return $25;
  default: assert(0, "bad label: " + label);
 }

}


function _relation_attribute_readnext($rel,$ctuple,$cattr,$anum){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $nattr;
 $2=$rel;
 $3=$ctuple;
 $4=$cattr;
 $5=$anum;
 _do_debug(1,25744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=((($7)+(1))|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+($8<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 $nattr=$16;
 var $17=$nattr;
 var $18=($17|0)!=0;
 if($18){label=2;break;}else{label=3;break;}
 case 2: 
 var $20=$5;
 var $21=HEAP32[(($20)>>2)];
 var $22=((($21)+(1))|0);
 HEAP32[(($20)>>2)]=$22;
 _do_debug(1,25600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $23=$nattr;
 $1=$23;
 label=4;break;
 case 3: 
 var $25=$3;
 _close_tuple($25,2);
 _do_debug(1,25600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=4;break;
 case 4: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _tuplesize($ctuple){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $count;
 var $noattribs;
 var $tsize;
 var $bool;
 $1=$ctuple;
 $tsize=0;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+8)|0);
 var $5=HEAP8[($4)];
 var $6=($5&255);
 $noattribs=$6;
 $count=0;
 label=2;break;
 case 2: 
 var $8=$count;
 var $9=$noattribs;
 var $10=($8|0)<($9|0);
 if($10){label=3;break;}else{label=10;break;}
 case 3: 
 var $12=$count;
 var $13=$1;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+($12<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+48)|0);
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24);
 if(($23|0)==1){ label=4;break;}else if(($23|0)==2){ label=5;break;}else if(($23|0)==3){ label=6;break;}else{label=7;break;}
 case 4: 
 var $25=$count;
 var $26=$1;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+($25<<2))|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+52)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$tsize;
 var $37=((($36)+($35))|0);
 $tsize=$37;
 label=8;break;
 case 5: 
 var $39=$tsize;
 var $40=((($39)+(4))|0);
 $tsize=$40;
 label=8;break;
 case 6: 
 var $42=$tsize;
 var $43=((($42)+(1))|0);
 $tsize=$43;
 label=8;break;
 case 7: 
 var $45=$count;
 var $46=$1;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+($45<<2))|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+52)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$tsize;
 var $57=((($56)+($55))|0);
 $tsize=$57;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $60=$count;
 var $61=((($60)+(1))|0);
 $count=$61;
 label=2;break;
 case 10: 
 var $63=$tsize;
 STACKTOP=sp;return $63;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_readnext($ctuple,$reuse){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $current;
 var $type;
 var $string=sp;
 var $t2=(sp)+(256);
 var $number=(sp)+(512);
 var $bool=(sp)+(520);
 var $canreturn;
 var $status=(sp)+(528);
 var $result;
 var $size;
 $2=$ctuple;
 $3=$reuse;
 HEAP32[(($number)>>2)]=0;
 HEAP8[($bool)]=0;
 HEAP8[($status)]=2;
 $result=0;
 $size=0;
 _do_debug(1,25464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $canreturn=0;
 label=2;break;
 case 2: 
 var $5=$canreturn;
 var $6=($5&255);
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=37;break;}
 case 3: 
 var $9=$2;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=_ftell($12);
 var $14=$2;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+16)|0);
 HEAP32[(($16)>>2)]=$13;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=_fread($status,1,1,$20);
 $result=$21;
 var $22=$result;
 var $23=($22|0)==0;
 if($23){label=4;break;}else{label=8;break;}
 case 4: 
 _do_debug(2,25408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $25=$2;
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=_fclose($28);
 var $30=$2;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+4)|0);
 HEAP32[(($32)>>2)]=0;
 var $33=$3;
 var $34=($33&255);
 var $35=($34|0)!=0;
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 _do_debug(5,25328,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=$2;
 _close_tuple($37,2);
 _do_debug(5,25304,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 6: 
 _do_debug(2,25280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $39=$2;
 HEAP32[(($39)>>2)]=0;
 label=7;break;
 case 7: 
 _do_debug(1,25216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=38;break;
 case 8: 
 var $42=$result;
 var $43=($42|0)!=1;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 _leap_printf(25184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $47=HEAP8[($status)];
 var $48=($47&255);
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=35;break;}
 case 12: 
 $current=0;
 label=13;break;
 case 13: 
 var $52=$2;
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)!=0;
 if($54){label=14;break;}else{label=34;break;}
 case 14: 
 var $56=$current;
 var $57=($56&255);
 var $58=$2;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+8)|0);
 var $61=HEAP8[($60)];
 var $62=($61&255);
 var $63=($57|0)<($62|0);
 if($63){label=15;break;}else{label=34;break;}
 case 15: 
 var $65=$current;
 var $66=($65&255);
 var $67=$2;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+($66<<2))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+48)|0);
 var $76=HEAP8[($75)];
 $type=$76;
 var $77=$type;
 var $78=($77&255);
 if(($78|0)==1){ label=16;break;}else if(($78|0)==2){ label=17;break;}else if(($78|0)==3){ label=18;break;}else{label=19;break;}
 case 16: 
 var $80=$current;
 var $81=($80&255);
 var $82=$2;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+($81<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+52)|0);
 var $91=HEAP32[(($90)>>2)];
 $size=$91;
 var $92=(($string)|0);
 var $93=$size;
 var $94=$2;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+4)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=_fread($92,$93,1,$97);
 $result=$98;
 var $99=$size;
 var $100=(($string+$99)|0);
 HEAP8[($100)]=0;
 var $101=$type;
 var $102=($101&255);
 var $103=$size;
 var $104=$result;
 var $105=(($string)|0);
 _do_debug(5,25008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$102,HEAP32[(((tempVarArgs)+(8))>>2)]=$103,HEAP32[(((tempVarArgs)+(16))>>2)]=$104,HEAP32[(((tempVarArgs)+(24))>>2)]=$105,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 17: 
 $size=4;
 var $107=$number;
 var $108=$size;
 var $109=$2;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+4)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=_fread($107,$108,1,$112);
 $result=$113;
 var $114=$type;
 var $115=($114&255);
 var $116=$size;
 var $117=$result;
 var $118=HEAP32[(($number)>>2)];
 _do_debug(5,24984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$115,HEAP32[(((tempVarArgs)+(8))>>2)]=$116,HEAP32[(((tempVarArgs)+(16))>>2)]=$117,HEAP32[(((tempVarArgs)+(24))>>2)]=$118,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 18: 
 $size=1;
 var $120=$size;
 var $121=$2;
 var $122=HEAP32[(($121)>>2)];
 var $123=(($122+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=_fread($bool,$120,1,$124);
 $result=$125;
 var $126=$type;
 var $127=($126&255);
 var $128=$size;
 var $129=$result;
 var $130=HEAP8[($bool)];
 var $131=($130&255);
 _do_debug(5,24928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$127,HEAP32[(((tempVarArgs)+(8))>>2)]=$128,HEAP32[(((tempVarArgs)+(16))>>2)]=$129,HEAP32[(((tempVarArgs)+(24))>>2)]=$131,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 19: 
 var $133=$current;
 var $134=($133&255);
 var $135=$2;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+($134<<2))|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+52)|0);
 var $144=HEAP32[(($143)>>2)];
 $size=$144;
 var $145=(($string)|0);
 var $146=$size;
 var $147=$2;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+4)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=_fread($145,$146,1,$150);
 $result=$151;
 var $152=$size;
 var $153=(($string+$152)|0);
 HEAP8[($153)]=0;
 var $154=$type;
 var $155=($154&255);
 var $156=$size;
 var $157=$result;
 var $158=(($string)|0);
 _do_debug(5,24848,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$155,HEAP32[(((tempVarArgs)+(8))>>2)]=$156,HEAP32[(((tempVarArgs)+(16))>>2)]=$157,HEAP32[(((tempVarArgs)+(24))>>2)]=$158,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 20: 
 var $160=$result;
 var $161=($160|0)!=1;
 if($161){label=21;break;}else{label=22;break;}
 case 21: 
 _leap_printf(24808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=23;break;
 case 22: 
 $canreturn=1;
 label=23;break;
 case 23: 
 var $165=$type;
 var $166=($165&255);
 if(($166|0)==1){ label=24;break;}else if(($166|0)==2){ label=25;break;}else if(($166|0)==3){ label=26;break;}else{label=31;break;}
 case 24: 
 var $168=$current;
 var $169=($168&255);
 var $170=$2;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+($169<<2))|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+8)|0);
 var $177=(($176)|0);
 var $178=(($string)|0);
 var $179=_strcpy($177,$178);
 label=32;break;
 case 25: 
 var $181=(($t2)|0);
 var $182=HEAP32[(($number)>>2)];
 var $183=_sprintf($181,24792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$182,tempVarArgs)); STACKTOP=tempVarArgs;
 var $184=$current;
 var $185=($184&255);
 var $186=$2;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+($185<<2))|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+8)|0);
 var $193=(($192)|0);
 var $194=(($t2)|0);
 var $195=_strcpy($193,$194);
 label=32;break;
 case 26: 
 var $197=HEAP8[($bool)];
 var $198=($197&255);
 if(($198|0)==1){ label=27;break;}else if(($198|0)==0){ label=28;break;}else{label=29;break;}
 case 27: 
 var $200=$current;
 var $201=($200&255);
 var $202=$2;
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+($201<<2))|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+8)|0);
 var $209=(($208)|0);
 var $210=_strcpy($209,24768);
 label=30;break;
 case 28: 
 var $212=$current;
 var $213=($212&255);
 var $214=$2;
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+($213<<2))|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+8)|0);
 var $221=(($220)|0);
 var $222=_strcpy($221,24760);
 label=30;break;
 case 29: 
 var $224=$current;
 var $225=($224&255);
 var $226=$2;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($229+($225<<2))|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+8)|0);
 var $233=(($232)|0);
 var $234=_strcpy($233,24760);
 label=30;break;
 case 30: 
 label=32;break;
 case 31: 
 var $237=(($t2)|0);
 var $238=HEAP32[(($number)>>2)];
 var $239=_sprintf($237,24792,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$238,tempVarArgs)); STACKTOP=tempVarArgs;
 var $240=$current;
 var $241=($240&255);
 var $242=$2;
 var $243=HEAP32[(($242)>>2)];
 var $244=(($243)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+($241<<2))|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+8)|0);
 var $249=(($248)|0);
 var $250=(($t2)|0);
 var $251=_strcpy($249,$250);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 var $254=$current;
 var $255=((($254)+(1))&255);
 $current=$255;
 label=13;break;
 case 34: 
 var $257=$2;
 var $258=HEAP32[(($257)>>2)];
 var $259=(($258+20)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=((($260)+(1))|0);
 HEAP32[(($259)>>2)]=$261;
 label=36;break;
 case 35: 
 var $263=$2;
 var $264=_tuplesize($263);
 $size=$264;
 var $265=$size;
 var $266=$2;
 var $267=HEAP32[(($266)>>2)];
 var $268=(($267+16)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=$size;
 var $271=((($269)+($270))|0);
 var $272=((($271)+(1))|0);
 var $273=((($272)+(1))|0);
 _do_debug(3,24648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$265,HEAP32[(((tempVarArgs)+(8))>>2)]=$273,tempVarArgs)); STACKTOP=tempVarArgs;
 var $274=$2;
 var $275=HEAP32[(($274)>>2)];
 var $276=(($275+4)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=$size;
 var $279=_fseek($277,$278,1);
 label=36;break;
 case 36: 
 var $281=HEAP32[((42616)>>2)];
 var $282=((($281)+(1))|0);
 HEAP32[((42616)>>2)]=$282;
 label=2;break;
 case 37: 
 _do_debug(1,24608,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $284=$2;
 var $285=HEAP32[(($284)>>2)];
 $1=$285;
 label=38;break;
 case 38: 
 var $287=$1;
 STACKTOP=sp;return $287;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_readfirst($rel,$reuse,$old_tuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ntuple=sp;
 $2=$rel;
 $3=$reuse;
 $4=$old_tuple;
 HEAP32[(($ntuple)>>2)]=0;
 _do_debug(1,24408,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$2;
 var $6=(($5+4648)|0);
 HEAP32[(($6)>>2)]=1;
 var $7=$3;
 var $8=($7&255);
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$2;
 var $12=_tuple_prepare($11);
 HEAP32[(($ntuple)>>2)]=$12;
 label=7;break;
 case 3: 
 var $14=$4;
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=$2;
 var $18=_tuple_prepare($17);
 HEAP32[(($ntuple)>>2)]=$18;
 label=6;break;
 case 5: 
 var $20=$4;
 HEAP32[(($ntuple)>>2)]=$20;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $23=HEAP32[(($ntuple)>>2)];
 var $24=($23|0)!=0;
 if($24){label=8;break;}else{label=14;break;}
 case 8: 
 var $26=$3;
 var $27=($26&255);
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=12;break;}
 case 9: 
 var $30=HEAP32[(($ntuple)>>2)];
 var $31=(($30+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){label=10;break;}else{label=11;break;}
 case 10: 
 var $35=$2;
 var $36=_generate_fileh($35);
 var $37=HEAP32[(($ntuple)>>2)];
 var $38=(($37+4)|0);
 HEAP32[(($38)>>2)]=$36;
 label=11;break;
 case 11: 
 var $40=HEAP32[(($ntuple)>>2)];
 var $41=(($40+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=HEAP32[(($ntuple)>>2)];
 var $44=(($43+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=_fseek($42,$45,0);
 label=13;break;
 case 12: 
 var $48=HEAP32[(($ntuple)>>2)];
 var $49=(($48+4)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=_ftell($50);
 var $52=HEAP32[(($ntuple)>>2)];
 var $53=(($52+12)|0);
 HEAP32[(($53)>>2)]=$51;
 label=13;break;
 case 13: 
 var $55=$3;
 var $56=_tuple_readnext($ntuple,$55);
 label=15;break;
 case 14: 
 _do_debug(1,24360,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=16;break;
 case 15: 
 _do_debug(1,24248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $59=HEAP32[(($ntuple)>>2)];
 $1=$59;
 label=16;break;
 case 16: 
 var $61=$1;
 STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_delete($offset,$ctuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $status=sp;
 var $coffset;
 var $rel;
 var $hashfile=(sp)+(8);
 var $tuple_string=(sp)+(4112);
 var $success=(sp)+(5144);
 $1=$offset;
 $2=$ctuple;
 _do_debug(1,24168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=$2;
 var $4=_get_relation($3);
 $rel=$4;
 var $5=$rel;
 var $6=(($5+4668)|0);
 HEAP8[($6)]=1;
 var $7=$2;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+4664)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$2;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($hashfile)|0);
 _relation_full_path($24,$25);
 var $26=(($hashfile)|0);
 var $27=_strcat($26,19768);
 var $28=$rel;
 var $29=(($28+4664)|0);
 var $30=(($hashfile)|0);
 _hashing_load($29,$30);
 label=3;break;
 case 3: 
 var $32=$2;
 var $33=(($tuple_string)|0);
 _tuple_to_string($32,$33);
 var $34=$rel;
 var $35=(($34+4664)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($tuple_string)|0);
 _hashing_delete($36,$37,$success);
 var $38=$2;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=_ftell($40);
 $coffset=$41;
 var $42=$1;
 var $43=($42|0)!=0;
 if($43){label=4;break;}else{label=5;break;}
 case 4: 
 var $45=$2;
 var $46=(($45+4)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$1;
 var $49=_fseek($47,$48,0);
 label=5;break;
 case 5: 
 HEAP8[($status)]=1;
 var $51=$1;
 _do_debug(3,24136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$51,tempVarArgs)); STACKTOP=tempVarArgs;
 var $52=$2;
 var $53=(($52+4)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=_fwrite($status,1,1,$54);
 var $56=$2;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=_fflush($58);
 var $60=HEAP32[((42608)>>2)];
 var $61=((($60)+(1))|0);
 HEAP32[((42608)>>2)]=$61;
 var $62=$1;
 _do_debug(3,24088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$62,tempVarArgs)); STACKTOP=tempVarArgs;
 var $63=$1;
 var $64=$2;
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+4652)|0);
 HEAP32[(($71)>>2)]=$63;
 var $72=$1;
 _do_debug(3,24072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$72,tempVarArgs)); STACKTOP=tempVarArgs;
 var $73=$2;
 var $74=(($73+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$coffset;
 var $77=_fseek($75,$76,0);
 _do_debug(1,24048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return 1;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_write($ctuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+6456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $status=sp;
 var $counter;
 var $bool=(sp)+(8);
 var $numb=(sp)+(16);
 var $string=(sp)+(24);
 var $hashfile=(sp)+(280);
 var $tuple_string=(sp)+(4384);
 var $found_string=(sp)+(5416);
 var $size;
 var $dtype;
 var $res;
 var $rel;
 var $success=(sp)+(6448);
 $2=$ctuple;
 _do_debug(1,24008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=$2;
 var $4=_get_relation($3);
 $rel=$4;
 var $5=$rel;
 var $6=(($5+4668)|0);
 HEAP8[($6)]=1;
 var $7=$2;
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+4664)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 var $18=$2;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($hashfile)|0);
 _relation_full_path($24,$25);
 var $26=(($hashfile)|0);
 var $27=_strcat($26,19768);
 var $28=$rel;
 var $29=(($28+4664)|0);
 var $30=(($hashfile)|0);
 _hashing_load($29,$30);
 label=3;break;
 case 3: 
 var $32=$2;
 var $33=(($tuple_string)|0);
 _tuple_to_string($32,$33);
 var $34=$2;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+4664)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($tuple_string)|0);
 var $44=(($found_string)|0);
 _hashing_retrieve($42,$43,$44,$success);
 var $45=HEAP8[($success)];
 var $46=(($45<<24)>>24)!=0;
 if($46){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP8[($status)]=0;
 var $48=$2;
 var $49=(($48+4)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=_fwrite($status,1,1,$50);
 $counter=0;
 label=5;break;
 case 5: 
 var $53=$2;
 var $54=($53|0)!=0;
 if($54){label=6;break;}else{label=19;break;}
 case 6: 
 var $56=$counter;
 var $57=$2;
 var $58=(($57+8)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=($56|0)<($60|0);
 if($61){label=7;break;}else{label=19;break;}
 case 7: 
 var $63=$counter;
 var $64=$2;
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+($63<<2))|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+48)|0);
 var $72=HEAP8[($71)];
 var $73=(($72<<24)>>24);
 $dtype=$73;
 var $74=$dtype;
 if(($74|0)==3){ label=10;break;}else if(($74|0)==1){ label=8;break;}else if(($74|0)==2){ label=9;break;}else{label=14;break;}
 case 8: 
 var $76=$counter;
 var $77=$2;
 var $78=(($77)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+($76<<2))|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+4)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+52)|0);
 var $85=HEAP32[(($84)>>2)];
 $size=$85;
 var $86=(($string)|0);
 var $87=$counter;
 var $88=$2;
 var $89=(($88)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+($87<<2))|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+8)|0);
 var $94=(($93)|0);
 var $95=$size;
 var $96=_strncpy($86,$94,$95);
 var $97=(($string)|0);
 var $98=$size;
 var $99=$2;
 var $100=(($99+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=_fwrite($97,$98,1,$101);
 $res=$102;
 label=15;break;
 case 9: 
 var $104=$counter;
 var $105=$2;
 var $106=(($105)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+($104<<2))|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+8)|0);
 var $111=(($110)|0);
 var $112=_atoi($111);
 HEAP32[(($numb)>>2)]=$112;
 $size=4;
 var $113=$numb;
 var $114=$size;
 var $115=$2;
 var $116=(($115+4)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=_fwrite($113,$114,1,$117);
 $res=$118;
 label=15;break;
 case 10: 
 var $120=$counter;
 var $121=$2;
 var $122=(($121)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+($120<<2))|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+8)|0);
 var $127=(($126)|0);
 var $128=_strcmp($127,24768);
 var $129=($128|0)==0;
 if($129){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP8[($bool)]=1;
 label=13;break;
 case 12: 
 HEAP8[($bool)]=0;
 label=13;break;
 case 13: 
 $size=1;
 var $133=$size;
 var $134=$2;
 var $135=(($134+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=_fwrite($bool,$133,1,$136);
 $res=$137;
 label=15;break;
 case 14: 
 var $139=$counter;
 var $140=$2;
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+($139<<2))|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+4)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+52)|0);
 var $148=HEAP32[(($147)>>2)];
 $size=$148;
 var $149=(($string)|0);
 var $150=$counter;
 var $151=$2;
 var $152=(($151)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+($150<<2))|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+8)|0);
 var $157=(($156)|0);
 var $158=$size;
 var $159=_strncpy($149,$157,$158);
 var $160=(($string)|0);
 var $161=$size;
 var $162=$2;
 var $163=(($162+4)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=_fwrite($160,$161,1,$164);
 $res=$165;
 label=15;break;
 case 15: 
 var $167=$res;
 var $168=($167|0)!=1;
 if($168){label=16;break;}else{label=17;break;}
 case 16: 
 _leap_printf(23976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=24;break;
 case 17: 
 label=18;break;
 case 18: 
 var $172=$counter;
 var $173=((($172)+(1))|0);
 $counter=$173;
 label=5;break;
 case 19: 
 var $175=HEAP32[((42608)>>2)];
 var $176=((($175)+(1))|0);
 HEAP32[((42608)>>2)]=$176;
 var $177=$2;
 var $178=(($177)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+4664)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($tuple_string)|0);
 _hashing_insert($185,$186,54);
 label=23;break;
 case 20: 
 var $188=HEAP32[((37312)>>2)];
 var $189=($188|0)>=1;
 if($189){label=21;break;}else{label=22;break;}
 case 21: 
 var $191=(($tuple_string)|0);
 _raise_error(6,0,$191,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 _do_debug(1,23736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=1;
 label=24;break;
 case 24: 
 var $195=$1;
 STACKTOP=sp;return $195;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_appendandreturn($ctuple){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $coffset;
 $1=$ctuple;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_ftell($4);
 $coffset=$5;
 var $6=$1;
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_fseek($8,0,2);
 var $10=$1;
 var $11=_tuple_write($10);
 var $12=$1;
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=_fflush($14);
 var $16=$1;
 var $17=(($16+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$coffset;
 var $20=_fseek($18,$19,0);
 STACKTOP=sp;return 1;
}


function _getendposition($ctuple){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $coffset;
 var $epos;
 $1=$ctuple;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=_ftell($4);
 $coffset=$5;
 var $6=$1;
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_fseek($8,0,2);
 var $10=$1;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=_ftell($12);
 $epos=$13;
 var $14=$1;
 var $15=(($14+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$coffset;
 var $18=_fseek($16,$17,0);
 var $19=$epos;
 STACKTOP=sp;return $19;
}


function _atend($ctuple,$epos){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $coffset;
 $2=$ctuple;
 $3=$epos;
 var $4=$2;
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_ftell($6);
 $coffset=$7;
 var $8=$coffset;
 var $9=$3;
 var $10=($8>>>0)>($9>>>0);
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $14=$1;
 STACKTOP=sp;return $14;
  default: assert(0, "bad label: " + label);
 }

}


function _tuple_append($ctuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$ctuple;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+4652)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)!=0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$1;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+4652)|0);
 var $21=HEAP32[(($20)>>2)];
 _do_debug(3,23704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,tempVarArgs)); STACKTOP=tempVarArgs;
 var $22=$1;
 var $23=(($22+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$1;
 var $26=(($25)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+4652)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=_fseek($24,0,$33);
 var $35=$1;
 var $36=(($35)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+4652)|0);
 var $43=HEAP32[(($42)>>2)];
 _do_debug(3,23616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$43,tempVarArgs)); STACKTOP=tempVarArgs;
 var $44=$1;
 var $45=(($44)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+4652)|0);
 HEAP32[(($51)>>2)]=0;
 label=4;break;
 case 3: 
 var $53=$1;
 var $54=(($53+4)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=_fseek($55,0,2);
 label=4;break;
 case 4: 
 var $58=$1;
 var $59=_tuple_write($58);
 STACKTOP=sp;return $59;
  default: assert(0, "bad label: " + label);
 }

}


function _dump_rel($rel){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $fname=sp;
 $1=$rel;
 var $2=$1;
 var $3=(($fname)|0);
 _relation_full_path($2,$3);
 var $4=(($fname)|0);
 var $5=_strcat($4,27168);
 var $6=(($fname)|0);
 var $7=_printrelinfo($6);
 STACKTOP=sp;return;
}


function _generate_random_string($size,$pstring){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $string;
 var $counter;
 $1=$size;
 $2=$pstring;
 var $3=$2;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 var $7=((($6)+(1))|0);
 var $8=_malloc($7);
 $string=$8;
 label=4;break;
 case 3: 
 var $10=$2;
 $string=$10;
 label=4;break;
 case 4: 
 $counter=0;
 label=5;break;
 case 5: 
 var $13=$counter;
 var $14=$1;
 var $15=($13>>>0)<($14>>>0);
 if($15){label=6;break;}else{label=8;break;}
 case 6: 
 var $17=_rand();
 var $18=(((($17|0))%(26))&-1);
 var $19=((($18)+(97))|0);
 var $20=(($19)&255);
 var $21=$counter;
 var $22=$string;
 var $23=(($22+$21)|0);
 HEAP8[($23)]=$20;
 label=7;break;
 case 7: 
 var $25=$counter;
 var $26=((($25)+(1))|0);
 $counter=$26;
 label=5;break;
 case 8: 
 var $28=$1;
 var $29=$string;
 var $30=(($29+$28)|0);
 HEAP8[($30)]=0;
 var $31=$string;
 var $32=(($31)|0);
 HEAP8[($32)]=122;
 var $33=$string;
 var $34=(($33+1)|0);
 HEAP8[($34)]=122;
 var $35=$string;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _util_close(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $error;
 var $tp=sp;
 var $1=HEAP32[((60280)>>2)];
 var $2=($1|0)!=0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=_time(0);
 HEAP32[(($tp)>>2)]=$4;
 var $5=HEAP32[((60280)>>2)];
 var $6=_ctime($tp);
 var $7=_fprintf($5,2464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=HEAP32[((60280)>>2)];
 var $9=_fclose($8);
 $error=$9;
 var $10=$error;
 var $11=($10|0)==-1;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 _raise_error(23,0,2312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _build_base_dir($directory){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$directory;
 var $2=$1;
 var $3=_strncpy(52072,$2,4096);
 var $4=_strlen(52072);
 var $5=((($4)-(1))|0);
 var $6=((52072+$5)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24);
 var $9=($8|0)!=47;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=_strcat(52072,2200);
 label=3;break;
 case 3: 
 var $13=_sprintf(56176,2016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=1896,HEAP32[(((tempVarArgs)+(16))>>2)]=1784,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _util_init(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fname=sp;
 var $randomstr=(sp)+(4104);
 var $1=_strlen(33048);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_strcpy(33048,1672);
 label=3;break;
 case 3: 
 var $6=_strlen(33048);
 var $7=((($6)-(1))|0);
 var $8=((33048+$7)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24);
 var $11=($10|0)!=47;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=_strcat(33048,2200);
 label=5;break;
 case 5: 
 var $15=(($randomstr)|0);
 var $16=_generate_random_string(6,$15);
 var $17=_sprintf(38392,1600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=33048,HEAP32[(((tempVarArgs)+(8))>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(3,30896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=33048,HEAP32[(((tempVarArgs)+(8))>>2)]=38392,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=(($fname)|0);
 _do_debug(3,30776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=56176,HEAP32[(((tempVarArgs)+(8))>>2)]=$18,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _check_assign($ptr,$string){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$ptr;
 $2=$string;
 var $3=$1;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 _raise_error(4,2,$6,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _do_trace($trace_string){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$trace_string;
 var $2=HEAP8[(37240)];
 var $3=($2&255);
 var $4=($3|0)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((37312)>>2)];
 var $7=($6|0)>=1;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$1;
 _raise_message(1,$9,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _cut_to_right_bracket($s,$bdepth,$force,$result){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $bracket=sp;
 var $bexist;
 var $start;
 var $finish;
 var $counter;
 var $c;
 var $no;
 var $depth;
 var $rstr=(sp)+(2040);
 var $tstr=(sp)+(3072);
 var $tstrp;
 var $endstart;
 var $beginning;
 var $ostart;
 var $removed=(sp)+(4104);
 var $slen;
 $2=$s;
 $3=$bdepth;
 $4=$force;
 $5=$result;
 $bexist=0;
 $slen=0;
 var $6=$2;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=$2;
 var $10=_strlen($9);
 var $11=($10|0)==0;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=$5;
 var $14=_strcpy($13,51592);
 var $15=$5;
 $1=$15;
 label=35;break;
 case 4: 
 var $17=$2;
 var $18=_strlen($17);
 $slen=$18;
 $counter=0;
 label=5;break;
 case 5: 
 var $20=$counter;
 var $21=($20|0)<255;
 if($21){label=6;break;}else{label=8;break;}
 case 6: 
 var $23=$counter;
 var $24=(($bracket+($23<<3))|0);
 var $25=(($24+4)|0);
 HEAP32[(($25)>>2)]=0;
 var $26=$counter;
 var $27=(($bracket+($26<<3))|0);
 var $28=(($27)|0);
 HEAP32[(($28)>>2)]=0;
 label=7;break;
 case 7: 
 var $30=$counter;
 var $31=((($30)+(1))|0);
 $counter=$31;
 label=5;break;
 case 8: 
 var $33=(($bracket)|0);
 var $34=(($33)|0);
 HEAP32[(($34)>>2)]=0;
 var $35=(($bracket)|0);
 var $36=(($35+4)|0);
 HEAP32[(($36)>>2)]=1;
 var $37=$slen;
 var $38=((($37)+(1))|0);
 var $39=(($bracket+8)|0);
 var $40=(($39)|0);
 HEAP32[(($40)>>2)]=$38;
 var $41=(($bracket+8)|0);
 var $42=(($41+4)|0);
 HEAP32[(($42)>>2)]=1;
 $c=0;
 $depth=1;
 $no=0;
 label=9;break;
 case 9: 
 var $44=$c;
 var $45=$slen;
 var $46=($44>>>0)<=($45>>>0);
 if($46){label=10;break;}else{label=15;break;}
 case 10: 
 var $48=$c;
 var $49=$2;
 var $50=(($49+$48)|0);
 var $51=HEAP8[($50)];
 var $52=(($51<<24)>>24);
 var $53=($52|0)==40;
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $55=$c;
 var $56=$no;
 var $57=(($bracket+($56<<3))|0);
 var $58=(($57)|0);
 HEAP32[(($58)>>2)]=$55;
 var $59=$depth;
 var $60=$no;
 var $61=(($bracket+($60<<3))|0);
 var $62=(($61+4)|0);
 HEAP32[(($62)>>2)]=$59;
 var $63=$depth;
 var $64=((($63)+(1))|0);
 $depth=$64;
 $bexist=1;
 var $65=$no;
 var $66=((($65)+(1))|0);
 $no=$66;
 label=12;break;
 case 12: 
 var $68=$c;
 var $69=$2;
 var $70=(($69+$68)|0);
 var $71=HEAP8[($70)];
 var $72=(($71<<24)>>24);
 var $73=($72|0)==41;
 if($73){label=13;break;}else{label=14;break;}
 case 13: 
 var $75=$depth;
 var $76=((($75)-(1))|0);
 $depth=$76;
 var $77=$c;
 var $78=$no;
 var $79=(($bracket+($78<<3))|0);
 var $80=(($79)|0);
 HEAP32[(($80)>>2)]=$77;
 var $81=$depth;
 var $82=$no;
 var $83=(($bracket+($82<<3))|0);
 var $84=(($83+4)|0);
 HEAP32[(($84)>>2)]=$81;
 var $85=$no;
 var $86=((($85)+(1))|0);
 $no=$86;
 label=14;break;
 case 14: 
 var $88=$c;
 var $89=((($88)+(1))|0);
 $c=$89;
 label=9;break;
 case 15: 
 var $91=$3;
 var $92=$depth;
 var $93=($91|0)>($92|0);
 if($93){label=16;break;}else{label=17;break;}
 case 16: 
 var $95=$depth;
 $3=$95;
 label=17;break;
 case 17: 
 var $97=$bexist;
 var $98=(($97<<24)>>24)!=0;
 if($98){label=20;break;}else{label=18;break;}
 case 18: 
 var $100=$4;
 var $101=($100|0)==1;
 if($101){label=19;break;}else{label=20;break;}
 case 19: 
 var $103=$5;
 var $104=$2;
 var $105=_strcpy($103,$104);
 var $106=$2;
 var $107=_strcpy($106,51592);
 var $108=$5;
 $1=$108;
 label=35;break;
 case 20: 
 var $110=$bexist;
 var $111=(($110<<24)>>24)!=0;
 if($111){label=23;break;}else{label=21;break;}
 case 21: 
 var $113=$4;
 var $114=($113|0)==0;
 if($114){label=22;break;}else{label=23;break;}
 case 22: 
 var $116=$5;
 var $117=_strcpy($116,51584);
 var $118=$5;
 $1=$118;
 label=35;break;
 case 23: 
 var $120=(($tstr)|0);
 var $121=$2;
 var $122=_strncpy($120,$121,1024);
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 var $125=(($tstr)|0);
 $ostart=$125;
 var $126=(($rstr)|0);
 var $127=_strncpy($126,51592,1024);
 $c=0;
 label=26;break;
 case 26: 
 var $129=$c;
 var $130=(($bracket+($129<<3))|0);
 var $131=(($130+4)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=$3;
 var $134=($132|0)<($133|0);
 if($134){label=27;break;}else{label=28;break;}
 case 27: 
 var $136=$c;
 var $137=((($136)+(1))|0);
 $c=$137;
 label=26;break;
 case 28: 
 var $139=$c;
 $start=$139;
 var $140=$c;
 var $141=((($140)+(1))|0);
 $c=$141;
 label=29;break;
 case 29: 
 var $143=$c;
 var $144=(($bracket+($143<<3))|0);
 var $145=(($144+4)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$3;
 var $148=($146|0)>($147|0);
 if($148){label=30;break;}else{label=31;break;}
 case 30: 
 var $150=$c;
 var $151=((($150)+(1))|0);
 $c=$151;
 label=29;break;
 case 31: 
 var $153=$c;
 $finish=$153;
 var $154=$finish;
 var $155=(($bracket+($154<<3))|0);
 var $156=(($155)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(($tstr+$157)|0);
 HEAP8[($158)]=0;
 var $159=$start;
 var $160=(($bracket+($159<<3))|0);
 var $161=(($160)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=((($162)+(1))|0);
 var $164=(($tstr+$163)|0);
 $tstrp=$164;
 var $165=$5;
 var $166=$tstrp;
 var $167=_strcpy($165,$166);
 var $168=$start;
 var $169=(($bracket+($168<<3))|0);
 var $170=(($169)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=(($tstr+$171)|0);
 $tstrp=$172;
 var $173=$tstrp;
 HEAP8[($173)]=0;
 var $174=$finish;
 var $175=(($bracket+($174<<3))|0);
 var $176=(($175)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=((($177)+(1))|0);
 var $179=(($tstr+$178)|0);
 $endstart=$179;
 var $180=$ostart;
 $beginning=$180;
 var $181=(($removed)|0);
 var $182=$beginning;
 var $183=$endstart;
 var $184=_sprintf($181,1600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$182,HEAP32[(((tempVarArgs)+(8))>>2)]=$183,tempVarArgs)); STACKTOP=tempVarArgs;
 var $185=(($removed)|0);
 var $186=_strlen($185);
 var $187=($186|0)==0;
 if($187){label=32;break;}else{label=33;break;}
 case 32: 
 var $189=$2;
 HEAP8[($189)]=0;
 label=34;break;
 case 33: 
 var $191=$2;
 var $192=(($removed)|0);
 var $193=_strncpy($191,$192,1024);
 label=34;break;
 case 34: 
 var $195=$5;
 $1=$195;
 label=35;break;
 case 35: 
 var $197=$1;
 STACKTOP=sp;return $197;
  default: assert(0, "bad label: " + label);
 }

}


function _allbut($string,$chars){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $newstring;
 var $ilength;
 var $length;
 var $count;
 var $icount;
 var $ocount;
 var $found;
 $1=$string;
 $2=$chars;
 $found=0;
 var $3=$1;
 var $4=_strlen($3);
 $length=$4;
 var $5=$2;
 var $6=_strlen($5);
 $ilength=$6;
 var $7=$length;
 var $8=((($7)+(1))|0);
 var $9=_malloc($8);
 $newstring=$9;
 $ocount=0;
 $count=0;
 label=2;break;
 case 2: 
 var $11=$count;
 var $12=$length;
 var $13=($11|0)<($12|0);
 if($13){label=3;break;}else{label=14;break;}
 case 3: 
 $found=0;
 $icount=0;
 label=4;break;
 case 4: 
 var $16=$found;
 var $17=($16&255);
 var $18=($17|0)==0;
 if($18){label=5;break;}else{label=10;break;}
 case 5: 
 var $20=$icount;
 var $21=$ilength;
 var $22=($20|0)<($21|0);
 if($22){label=6;break;}else{label=10;break;}
 case 6: 
 var $24=$count;
 var $25=$1;
 var $26=(($25+$24)|0);
 var $27=HEAP8[($26)];
 var $28=(($27<<24)>>24);
 var $29=$icount;
 var $30=$2;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=(($32<<24)>>24);
 var $34=($28|0)==($33|0);
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 $found=1;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $38=$icount;
 var $39=((($38)+(1))|0);
 $icount=$39;
 label=4;break;
 case 10: 
 var $41=$found;
 var $42=($41&255);
 var $43=($42|0)==0;
 if($43){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=$count;
 var $46=$1;
 var $47=(($46+$45)|0);
 var $48=HEAP8[($47)];
 var $49=$ocount;
 var $50=$newstring;
 var $51=(($50+$49)|0);
 HEAP8[($51)]=$48;
 var $52=$ocount;
 var $53=((($52)+(1))|0);
 $ocount=$53;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $56=$count;
 var $57=((($56)+(1))|0);
 $count=$57;
 label=2;break;
 case 14: 
 var $59=$ocount;
 var $60=$newstring;
 var $61=(($60+$59)|0);
 HEAP8[($61)]=0;
 var $62=$newstring;
 STACKTOP=sp;return $62;
  default: assert(0, "bad label: " + label);
 }

}


function _cut_token($string,$seperator,$result){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $seperator_list=sp;
 var $rptr;
 var $length;
 $1=$string;
 $2=$seperator;
 $3=$result;
 var $4=$2;
 var $5=(($4<<24)>>24);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($seperator_list)|0);
 var $9=_strcpy($8,30200);
 label=4;break;
 case 3: 
 var $11=(($seperator_list)|0);
 var $12=$2;
 var $13=(($12<<24)>>24);
 var $14=_sprintf($11,30000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 var $16=$3;
 var $17=$1;
 var $18=_strcpy($16,$17);
 var $19=$3;
 var $20=(($seperator_list)|0);
 var $21=_strtok($19,$20);
 $rptr=$21;
 var $22=$rptr;
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $25=$3;
 var $26=(($25)|0);
 HEAP8[($26)]=0;
 label=12;break;
 case 6: 
 var $28=$rptr;
 var $29=_strlen($28);
 $length=$29;
 label=7;break;
 case 7: 
 var $31=$length;
 var $32=$1;
 var $33=(($32+$31)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24);
 var $36=($35|0)==32;
 if($36){var $45=1;label=9;break;}else{label=8;break;}
 case 8: 
 var $38=$length;
 var $39=$1;
 var $40=(($39+$38)|0);
 var $41=HEAP8[($40)];
 var $42=(($41<<24)>>24);
 var $43=($42|0)==44;
 var $45=$43;label=9;break;
 case 9: 
 var $45;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 var $47=$length;
 var $48=((($47)+(1))|0);
 $length=$48;
 label=7;break;
 case 11: 
 var $50=$1;
 var $51=$length;
 var $52=$1;
 var $53=(($52+$51)|0);
 var $54=_strcpy($50,$53);
 label=12;break;
 case 12: 
 var $56=$3;
 STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }

}


function _skip_to_alnum($string){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $pos;
 $1=$string;
 $pos=0;
 label=2;break;
 case 2: 
 var $3=$pos;
 var $4=$1;
 var $5=(($4+$3)|0);
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24);
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{var $19=0;label=4;break;}
 case 3: 
 var $10=$pos;
 var $11=$1;
 var $12=(($11+$10)|0);
 var $13=HEAP8[($12)];
 var $14=(($13<<24)>>24);
 var $15=_isalnum($14);
 var $16=($15|0)!=0;
 var $17=$16^1;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$pos;
 var $22=((($21)+(1))|0);
 $pos=$22;
 label=2;break;
 case 6: 
 var $24=$pos;
 var $25=$1;
 var $26=(($25+$24)|0);
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }

}


function _binsearch($word,$commands,$n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $cond;
 var $low;
 var $high;
 var $mid;
 $2=$word;
 $3=$commands;
 $4=$n;
 $low=0;
 var $5=$4;
 var $6=((($5)-(1))|0);
 $high=$6;
 label=2;break;
 case 2: 
 var $8=$low;
 var $9=$high;
 var $10=($8|0)<=($9|0);
 if($10){label=3;break;}else{label=10;break;}
 case 3: 
 var $12=$low;
 var $13=$high;
 var $14=((($12)+($13))|0);
 var $15=(((($14|0))/(2))&-1);
 $mid=$15;
 var $16=$2;
 var $17=$mid;
 var $18=$3;
 var $19=(($18+($17<<3))|0);
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=_strcmp($16,$21);
 $cond=$22;
 var $23=($22|0)<0;
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $25=$mid;
 var $26=((($25)-(1))|0);
 $high=$26;
 label=9;break;
 case 5: 
 var $28=$cond;
 var $29=($28|0)>0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$mid;
 var $32=((($31)+(1))|0);
 $low=$32;
 label=8;break;
 case 7: 
 var $34=$mid;
 $1=$34;
 label=11;break;
 case 8: 
 label=9;break;
 case 9: 
 label=2;break;
 case 10: 
 $1=-1;
 label=11;break;
 case 11: 
 var $39=$1;
 STACKTOP=sp;return $39;
  default: assert(0, "bad label: " + label);
 }

}


function _get_command($word){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $result;
 var $counter;
 $2=$word;
 $counter=0;
 label=2;break;
 case 2: 
 var $4=$counter;
 var $5=$2;
 var $6=(($5+$4)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24);
 var $9=($8|0)==32;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$counter;
 var $12=((($11)+(1))|0);
 $counter=$12;
 label=2;break;
 case 4: 
 var $14=$counter;
 var $15=$2;
 var $16=(($15+$14)|0);
 $2=$16;
 var $17=$2;
 var $18=_binsearch($17,800,92);
 $result=$18;
 var $19=$result;
 var $20=($19|0)!=-1;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=$result;
 var $23=((800+($22<<3))|0);
 var $24=(($23+4)|0);
 var $25=HEAP32[(($24)>>2)];
 $1=$25;
 label=7;break;
 case 6: 
 $1=-1;
 label=7;break;
 case 7: 
 var $28=$1;
 STACKTOP=sp;return $28;
  default: assert(0, "bad label: " + label);
 }

}


function _assign_input_stream($filen){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $temp=sp;
 var $ninputstream;
 $1=$filen;
 var $2=$1;
 _do_debug(1,29824,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=$1;
 var $4=_strlen($3);
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 _do_trace(29696);
 var $7=HEAP32[((42680)>>2)];
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=HEAP32[((42680)>>2)];
 var $11=_fclose($10);
 label=4;break;
 case 4: 
 var $13=HEAP32[((_stdin)>>2)];
 HEAP32[((42680)>>2)]=$13;
 label=9;break;
 case 5: 
 var $15=(($temp)|0);
 var $16=$1;
 var $17=_sprintf($15,29576,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=(($temp)|0);
 _do_trace($18);
 var $19=$1;
 var $20=_fopen($19,29488);
 $ninputstream=$20;
 var $21=$ninputstream;
 var $22=($21|0)==0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=HEAP32[((_stdin)>>2)];
 HEAP32[((42680)>>2)]=$24;
 var $25=$1;
 _raise_error(2,0,$25,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(29376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 7: 
 var $27=$ninputstream;
 HEAP32[((42680)>>2)]=$27;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 _do_debug(1,29280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _find_start_of_data($string){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $sptr;
 $2=$string;
 var $3=$2;
 $sptr=$3;
 label=2;break;
 case 2: 
 var $5=$sptr;
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24);
 var $8=($7|0)!=0;
 if($8){label=3;break;}else{var $34=0;label=9;break;}
 case 3: 
 var $10=$sptr;
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24);
 var $13=($12|0)<65;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=$sptr;
 var $16=HEAP8[($15)];
 var $17=(($16<<24)>>24);
 var $18=($17|0)>90;
 if($18){label=5;break;}else{var $32=0;label=8;break;}
 case 5: 
 var $20=$sptr;
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24);
 var $23=($22|0)<97;
 if($23){var $30=1;label=7;break;}else{label=6;break;}
 case 6: 
 var $25=$sptr;
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24);
 var $28=($27|0)>122;
 var $30=$28;label=7;break;
 case 7: 
 var $30;
 var $32=$30;label=8;break;
 case 8: 
 var $32;
 var $34=$32;label=9;break;
 case 9: 
 var $34;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 var $36=$sptr;
 var $37=(($36+1)|0);
 $sptr=$37;
 label=2;break;
 case 11: 
 var $39=$sptr;
 var $40=HEAP8[($39)];
 var $41=(($40<<24)>>24);
 var $42=($41|0)==0;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 $1=0;
 label=14;break;
 case 13: 
 var $45=$sptr;
 $1=$45;
 label=14;break;
 case 14: 
 var $47=$1;
 STACKTOP=sp;return $47;
  default: assert(0, "bad label: " + label);
 }

}


function _list_source_code(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8208)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $d;
 var $directory;
 var $dirpath=sp;
 var $filename=(sp)+(4104);
 var $cptr;
 var $1=(($dirpath)|0);
 var $2=HEAP32[((43016)>>2)];
 var $3=_database_dir($2);
 var $4=_sprintf($1,1600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,HEAP32[(((tempVarArgs)+(8))>>2)]=28960,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=(($dirpath)|0);
 var $6=_opendir($5);
 $directory=$6;
 var $7=$directory;
 var $8=_readdir($7);
 $d=$8;
 _leap_printf(28800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _leap_printf(28624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 var $10=$d;
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=6;break;}
 case 3: 
 var $13=$d;
 var $14=(($13+11)|0);
 var $15=(($14)|0);
 var $16=_strstr($15,28432);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=(($filename)|0);
 var $20=$d;
 var $21=(($20+11)|0);
 var $22=(($21)|0);
 var $23=_strcpy($19,$22);
 var $24=(($filename)|0);
 var $25=_strstr($24,28432);
 $cptr=$25;
 var $26=$cptr;
 HEAP8[($26)]=0;
 var $27=(($filename)|0);
 _leap_printf(28296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 var $29=$directory;
 var $30=_readdir($29);
 $d=$30;
 label=2;break;
 case 6: 
 var $32=$directory;
 var $33=_closedir($32);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _print_source_code($file_name){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $dirpath=sp;
 var $source_line=(sp)+(4104);
 var $read_status;
 var $fptr;
 var $x;
 $1=$file_name;
 var $2=(($dirpath)|0);
 var $3=HEAP32[((43016)>>2)];
 var $4=_database_dir($3);
 var $5=$1;
 var $6=_sprintf($2,28208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,HEAP32[(((tempVarArgs)+(8))>>2)]=28960,HEAP32[(((tempVarArgs)+(16))>>2)]=$5,HEAP32[(((tempVarArgs)+(24))>>2)]=28432,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=(($dirpath)|0);
 var $8=_fopen($7,29488);
 $fptr=$8;
 var $9=$fptr;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$1;
 _raise_error(2,0,$12,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=13;break;
 case 3: 
 var $14=(($source_line)|0);
 var $15=$fptr;
 var $16=_fgets($14,1024,$15);
 $read_status=$16;
 var $17=$read_status;
 var $18=($17|0)!=0;
 if($18){label=4;break;}else{label=9;break;}
 case 4: 
 var $20=HEAP32[((_stdout)>>2)];
 var $21=$1;
 _leap_fprintf($20,28088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,tempVarArgs)); STACKTOP=tempVarArgs;
 var $22=HEAP32[((_stdout)>>2)];
 _leap_fprintf($22,28008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $x=0;
 label=5;break;
 case 5: 
 var $24=$x;
 var $25=$1;
 var $26=_strlen($25);
 var $27=($24>>>0)<($26>>>0);
 if($27){label=6;break;}else{label=8;break;}
 case 6: 
 var $29=HEAP32[((_stdout)>>2)];
 _leap_fprintf($29,27944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 var $31=$x;
 var $32=((($31)+(1))|0);
 $x=$32;
 label=5;break;
 case 8: 
 var $34=HEAP32[((_stdout)>>2)];
 _leap_fprintf($34,27872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 label=10;break;
 case 10: 
 var $37=$read_status;
 var $38=($37|0)!=0;
 if($38){label=11;break;}else{label=12;break;}
 case 11: 
 var $40=HEAP32[((_stdout)>>2)];
 var $41=(($source_line)|0);
 _leap_fprintf($40,$41,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $42=(($source_line)|0);
 var $43=$fptr;
 var $44=_fgets($42,1024,$43);
 $read_status=$44;
 label=10;break;
 case 12: 
 _leap_printf(27632,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $46=$fptr;
 var $47=_fclose($46);
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _reverse_source_code(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+13336)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dirpath=sp;
 var $source_line=(sp)+(4104);
 var $read_status;
 var $ofname=(sp)+(5128);
 var $filename=(sp)+(9232);
 var $cptr;
 var $fptr;
 var $directory;
 var $d;
 var $1=(($dirpath)|0);
 var $2=HEAP32[((43016)>>2)];
 var $3=_database_dir($2);
 var $4=_sprintf($1,1600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,HEAP32[(((tempVarArgs)+(8))>>2)]=28960,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=(($dirpath)|0);
 var $6=_opendir($5);
 $directory=$6;
 var $7=$directory;
 var $8=_readdir($7);
 $d=$8;
 label=2;break;
 case 2: 
 var $10=$d;
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=12;break;}
 case 3: 
 var $13=$d;
 var $14=(($13+11)|0);
 var $15=(($14)|0);
 var $16=_strstr($15,28432);
 var $17=($16|0)!=0;
 if($17){label=4;break;}else{label=11;break;}
 case 4: 
 var $19=(($filename)|0);
 var $20=$d;
 var $21=(($20+11)|0);
 var $22=(($21)|0);
 var $23=_strcpy($19,$22);
 var $24=(($ofname)|0);
 var $25=(($dirpath)|0);
 var $26=(($filename)|0);
 var $27=_sprintf($24,1600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$25,HEAP32[(((tempVarArgs)+(8))>>2)]=$26,tempVarArgs)); STACKTOP=tempVarArgs;
 var $28=(($filename)|0);
 var $29=_strstr($28,28432);
 $cptr=$29;
 var $30=$cptr;
 HEAP8[($30)]=0;
 var $31=(($filename)|0);
 _leap_printf(27544,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$31,tempVarArgs)); STACKTOP=tempVarArgs;
 var $32=(($ofname)|0);
 var $33=_fopen($32,29488);
 $fptr=$33;
 var $34=$fptr;
 var $35=($34|0)==0;
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=(($filename)|0);
 _raise_error(2,0,$37,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 6: 
 var $39=(($source_line)|0);
 var $40=$fptr;
 var $41=_fgets($39,1024,$40);
 $read_status=$41;
 label=7;break;
 case 7: 
 var $43=$read_status;
 var $44=($43|0)!=0;
 if($44){label=8;break;}else{label=9;break;}
 case 8: 
 var $46=(($source_line)|0);
 _leap_printf($46,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $47=(($source_line)|0);
 var $48=$fptr;
 var $49=_fgets($47,1024,$48);
 $read_status=$49;
 label=7;break;
 case 9: 
 _leap_printf(27480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $51=$fptr;
 var $52=_fclose($51);
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $55=$directory;
 var $56=_readdir($55);
 $d=$56;
 label=2;break;
 case 12: 
 var $58=$directory;
 var $59=_closedir($58);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _upcase($string){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $counter;
 var $s;
 $1=$string;
 $counter=0;
 label=2;break;
 case 2: 
 var $3=$counter;
 var $4=$1;
 var $5=_strlen($4);
 var $6=($3>>>0)<($5>>>0);
 if($6){label=3;break;}else{label=8;break;}
 case 3: 
 var $8=$counter;
 var $9=$1;
 var $10=(($9+$8)|0);
 $s=$10;
 var $11=$s;
 var $12=HEAP8[($11)];
 var $13=(($12<<24)>>24);
 var $14=($13|0)>=97;
 if($14){label=4;break;}else{label=6;break;}
 case 4: 
 var $16=$s;
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 var $19=($18|0)<=122;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=$s;
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24);
 var $24=((($23)-(32))|0);
 var $25=(($24)&255);
 HEAP8[($21)]=$25;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $28=$counter;
 var $29=((($28)+(1))|0);
 $counter=$29;
 label=2;break;
 case 8: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _print_helppage($page){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $helpfile;
 var $helpfile_name=sp;
 var $line=(sp)+(4104);
 var $lptr;
 var $sptr;
 var $counter;
 var $tabcounter;
 var $introcount;
 var $finished;
 var $printing;
 var $summary;
 var $intro;
 $1=$page;
 $tabcounter=0;
 $introcount=0;
 $finished=0;
 $printing=0;
 $summary=0;
 $intro=0;
 var $2=HEAP32[((_stdout)>>2)];
 var $3=$1;
 _leap_fprintf($2,27336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=(($helpfile_name)|0);
 var $5=_sprintf($4,2016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=27232,HEAP32[(((tempVarArgs)+(16))>>2)]=27184,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=(($helpfile_name)|0);
 var $7=_fopen($6,29488);
 $helpfile=$7;
 var $8=$helpfile;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=40;break;}
 case 2: 
 var $11=$1;
 _upcase($11);
 var $12=$1;
 var $13=_strcmp($12,27160);
 var $14=($13|0)==0;
 var $15=($14&1);
 var $16=(($15)&255);
 $summary=$16;
 var $17=$1;
 var $18=_strlen($17);
 var $19=($18|0)==0;
 if($19){label=3;break;}else{label=4;break;}
 case 3: 
 $printing=1;
 $intro=1;
 label=4;break;
 case 4: 
 label=5;break;
 case 5: 
 var $23=(($line)|0);
 var $24=$helpfile;
 var $25=_fgets($23,80,$24);
 $lptr=$25;
 var $26=(($line)|0);
 var $27=_strlen($26);
 var $28=((($27)-(1))|0);
 var $29=(($line+$28)|0);
 HEAP8[($29)]=0;
 var $30=(($line)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24);
 var $33=($32|0)==91;
 if($33){label=6;break;}else{label=7;break;}
 case 6: 
 label=35;break;
 case 7: 
 var $36=(($line)|0);
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=($38|0)==35;
 if($39){label=8;break;}else{label=23;break;}
 case 8: 
 var $41=(($line)|0);
 var $42=_strlen($41);
 var $43=((($42)-(1))|0);
 $counter=$43;
 label=9;break;
 case 9: 
 var $45=$counter;
 var $46=(($line+$45)|0);
 var $47=HEAP8[($46)];
 var $48=(($47<<24)>>24);
 var $49=($48|0)==32;
 if($49){label=10;break;}else{label=11;break;}
 case 10: 
 var $51=$counter;
 var $52=((($51)-(1))|0);
 $counter=$52;
 label=9;break;
 case 11: 
 var $54=$counter;
 var $55=((($54)+(1))|0);
 var $56=(($line+$55)|0);
 HEAP8[($56)]=0;
 var $57=(($line+2)|0);
 $sptr=$57;
 var $58=$sptr;
 var $59=$1;
 var $60=_strcmp($58,$59);
 var $61=($60|0)==0;
 if($61){label=12;break;}else{label=13;break;}
 case 12: 
 $printing=1;
 label=22;break;
 case 13: 
 var $64=$summary;
 var $65=($64&255);
 var $66=($65|0)==1;
 if($66){label=14;break;}else{label=21;break;}
 case 14: 
 var $68=HEAP32[((_stdout)>>2)];
 var $69=$sptr;
 _leap_fprintf($68,27136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$69,tempVarArgs)); STACKTOP=tempVarArgs;
 var $70=$sptr;
 var $71=_strlen($70);
 $counter=$71;
 label=15;break;
 case 15: 
 var $73=$counter;
 var $74=($73|0)<20;
 if($74){label=16;break;}else{label=18;break;}
 case 16: 
 var $76=HEAP32[((_stdout)>>2)];
 _leap_fprintf($76,27072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=17;break;
 case 17: 
 var $78=$counter;
 var $79=((($78)+(1))|0);
 $counter=$79;
 label=15;break;
 case 18: 
 var $81=$tabcounter;
 var $82=((($81)+(1))|0);
 $tabcounter=$82;
 var $83=$tabcounter;
 var $84=($83|0)>=3;
 if($84){label=19;break;}else{label=20;break;}
 case 19: 
 $tabcounter=0;
 var $86=HEAP32[((_stdout)>>2)];
 _leap_fprintf($86,27872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 20: 
 var $88=HEAP32[((_stdout)>>2)];
 var $89=_fflush($88);
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=34;break;
 case 23: 
 var $93=$printing;
 var $94=($93&255);
 var $95=($94|0)==1;
 if($95){label=24;break;}else{label=30;break;}
 case 24: 
 var $97=(($line)|0);
 var $98=HEAP8[($97)];
 var $99=(($98<<24)>>24);
 var $100=($99|0)==43;
 if($100){label=25;break;}else{label=30;break;}
 case 25: 
 var $102=$intro;
 var $103=($102&255);
 var $104=($103|0)==1;
 if($104){label=26;break;}else{label=28;break;}
 case 26: 
 var $106=$introcount;
 var $107=($106|0)<3;
 if($107){label=27;break;}else{label=28;break;}
 case 27: 
 var $109=$introcount;
 var $110=((($109)+(1))|0);
 $introcount=$110;
 label=29;break;
 case 28: 
 $printing=0;
 $finished=1;
 label=29;break;
 case 29: 
 label=33;break;
 case 30: 
 var $114=$printing;
 var $115=($114&255);
 var $116=($115|0)==1;
 if($116){label=31;break;}else{label=32;break;}
 case 31: 
 var $118=(($line)|0);
 _leap_printf(28296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$118,tempVarArgs)); STACKTOP=tempVarArgs;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $124=$finished;
 var $125=($124&255);
 var $126=($125|0)!=1;
 if($126){label=37;break;}else{var $131=0;label=38;break;}
 case 37: 
 var $128=$lptr;
 var $129=($128|0)!=0;
 var $131=$129;label=38;break;
 case 38: 
 var $131;
 if($131){label=5;break;}else{label=39;break;}
 case 39: 
 _leap_printf(27872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $133=$helpfile;
 var $134=_fclose($133);
 label=41;break;
 case 40: 
 var $136=(($helpfile_name)|0);
 _raise_error(2,0,$136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _set_prompt($prompt){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 $1=$prompt;
 var $2=_strcpy(47152,42760);
 var $3=$1;
 var $4=_strcpy(42760,$3);
 HEAP8[(42584)]=1;
 STACKTOP=sp;return;
}


function _unset_prompt(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(42584)];
 var $2=($1&255);
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=_strcpy(42760,47152);
 HEAP8[(42584)]=0;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _copy_to_token($source,$delimiter,$destination){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $sptr;
 $2=$source;
 $3=$delimiter;
 $4=$destination;
 var $5=$2;
 var $6=$3;
 var $7=_strtok($5,$6);
 $sptr=$7;
 var $8=$sptr;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=$4;
 var $12=$sptr;
 var $13=_strcpy($11,$12);
 var $14=$4;
 $1=$14;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $17=$1;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function _strip_leading_spaces($source){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $sptr;
 var $temp=sp;
 var $counter;
 $1=$source;
 $counter=0;
 var $2=$counter;
 var $3=$1;
 var $4=(($3+$2)|0);
 $sptr=$4;
 label=2;break;
 case 2: 
 var $6=$sptr;
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24);
 var $9=($8|0)==32;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$counter;
 var $12=((($11)+(1))|0);
 $counter=$12;
 var $13=$counter;
 var $14=$1;
 var $15=(($14+$13)|0);
 $sptr=$15;
 label=2;break;
 case 4: 
 var $17=(($temp)|0);
 var $18=$sptr;
 var $19=_strcpy($17,$18);
 var $20=$1;
 var $21=(($temp)|0);
 var $22=_strcpy($20,$21);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _strip_trailing_spaces($string){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $sptr;
 $1=$string;
 var $2=$1;
 var $3=_strlen($2);
 var $4=((($3)-(1))|0);
 var $5=$1;
 var $6=(($5+$4)|0);
 $sptr=$6;
 label=2;break;
 case 2: 
 var $8=$sptr;
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24);
 var $11=($10|0)==32;
 if($11){var $23=1;label=5;break;}else{label=3;break;}
 case 3: 
 var $13=$sptr;
 var $14=HEAP8[($13)];
 var $15=(($14<<24)>>24);
 var $16=($15|0)==10;
 if($16){var $23=1;label=5;break;}else{label=4;break;}
 case 4: 
 var $18=$sptr;
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 var $21=($20|0)==13;
 var $23=$21;label=5;break;
 case 5: 
 var $23;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$sptr;
 var $26=((($25)-(1))|0);
 $sptr=$26;
 label=2;break;
 case 7: 
 var $28=$sptr;
 var $29=(($28+1)|0);
 HEAP8[($29)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _start_record($fname){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $dirpath=sp;
 $1=$fname;
 var $2=(($dirpath)|0);
 var $3=HEAP32[((43016)>>2)];
 var $4=_database_dir($3);
 var $5=$1;
 var $6=_sprintf($2,28208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$4,HEAP32[(((tempVarArgs)+(8))>>2)]=28960,HEAP32[(((tempVarArgs)+(16))>>2)]=$5,HEAP32[(((tempVarArgs)+(24))>>2)]=28432,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=HEAP32[((43016)>>2)];
 var $8=$1;
 var $9=(($dirpath)|0);
 var $10=_vprocess_query($7,27000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$8,HEAP32[(((tempVarArgs)+(8))>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $11=(($dirpath)|0);
 var $12=_fopen($11,26784);
 HEAP32[((42568)>>2)]=$12;
 HEAP8[(42576)]=1;
 STACKTOP=sp;return;
}


function _stop_record(){
 var label=0;


 var $1=HEAP32[((42568)>>2)];
 var $2=_fclose($1);
 HEAP8[(42576)]=0;
 return;
}


function _dumprelstruct($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$rel;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6)|0);
 _leap_printf(26672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$7,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=$1;
 var $9=(($8+4644)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 _leap_printf(26584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$11,tempVarArgs)); STACKTOP=tempVarArgs;
 var $12=$1;
 var $13=(($12+4648)|0);
 var $14=HEAP32[(($13)>>2)];
 _leap_printf(26504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$14,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=$1;
 var $16=(($15+4660)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 _leap_printf(26416,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$18,tempVarArgs)); STACKTOP=tempVarArgs;
 var $19=$1;
 var $20=(($19+4669)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 _leap_printf(26344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$22,tempVarArgs)); STACKTOP=tempVarArgs;
 var $23=$1;
 var $24=(($23+4668)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 _leap_printf(26264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs)); STACKTOP=tempVarArgs;
 var $27=$1;
 var $28=(($27+4664)|0);
 var $29=HEAP32[(($28)>>2)];
 _leap_printf(26168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$29,tempVarArgs)); STACKTOP=tempVarArgs;
 var $30=$1;
 var $31=(($30+26)|0);
 var $32=(($31)|0);
 _leap_printf(26072,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,tempVarArgs)); STACKTOP=tempVarArgs;
 var $33=$1;
 var $34=(($33+4123)|0);
 var $35=(($34)|0);
 _leap_printf(26000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=$1;
 var $37=(($36+4636)|0);
 var $38=HEAP32[(($37)>>2)];
 _leap_printf(25784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$38,tempVarArgs)); STACKTOP=tempVarArgs;
 var $39=$1;
 var $40=(($39+4640)|0);
 var $41=HEAP32[(($40)>>2)];
 _leap_printf(25656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$41,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 3: 
 _leap_printf(25552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _util_internal($desc){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $rel;
 $1=$desc;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=6;break;}
 case 2: 
 var $5=$1;
 var $6=_strcmp($5,25456);
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 _leap_printf(25352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=HEAP32[((43016)>>2)];
 _relation_display($9);
 label=5;break;
 case 4: 
 var $11=HEAP32[((43016)>>2)];
 var $12=$1;
 var $13=_relation_find($11,$12);
 $rel=$13;
 var $14=$rel;
 _dumprelstruct($14);
 label=5;break;
 case 5: 
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _resolve_variable($variable){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $position;
 var $found;
 $2=$variable;
 $position=0;
 $found=0;
 label=2;break;
 case 2: 
 var $4=$position;
 var $5=HEAP32[((42632)>>2)];
 var $6=($4>>>0)<($5>>>0);
 if($6){label=3;break;}else{var $12=0;label=4;break;}
 case 3: 
 var $8=$found;
 var $9=($8&255);
 var $10=($9|0)==0;
 var $12=$10;label=4;break;
 case 4: 
 var $12;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=$position;
 var $15=((31080+((($14)*(78))&-1))|0);
 var $16=(($15+1)|0);
 var $17=(($16)|0);
 var $18=$2;
 var $19=_strcmp($17,$18);
 var $20=($19|0)==0;
 var $21=($20&1);
 var $22=(($21)&255);
 $found=$22;
 var $23=$found;
 var $24=($23&255);
 var $25=($24|0)!=1;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$position;
 var $28=((($27)+(1))|0);
 $position=$28;
 label=7;break;
 case 7: 
 label=2;break;
 case 8: 
 var $31=$found;
 var $32=($31&255);
 var $33=($32|0)==1;
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=$position;
 var $36=((31080+((($35)*(78))&-1))|0);
 var $37=(($36+27)|0);
 var $38=(($37)|0);
 $1=$38;
 label=11;break;
 case 10: 
 $1=0;
 label=11;break;
 case 11: 
 var $41=$1;
 STACKTOP=sp;return $41;
  default: assert(0, "bad label: " + label);
 }

}


function _set_variable($variable,$value){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $position;
 var $found;
 var $enable;
 var $optioninteger;
 var $option;
 $2=$variable;
 $3=$value;
 $position=0;
 $found=0;
 $optioninteger=0;
 $option=0;
 label=2;break;
 case 2: 
 var $5=$position;
 var $6=HEAP32[((42632)>>2)];
 var $7=($5>>>0)<($6>>>0);
 if($7){label=3;break;}else{var $13=0;label=4;break;}
 case 3: 
 var $9=$found;
 var $10=($9&255);
 var $11=($10|0)==0;
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 var $15=$position;
 var $16=((($15)+(1))|0);
 $position=$16;
 var $17=$position;
 var $18=((31080+((($17)*(78))&-1))|0);
 var $19=(($18+1)|0);
 var $20=(($19)|0);
 var $21=$2;
 var $22=_strcmp($20,$21);
 var $23=($22|0)==0;
 var $24=($23&1);
 var $25=(($24)&255);
 $found=$25;
 label=2;break;
 case 6: 
 var $27=$3;
 var $28=_strcmp($27,28440);
 var $29=($28|0)==0;
 var $30=($29&1);
 var $31=(($30)&255);
 $enable=$31;
 var $32=$2;
 var $33=_strcmp($32,29104);
 var $34=($33|0)==0;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 $option=37240;
 label=54;break;
 case 8: 
 var $37=$2;
 var $38=_strcmp($37,22456);
 var $39=($38|0)==0;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 $option=37320;
 label=53;break;
 case 10: 
 var $42=$2;
 var $43=_strcmp($42,19080);
 var $44=($43|0)==0;
 if($44){label=11;break;}else{label=12;break;}
 case 11: 
 $option=37248;
 label=52;break;
 case 12: 
 var $47=$2;
 var $48=_strcmp($47,15368);
 var $49=($48|0)==0;
 if($49){label=13;break;}else{label=14;break;}
 case 13: 
 $option=37336;
 label=51;break;
 case 14: 
 var $52=$2;
 var $53=_strcmp($52,12080);
 var $54=($53|0)==0;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 $option=37272;
 label=50;break;
 case 16: 
 var $57=$2;
 var $58=_strcmp($57,9112);
 var $59=($58|0)==0;
 if($59){label=17;break;}else{label=18;break;}
 case 17: 
 $option=37256;
 label=49;break;
 case 18: 
 var $62=$2;
 var $63=_strcmp($62,6720);
 var $64=($63|0)==0;
 if($64){label=19;break;}else{label=20;break;}
 case 19: 
 $option=8;
 label=48;break;
 case 20: 
 var $67=$2;
 var $68=_strcmp($67,4296);
 var $69=($68|0)==0;
 if($69){label=21;break;}else{label=22;break;}
 case 21: 
 $option=37288;
 label=47;break;
 case 22: 
 var $72=$2;
 var $73=_strcmp($72,2712);
 var $74=($73|0)==0;
 if($74){label=23;break;}else{label=24;break;}
 case 23: 
 $option=37304;
 label=46;break;
 case 24: 
 var $77=$2;
 var $78=_strcmp($77,30768);
 var $79=($78|0)==0;
 if($79){label=25;break;}else{label=26;break;}
 case 25: 
 $option=16;
 label=45;break;
 case 26: 
 var $82=$2;
 var $83=_strcmp($82,29264);
 var $84=($83|0)==0;
 if($84){label=27;break;}else{label=28;break;}
 case 27: 
 $option=37280;
 label=44;break;
 case 28: 
 var $87=$2;
 var $88=_strcmp($87,27864);
 var $89=($88|0)==0;
 if($89){label=29;break;}else{label=30;break;}
 case 29: 
 $option=37328;
 label=43;break;
 case 30: 
 var $92=$2;
 var $93=_strcmp($92,26984);
 var $94=($93|0)==0;
 if($94){label=31;break;}else{label=32;break;}
 case 31: 
 $optioninteger=1;
 label=42;break;
 case 32: 
 var $97=$2;
 var $98=_strcmp($97,25984);
 var $99=($98|0)==0;
 if($99){label=33;break;}else{label=34;break;}
 case 33: 
 $optioninteger=1;
 label=41;break;
 case 34: 
 var $102=$2;
 var $103=_strcmp($102,25168);
 var $104=($103|0)==0;
 if($104){label=35;break;}else{label=36;break;}
 case 35: 
 $option=37296;
 label=40;break;
 case 36: 
 var $107=$2;
 var $108=_strcmp($107,24592);
 var $109=($108|0)==0;
 if($109){label=37;break;}else{label=38;break;}
 case 37: 
 _raise_error(35,0,23928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=76;break;
 case 38: 
 $option=0;
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 label=51;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 var $128=$option;
 var $129=($128|0)!=0;
 if($129){label=55;break;}else{label=57;break;}
 case 55: 
 var $131=$optioninteger;
 var $132=($131&255);
 var $133=($132|0)!=1;
 if($133){label=56;break;}else{label=57;break;}
 case 56: 
 var $135=$enable;
 var $136=$option;
 HEAP8[($136)]=$135;
 label=57;break;
 case 57: 
 var $138=$found;
 var $139=($138&255);
 var $140=($139|0)==1;
 if($140){label=58;break;}else{label=75;break;}
 case 58: 
 var $142=$position;
 var $143=((31080+((($142)*(78))&-1))|0);
 var $144=(($143+27)|0);
 var $145=(($144)|0);
 var $146=$3;
 var $147=_strcpy($145,$146);
 var $148=$position;
 var $149=((31080+((($148)*(78))&-1))|0);
 var $150=(($149+1)|0);
 var $151=(($150)|0);
 var $152=_strcmp($151,26984);
 var $153=($152|0)==0;
 if($153){label=59;break;}else{label=65;break;}
 case 59: 
 var $155=$position;
 var $156=((31080+((($155)*(78))&-1))|0);
 var $157=(($156+27)|0);
 var $158=(($157)|0);
 var $159=_atoi($158);
 HEAP32[((37312)>>2)]=$159;
 var $160=HEAP32[((37312)>>2)];
 var $161=($160|0)>9;
 if($161){label=60;break;}else{label=61;break;}
 case 60: 
 HEAP32[((37312)>>2)]=9;
 _raise_error(36,0,23472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=9,tempVarArgs)); STACKTOP=tempVarArgs;
 label=64;break;
 case 61: 
 var $164=HEAP32[((37312)>>2)];
 var $165=($164|0)<0;
 if($165){label=62;break;}else{label=63;break;}
 case 62: 
 HEAP32[((37312)>>2)]=0;
 _raise_error(36,0,23128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=63;break;
 case 63: 
 label=64;break;
 case 64: 
 var $169=$position;
 var $170=((31080+((($169)*(78))&-1))|0);
 var $171=(($170+27)|0);
 var $172=(($171)|0);
 var $173=HEAP32[((37312)>>2)];
 var $174=_sprintf($172,22784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$173,tempVarArgs)); STACKTOP=tempVarArgs;
 var $175=HEAP32[((37312)>>2)];
 _raise_message(1,22536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$175,tempVarArgs)); STACKTOP=tempVarArgs;
 label=74;break;
 case 65: 
 var $177=$position;
 var $178=((31080+((($177)*(78))&-1))|0);
 var $179=(($178+1)|0);
 var $180=(($179)|0);
 var $181=_strcmp($180,25984);
 var $182=($181|0)==0;
 if($182){label=66;break;}else{label=72;break;}
 case 66: 
 var $184=$position;
 var $185=((31080+((($184)*(78))&-1))|0);
 var $186=(($185+27)|0);
 var $187=(($186)|0);
 var $188=_atoi($187);
 HEAP32[((24)>>2)]=$188;
 var $189=HEAP32[((24)>>2)];
 var $190=($189|0)>9;
 if($190){label=67;break;}else{label=68;break;}
 case 67: 
 HEAP32[((24)>>2)]=9;
 _raise_error(36,0,22096,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=9,tempVarArgs)); STACKTOP=tempVarArgs;
 label=71;break;
 case 68: 
 var $193=HEAP32[((24)>>2)];
 var $194=($193|0)<0;
 if($194){label=69;break;}else{label=70;break;}
 case 69: 
 HEAP32[((24)>>2)]=0;
 _raise_error(36,0,21784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=70;break;
 case 70: 
 label=71;break;
 case 71: 
 var $198=$position;
 var $199=((31080+((($198)*(78))&-1))|0);
 var $200=(($199+27)|0);
 var $201=(($200)|0);
 var $202=HEAP32[((24)>>2)];
 var $203=_sprintf($201,22784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$202,tempVarArgs)); STACKTOP=tempVarArgs;
 var $204=HEAP32[((24)>>2)];
 _raise_message(1,21320,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$204,tempVarArgs)); STACKTOP=tempVarArgs;
 label=73;break;
 case 72: 
 var $206=$position;
 var $207=((31080+((($206)*(78))&-1))|0);
 var $208=(($207+27)|0);
 var $209=(($208)|0);
 var $210=$3;
 var $211=_strcpy($209,$210);
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 var $214=$position;
 var $215=((31080+((($214)*(78))&-1))|0);
 var $216=(($215+27)|0);
 var $217=(($216)|0);
 $1=$217;
 label=76;break;
 case 75: 
 $1=0;
 label=76;break;
 case 76: 
 var $220=$1;
 STACKTOP=sp;return $220;
  default: assert(0, "bad label: " + label);
 }

}


function _show_variables(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $position;
 $position=0;
 label=2;break;
 case 2: 
 var $2=$position;
 var $3=HEAP32[((42632)>>2)];
 var $4=($2>>>0)<($3>>>0);
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 var $6=$position;
 var $7=((31080+((($6)*(78))&-1))|0);
 var $8=(($7+1)|0);
 var $9=(($8)|0);
 var $10=$position;
 var $11=((31080+((($10)*(78))&-1))|0);
 var $12=(($11+27)|0);
 var $13=(($12)|0);
 _leap_printf(21008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,HEAP32[(((tempVarArgs)+(8))>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 var $15=$position;
 var $16=((($15)+(1))|0);
 $position=$16;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _new_variable($var_name,$var_value){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $temp=sp;
 $2=$var_name;
 $3=$var_value;
 var $4=HEAP32[((42632)>>2)];
 var $5=($4>>>0)<25;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($temp)|0);
 var $8=$2;
 var $9=$3;
 var $10=_sprintf($7,20656,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$8,HEAP32[(((tempVarArgs)+(8))>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $11=(($temp)|0);
 _do_trace($11);
 var $12=HEAP32[((42632)>>2)];
 var $13=((31080+((($12)*(78))&-1))|0);
 var $14=(($13+1)|0);
 var $15=(($14)|0);
 var $16=$2;
 var $17=_strcpy($15,$16);
 var $18=HEAP32[((42632)>>2)];
 var $19=((31080+((($18)*(78))&-1))|0);
 var $20=(($19+27)|0);
 var $21=(($20)|0);
 var $22=$3;
 var $23=_strcpy($21,$22);
 var $24=HEAP32[((42632)>>2)];
 var $25=((31080+((($24)*(78))&-1))|0);
 var $26=(($25)|0);
 HEAP8[($26)]=1;
 var $27=HEAP32[((42632)>>2)];
 var $28=((($27)+(1))|0);
 HEAP32[((42632)>>2)]=$28;
 $1=1;
 label=4;break;
 case 3: 
 var $30=(($temp)|0);
 var $31=$2;
 var $32=_sprintf($30,20272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$31,tempVarArgs)); STACKTOP=tempVarArgs;
 var $33=(($temp)|0);
 _raise_error(39,0,$33,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=4;break;
 case 4: 
 var $35=$1;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _init_variables(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $count;
 var $lineno;
 var $variable_file;
 var $temp=sp;
 var $result;
 var $config_line=(sp)+(4104);
 var $var_name=(sp)+(5136);
 $lineno=0;
 $count=0;
 label=2;break;
 case 2: 
 var $3=$count;
 var $4=($3|0)<25;
 if($4){label=3;break;}else{label=5;break;}
 case 3: 
 var $6=$count;
 var $7=((31080+((($6)*(78))&-1))|0);
 var $8=(($7)|0);
 HEAP8[($8)]=0;
 var $9=$count;
 var $10=((31080+((($9)*(78))&-1))|0);
 var $11=(($10+1)|0);
 var $12=(($11)|0);
 var $13=_strcpy($12,51544);
 var $14=$count;
 var $15=((31080+((($14)*(78))&-1))|0);
 var $16=(($15+27)|0);
 var $17=(($16)|0);
 var $18=_strcpy($17,51544);
 label=4;break;
 case 4: 
 var $20=$count;
 var $21=((($20)+(1))|0);
 $count=$21;
 label=2;break;
 case 5: 
 HEAP32[((42632)>>2)]=0;
 var $23=(($temp)|0);
 var $24=_sprintf($23,19704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=52072,HEAP32[(((tempVarArgs)+(8))>>2)]=19440,HEAP32[(((tempVarArgs)+(16))>>2)]=19144,tempVarArgs)); STACKTOP=tempVarArgs;
 var $25=(($temp)|0);
 var $26=_fopen($25,18680);
 $variable_file=$26;
 var $27=$variable_file;
 var $28=($27|0)==0;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $30=(($temp)|0);
 _raise_error(2,0,$30,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _raise_message(1,18248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=13;break;
 case 7: 
 var $32=(($config_line)|0);
 var $33=$variable_file;
 var $34=_fgets($32,1025,$33);
 $result=$34;
 label=8;break;
 case 8: 
 var $36=$result;
 var $37=($36|0)!=0;
 if($37){label=9;break;}else{label=12;break;}
 case 9: 
 var $39=$lineno;
 var $40=((($39)+(1))|0);
 $lineno=$40;
 var $41=(($config_line)|0);
 _strip_leading_spaces($41);
 var $42=(($config_line)|0);
 var $43=HEAP8[($42)];
 var $44=(($43<<24)>>24);
 var $45=($44|0)!=35;
 if($45){label=10;break;}else{label=11;break;}
 case 10: 
 var $47=(($config_line)|0);
 _strip_trailing_spaces($47);
 var $48=(($config_line)|0);
 var $49=(($var_name)|0);
 var $50=_cut_token($48,0,$49);
 var $51=(($var_name)|0);
 var $52=(($config_line)|0);
 var $53=_new_variable($51,$52);
 var $54=(($var_name)|0);
 var $55=(($config_line)|0);
 var $56=_set_variable($54,$55);
 label=11;break;
 case 11: 
 var $58=(($config_line)|0);
 var $59=$variable_file;
 var $60=_fgets($58,1025,$59);
 $result=$60;
 label=8;break;
 case 12: 
 var $62=$variable_file;
 var $63=_fclose($62);
 $1=1;
 label=13;break;
 case 13: 
 var $65=$1;
 STACKTOP=sp;return $65;
  default: assert(0, "bad label: " + label);
 }

}


function _attribute_build($rel,$attribute_name,$data_type,$attrib_size){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $att;
 $1=$rel;
 $2=$attribute_name;
 $3=$data_type;
 $4=$attrib_size;
 var $5=_malloc(64);
 var $6=$5;
 $att=$6;
 var $7=$att;
 var $8=$7;
 _check_assign($8,27832);
 var $9=$att;
 var $10=(($9)|0);
 var $11=(($10)|0);
 var $12=$2;
 var $13=_strcpy($11,$12);
 var $14=$4;
 var $15=$att;
 var $16=(($15+52)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$3;
 var $18=(($17<<24)>>24);
 var $19=($18|0)==1;
 if($19){label=2;break;}else{label=5;break;}
 case 2: 
 var $21=$att;
 var $22=(($21+48)|0);
 HEAP8[($22)]=1;
 var $23=$att;
 var $24=(($23+52)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=3;break;}else{label=4;break;}
 case 3: 
 var $28=$att;
 var $29=(($28+52)|0);
 HEAP32[(($29)>>2)]=255;
 label=4;break;
 case 4: 
 label=16;break;
 case 5: 
 var $32=$3;
 var $33=(($32<<24)>>24);
 var $34=($33|0)==2;
 if($34){label=6;break;}else{label=9;break;}
 case 6: 
 var $36=$att;
 var $37=(($36+48)|0);
 HEAP8[($37)]=2;
 var $38=$att;
 var $39=(($38+52)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=7;break;}else{label=8;break;}
 case 7: 
 var $43=$att;
 var $44=(($43+52)|0);
 HEAP32[(($44)>>2)]=5;
 label=8;break;
 case 8: 
 label=15;break;
 case 9: 
 var $47=$3;
 var $48=(($47<<24)>>24);
 var $49=($48|0)==3;
 if($49){label=10;break;}else{label=13;break;}
 case 10: 
 var $51=$att;
 var $52=(($51+48)|0);
 HEAP8[($52)]=3;
 var $53=$att;
 var $54=(($53+52)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=11;break;}else{label=12;break;}
 case 11: 
 var $58=$att;
 var $59=(($58+52)|0);
 HEAP32[(($59)>>2)]=5;
 label=12;break;
 case 12: 
 label=14;break;
 case 13: 
 var $62=$att;
 var $63=(($62+48)|0);
 HEAP8[($63)]=0;
 label=14;break;
 case 14: 
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $67=$att;
 STACKTOP=sp;return $67;
  default: assert(0, "bad label: " + label);
 }

}


function _attribute_dispose($att){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$att;
 var $2=$1;
 var $3=($2|0)!=0;
 if($3){label=2;break;}else{label=4;break;}
 case 2: 
 var $5=$1;
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$1;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 _free($11);
 $1=0;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _attr_fmt_size($att){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $tabs;
 var $tmp;
 var $tmp2;
 var $spacing_var;
 $2=$att;
 $tabs=0;
 var $3=_resolve_variable(25160);
 $spacing_var=$3;
 var $4=$spacing_var;
 var $5=($4|0)!=0;
 if($5){label=2;break;}else{label=9;break;}
 case 2: 
 var $7=$spacing_var;
 var $8=_strcmp($7,24584);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 $tabs=0;
 label=8;break;
 case 4: 
 var $12=$spacing_var;
 var $13=_strcmp($12,23920);
 var $14=($13|0)==0;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 $tabs=-1;
 label=7;break;
 case 6: 
 var $17=$spacing_var;
 var $18=_atoi($17);
 $tabs=$18;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $22=$2;
 var $23=(($22+52)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24>>>0)>0;
 if($25){label=10;break;}else{label=18;break;}
 case 10: 
 var $27=$tabs;
 var $28=($27|0)==0;
 if($28){label=11;break;}else{label=18;break;}
 case 11: 
 var $30=$2;
 var $31=(($30+48)|0);
 var $32=HEAP8[($31)];
 var $33=(($32<<24)>>24);
 var $34=($33|0)==3;
 if($34){label=12;break;}else{label=15;break;}
 case 12: 
 var $36=$2;
 var $37=(($36)|0);
 var $38=(($37)|0);
 var $39=_strlen($38);
 $tmp=$39;
 var $40=$tmp;
 var $41=($40|0)<5;
 if($41){label=13;break;}else{label=14;break;}
 case 13: 
 $tmp=5;
 label=14;break;
 case 14: 
 var $44=$tmp;
 $1=$44;
 label=22;break;
 case 15: 
 var $46=$2;
 var $47=(($46+52)|0);
 var $48=HEAP32[(($47)>>2)];
 $tmp=$48;
 var $49=$2;
 var $50=(($49)|0);
 var $51=(($50)|0);
 var $52=_strlen($51);
 $tmp2=$52;
 var $53=$tmp2;
 var $54=$tmp;
 var $55=($53|0)>($54|0);
 if($55){label=16;break;}else{label=17;break;}
 case 16: 
 var $57=$tmp2;
 $1=$57;
 label=22;break;
 case 17: 
 var $59=$tmp;
 $1=$59;
 label=22;break;
 case 18: 
 var $61=$2;
 var $62=(($61+52)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63>>>0)<=0;
 if($64){label=20;break;}else{label=19;break;}
 case 19: 
 var $66=$tabs;
 var $67=($66|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 $1=6;
 label=22;break;
 case 21: 
 var $70=$tabs;
 var $71=((($70)+(1))|0);
 $1=$71;
 label=22;break;
 case 22: 
 var $73=$1;
 STACKTOP=sp;return $73;
  default: assert(0, "bad label: " + label);
 }

}


function _fmt_build($fmt,$att,$attrsize){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $tabs;
 var $tmp;
 var $tmp2;
 var $spacing_var;
 $1=$fmt;
 $2=$att;
 $3=$attrsize;
 $tabs=0;
 var $4=_resolve_variable(25160);
 $spacing_var=$4;
 var $5=$spacing_var;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=9;break;}
 case 2: 
 var $8=$spacing_var;
 var $9=_strcmp($8,24584);
 var $10=($9|0)==0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 $tabs=0;
 label=8;break;
 case 4: 
 var $13=$spacing_var;
 var $14=_strcmp($13,23920);
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 $tabs=-1;
 label=7;break;
 case 6: 
 var $18=$spacing_var;
 var $19=_atoi($18);
 $tabs=$19;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $23=$2;
 var $24=(($23+52)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25>>>0)>0;
 if($26){label=10;break;}else{label=19;break;}
 case 10: 
 var $28=$tabs;
 var $29=($28|0)==0;
 if($29){label=11;break;}else{label=19;break;}
 case 11: 
 var $31=$2;
 var $32=(($31+48)|0);
 var $33=HEAP8[($32)];
 var $34=(($33<<24)>>24);
 var $35=($34|0)==3;
 if($35){label=12;break;}else{label=15;break;}
 case 12: 
 var $37=$2;
 var $38=(($37)|0);
 var $39=(($38)|0);
 var $40=_strlen($39);
 $tmp=$40;
 var $41=$tmp;
 var $42=($41|0)<5;
 if($42){label=13;break;}else{label=14;break;}
 case 13: 
 $tmp=5;
 label=14;break;
 case 14: 
 var $45=$1;
 var $46=$tmp;
 var $47=$tmp;
 var $48=_sprintf($45,23456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$46,HEAP32[(((tempVarArgs)+(8))>>2)]=$47,tempVarArgs)); STACKTOP=tempVarArgs;
 var $49=$tmp;
 var $50=((($49)+(1))|0);
 var $51=$3;
 HEAP32[(($51)>>2)]=$50;
 label=18;break;
 case 15: 
 var $53=$2;
 var $54=(($53)|0);
 var $55=(($54)|0);
 var $56=_strlen($55);
 $tmp=$56;
 var $57=$2;
 var $58=(($57+52)|0);
 var $59=HEAP32[(($58)>>2)];
 $tmp2=$59;
 var $60=$2;
 var $61=(($60+52)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=((($62)+(1))|0);
 var $64=$3;
 HEAP32[(($64)>>2)]=$63;
 var $65=$tmp2;
 var $66=$tmp;
 var $67=($65|0)<($66|0);
 if($67){label=16;break;}else{label=17;break;}
 case 16: 
 var $69=$tmp;
 $tmp2=$69;
 var $70=$tmp;
 var $71=$3;
 HEAP32[(($71)>>2)]=$70;
 label=17;break;
 case 17: 
 var $73=$1;
 var $74=$tmp2;
 var $75=$tmp2;
 var $76=_sprintf($73,23456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$74,HEAP32[(((tempVarArgs)+(8))>>2)]=$75,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 label=24;break;
 case 19: 
 var $79=$2;
 var $80=(($79+52)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81>>>0)<=0;
 if($82){label=21;break;}else{label=20;break;}
 case 20: 
 var $84=$tabs;
 var $85=($84|0)==-1;
 if($85){label=21;break;}else{label=22;break;}
 case 21: 
 var $87=$1;
 var $88=_sprintf($87,23120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $89=$3;
 HEAP32[(($89)>>2)]=6;
 label=23;break;
 case 22: 
 var $91=$1;
 var $92=$tabs;
 var $93=$tabs;
 var $94=_sprintf($91,23456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$92,HEAP32[(((tempVarArgs)+(8))>>2)]=$93,tempVarArgs)); STACKTOP=tempVarArgs;
 var $95=$tabs;
 var $96=((($95)+(1))|0);
 var $97=$3;
 HEAP32[(($97)>>2)]=$96;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $100=$2;
 var $101=(($100+26)|0);
 var $102=(($101)|0);
 var $103=$1;
 var $104=_strcpy($102,$103);
 var $105=$1;
 STACKTOP=sp;return $105;
  default: assert(0, "bad label: " + label);
 }

}


function _attributes_printfromrel($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $att;
 var $fmt=sp;
 var $counter;
 var $sizeofattrs;
 var $attrsize=(sp)+(24);
 var $ctuple=(sp)+(32);
 var $count=(sp)+(40);
 $1=$rel;
 $sizeofattrs=0;
 _do_debug(1,17512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $2=$1;
 var $3=_relation_attribute_readfirst($2,$ctuple,$count);
 $att=$3;
 label=2;break;
 case 2: 
 var $5=$att;
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($fmt)|0);
 var $9=$att;
 var $10=_fmt_build($8,$9,$attrsize);
 var $11=HEAP32[(($attrsize)>>2)];
 var $12=$sizeofattrs;
 var $13=((($12)+($11))|0);
 $sizeofattrs=$13;
 var $14=(($fmt)|0);
 var $15=$att;
 var $16=(($15)|0);
 var $17=(($16)|0);
 _leap_printf($14,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$1;
 var $19=$att;
 var $20=_relation_attribute_readnext($18,$ctuple,$19,$count);
 $att=$20;
 label=2;break;
 case 4: 
 _leap_printf(30760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $counter=0;
 label=5;break;
 case 5: 
 var $23=$counter;
 var $24=$sizeofattrs;
 var $25=($23|0)<($24|0);
 if($25){label=6;break;}else{label=8;break;}
 case 6: 
 _leap_printf(21776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 var $28=$counter;
 var $29=((($28)+(1))|0);
 $counter=$29;
 label=5;break;
 case 8: 
 _leap_printf(30760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,17168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _attributes_printtuple($ctuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $att;
 var $fmt=sp;
 var $counter;
 var $sizeofattrs;
 var $attrsize=(sp)+(24);
 var $count=(sp)+(32);
 $1=$ctuple;
 $sizeofattrs=0;
 _do_debug(1,16800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $2=$1;
 var $3=_relation_attribute_getfirst($2,$count);
 $att=$3;
 label=2;break;
 case 2: 
 var $5=$att;
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=(($fmt)|0);
 var $9=$att;
 var $10=_fmt_build($8,$9,$attrsize);
 var $11=HEAP32[(($attrsize)>>2)];
 var $12=$sizeofattrs;
 var $13=((($12)+($11))|0);
 $sizeofattrs=$13;
 var $14=(($fmt)|0);
 var $15=$att;
 var $16=(($15)|0);
 var $17=(($16)|0);
 _leap_printf($14,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 var $18=$1;
 var $19=$att;
 var $20=_relation_attribute_getnext($18,$19,$count);
 $att=$20;
 label=2;break;
 case 4: 
 _leap_printf(30760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $22=$1;
 var $23=_relation_attribute_getfirst($22,$count);
 $att=$23;
 label=5;break;
 case 5: 
 var $25=$att;
 var $26=($25|0)!=0;
 if($26){label=6;break;}else{label=11;break;}
 case 6: 
 $counter=0;
 label=7;break;
 case 7: 
 var $29=$counter;
 var $30=$att;
 var $31=_attr_fmt_size($30);
 var $32=($29|0)<($31|0);
 if($32){label=8;break;}else{label=10;break;}
 case 8: 
 _leap_printf(21776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 var $35=$counter;
 var $36=((($35)+(1))|0);
 $counter=$36;
 label=7;break;
 case 10: 
 _leap_printf(22088,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $38=$1;
 var $39=$att;
 var $40=_relation_attribute_getnext($38,$39,$count);
 $att=$40;
 label=5;break;
 case 11: 
 _leap_printf(30760,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,16488,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _attribute_find($rel,$name){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $catt;
 var $ratt;
 var $ctuple=sp;
 var $anum=(sp)+(8);
 $2=$rel;
 $3=$name;
 _do_debug(1,16160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=$2;
 var $5=(($4)|0);
 var $6=(($5)|0);
 var $7=$3;
 _do_debug(3,15744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,HEAP32[(((tempVarArgs)+(8))>>2)]=$7,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=$2;
 var $9=_relation_attribute_readfirst($8,$ctuple,$anum);
 $catt=$9;
 label=2;break;
 case 2: 
 var $11=$catt;
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{var $24=0;label=5;break;}
 case 3: 
 var $14=$3;
 var $15=($14|0)!=0;
 if($15){label=4;break;}else{var $24=0;label=5;break;}
 case 4: 
 var $17=$catt;
 var $18=(($17)|0);
 var $19=(($18)|0);
 var $20=$3;
 var $21=_strcmp($19,$20);
 var $22=($21|0)!=0;
 var $24=$22;label=5;break;
 case 5: 
 var $24;
 if($24){label=6;break;}else{label=7;break;}
 case 6: 
 var $26=$2;
 var $27=$catt;
 var $28=_relation_attribute_readnext($26,$ctuple,$27,$anum);
 $catt=$28;
 label=2;break;
 case 7: 
 var $30=$catt;
 var $31=($30|0)!=0;
 if($31){label=8;break;}else{label=11;break;}
 case 8: 
 var $33=$3;
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=11;break;}
 case 9: 
 var $36=$catt;
 var $37=(($36)|0);
 var $38=(($37)|0);
 var $39=$3;
 var $40=_strcmp($38,$39);
 var $41=($40|0)==0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=_malloc(64);
 var $44=$43;
 $ratt=$44;
 var $45=$ratt;
 var $46=$45;
 _check_assign($46,15400);
 var $47=$ratt;
 var $48=(($47)|0);
 var $49=(($48)|0);
 var $50=$catt;
 var $51=(($50)|0);
 var $52=(($51)|0);
 var $53=_strcpy($49,$52);
 var $54=$catt;
 var $55=(($54+48)|0);
 var $56=HEAP8[($55)];
 var $57=$ratt;
 var $58=(($57+48)|0);
 HEAP8[($58)]=$56;
 var $59=$catt;
 var $60=(($59+52)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$ratt;
 var $63=(($62+52)|0);
 HEAP32[(($63)>>2)]=$61;
 var $64=$catt;
 var $65=(($64+44)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$ratt;
 var $68=(($67+44)|0);
 HEAP32[(($68)>>2)]=$66;
 var $69=$catt;
 var $70=(($69+44)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$catt;
 var $73=(($72)|0);
 var $74=(($73)|0);
 _do_debug(5,14768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$71,HEAP32[(((tempVarArgs)+(8))>>2)]=$74,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,14336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _close_tuple($ctuple,2);
 var $75=$ratt;
 $1=$75;
 label=12;break;
 case 11: 
 _close_tuple($ctuple,2);
 _do_debug(1,13984,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=12;break;
 case 12: 
 var $78=$1;
 STACKTOP=sp;return $78;
  default: assert(0, "bad label: " + label);
 }

}


function _do_int_eval($boolval,$left_attr,$lptr,$right_attr,$rptr,$errorflag){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $lint=sp;
 var $rint=(sp)+(8);
 var $errs;
 var $err;
 var $cresult;
 var $regresult;
 $1=$boolval;
 $2=$left_attr;
 $3=$lptr;
 $4=$right_attr;
 $5=$rptr;
 $6=$errorflag;
 HEAP32[(($lint)>>2)]=0;
 HEAP32[(($rint)>>2)]=0;
 $errs=-1;
 $err=0;
 $cresult=0;
 _do_debug(1,27312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$6;
 HEAP8[($7)]=0;
 var $8=$3;
 var $9=_sscanf($8,28952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$lint,tempVarArgs)); STACKTOP=tempVarArgs;
 $errs=$9;
 var $10=$errs;
 var $11=($10|0)==-1;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$6;
 HEAP8[($13)]=1;
 var $14=$3;
 _raise_error(20,0,$14,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,22376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 3: 
 var $16=$5;
 var $17=_sscanf($16,28952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$rint,tempVarArgs)); STACKTOP=tempVarArgs;
 $errs=$17;
 var $18=$errs;
 var $19=($18|0)==-1;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=$6;
 HEAP8[($21)]=1;
 var $22=$5;
 _raise_error(20,0,$22,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,22376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 5: 
 var $24=$1;
 switch(($24|0)){case 4:{ label=10;break;}case 7:{ label=11;break;}case 10:{ label=12;break;}case 6:{ label=6;break;}case 9:{ label=7;break;}case 5:{ label=8;break;}case 8:{ label=9;break;}default:{label=18;break;}}break;
 case 6: 
 var $26=HEAP32[(($lint)>>2)];
 var $27=HEAP32[(($rint)>>2)];
 var $28=($26|0)==($27|0);
 var $29=($28&1);
 var $30=(($29)&255);
 $cresult=$30;
 label=19;break;
 case 7: 
 var $32=HEAP32[(($lint)>>2)];
 var $33=HEAP32[(($rint)>>2)];
 var $34=($32|0)!=($33|0);
 var $35=($34&1);
 var $36=(($35)&255);
 $cresult=$36;
 label=19;break;
 case 8: 
 var $38=HEAP32[(($lint)>>2)];
 var $39=HEAP32[(($rint)>>2)];
 var $40=($38|0)>($39|0);
 var $41=($40&1);
 var $42=(($41)&255);
 $cresult=$42;
 label=19;break;
 case 9: 
 var $44=HEAP32[(($lint)>>2)];
 var $45=HEAP32[(($rint)>>2)];
 var $46=($44|0)>=($45|0);
 var $47=($46&1);
 var $48=(($47)&255);
 $cresult=$48;
 label=19;break;
 case 10: 
 var $50=HEAP32[(($lint)>>2)];
 var $51=HEAP32[(($rint)>>2)];
 var $52=($50|0)<($51|0);
 var $53=($52&1);
 var $54=(($53)&255);
 $cresult=$54;
 label=19;break;
 case 11: 
 var $56=HEAP32[(($lint)>>2)];
 var $57=HEAP32[(($rint)>>2)];
 var $58=($56|0)<=($57|0);
 var $59=($58&1);
 var $60=(($59)&255);
 $cresult=$60;
 label=19;break;
 case 12: 
 var $62=$5;
 var $63=_regcomp($62);
 $regresult=$63;
 var $64=$regresult;
 var $65=($64|0)==0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 var $67=$5;
 _raise_error(56,0,$67,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=14;break;
 case 14: 
 _do_debug(1,18992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $69=$regresult;
 var $70=$3;
 var $71=_regexec($69,$70);
 $err=$71;
 _do_debug(1,15264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $72=$err;
 _do_debug(3,12000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$72,tempVarArgs)); STACKTOP=tempVarArgs;
 var $73=$err;
 var $74=($73|0)==0;
 if($74){label=15;break;}else{label=16;break;}
 case 15: 
 $cresult=0;
 label=17;break;
 case 16: 
 $cresult=1;
 label=17;break;
 case 17: 
 var $78=$cresult;
 var $79=($78&255);
 _do_debug(3,9064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$79,tempVarArgs)); STACKTOP=tempVarArgs;
 var $80=$regresult;
 var $81=$80;
 _free($81);
 label=19;break;
 case 18: 
 _raise_error(999,0,6616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $83=$6;
 HEAP8[($83)]=1;
 _do_debug(1,22376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 _do_debug(1,4240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $87=$cresult;
 STACKTOP=sp;return $87;
  default: assert(0, "bad label: " + label);
 }

}


function _do_string_eval($boolval,$left_attr,$lptr,$right_attr,$rptr,$errorflag){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $cresult;
 var $regresult;
 var $err;
 $1=$boolval;
 $2=$left_attr;
 $3=$lptr;
 $4=$right_attr;
 $5=$rptr;
 $6=$errorflag;
 $cresult=0;
 _do_debug(1,2680,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$6;
 HEAP8[($7)]=0;
 var $8=HEAP8[(37320)];
 var $9=($8&255);
 var $10=($9|0)!=0;
 if($10){label=2;break;}else{label=5;break;}
 case 2: 
 var $12=$3;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=5;break;}
 case 3: 
 var $15=$5;
 var $16=($15|0)!=0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=$3;
 var $19=$5;
 _do_debug(5,30720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$18,HEAP32[(((tempVarArgs)+(8))>>2)]=$19,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 var $21=HEAP8[(37336)];
 var $22=($21&255);
 var $23=($22|0)==1;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$3;
 _upcase($25);
 var $26=$5;
 _upcase($26);
 label=7;break;
 case 7: 
 var $28=$1;
 switch(($28|0)){case 5:{ label=10;break;}case 8:{ label=11;break;}case 4:{ label=12;break;}case 7:{ label=13;break;}case 10:{ label=14;break;}case 6:{ label=8;break;}case 9:{ label=9;break;}default:{label=20;break;}}break;
 case 8: 
 var $30=$3;
 var $31=$5;
 var $32=_strcmp($30,$31);
 var $33=($32|0)==0;
 var $34=($33&1);
 var $35=(($34)&255);
 $cresult=$35;
 label=21;break;
 case 9: 
 var $37=$3;
 var $38=$5;
 var $39=_strcmp($37,$38);
 var $40=($39|0)!=0;
 var $41=($40&1);
 var $42=(($41)&255);
 $cresult=$42;
 label=21;break;
 case 10: 
 var $44=$3;
 var $45=$5;
 var $46=_strcmp($44,$45);
 var $47=($46|0)>0;
 var $48=($47&1);
 var $49=(($48)&255);
 $cresult=$49;
 label=21;break;
 case 11: 
 var $51=$3;
 var $52=$5;
 var $53=_strcmp($51,$52);
 var $54=($53|0)>=0;
 var $55=($54&1);
 var $56=(($55)&255);
 $cresult=$56;
 label=21;break;
 case 12: 
 var $58=$3;
 var $59=$5;
 var $60=_strcmp($58,$59);
 var $61=($60|0)<0;
 var $62=($61&1);
 var $63=(($62)&255);
 $cresult=$63;
 label=21;break;
 case 13: 
 var $65=$3;
 var $66=$5;
 var $67=_strcmp($65,$66);
 var $68=($67|0)<=0;
 var $69=($68&1);
 var $70=(($69)&255);
 $cresult=$70;
 label=21;break;
 case 14: 
 _do_debug(3,29224,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,27808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $72=$5;
 var $73=_regcomp($72);
 $regresult=$73;
 _do_debug(1,26960,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $74=$regresult;
 var $75=($74|0)==0;
 if($75){label=15;break;}else{label=16;break;}
 case 15: 
 var $77=$5;
 _raise_error(56,0,$77,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,25952,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=16;break;
 case 16: 
 _do_debug(1,18992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $79=$regresult;
 var $80=$3;
 var $81=_regexec($79,$80);
 $err=$81;
 _do_debug(1,15264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $82=$err;
 _do_debug(3,12000,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$82,tempVarArgs)); STACKTOP=tempVarArgs;
 var $83=$err;
 var $84=($83|0)==0;
 if($84){label=17;break;}else{label=18;break;}
 case 17: 
 $cresult=0;
 label=19;break;
 case 18: 
 $cresult=1;
 label=19;break;
 case 19: 
 var $88=$cresult;
 var $89=($88&255);
 _do_debug(3,9064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$89,tempVarArgs)); STACKTOP=tempVarArgs;
 var $90=$regresult;
 var $91=$90;
 _free($91);
 label=21;break;
 case 20: 
 _raise_error(999,0,6616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,25128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $93=$6;
 HEAP8[($93)]=1;
 label=21;break;
 case 21: 
 _do_debug(1,24552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $95=$cresult;
 STACKTOP=sp;return $95;
  default: assert(0, "bad label: " + label);
 }

}


function _evaluate($condition,$ltuple,$rtuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ccond;
 var $errorflag=sp;
 var $cresult;
 var $final_result;
 var $booleanops=(sp)+(8);
 var $allresults=(sp)+(264);
 var $counter;
 var $noresults;
 var $lptr;
 var $rptr;
 var $ldtype;
 var $rdtype;
 $2=$condition;
 $3=$ltuple;
 $4=$rtuple;
 HEAP8[($errorflag)]=0;
 $cresult=0;
 $final_result=0;
 $ldtype=0;
 $rdtype=0;
 _do_debug(1,23896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=$2;
 $ccond=$5;
 $counter=0;
 label=2;break;
 case 2: 
 var $7=HEAP8[($errorflag)];
 var $8=($7&255);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $14=0;label=4;break;}
 case 3: 
 var $11=$ccond;
 var $12=($11|0)!=0;
 var $14=$12;label=4;break;
 case 4: 
 var $14;
 if($14){label=5;break;}else{label=35;break;}
 case 5: 
 var $16=$ccond;
 var $17=(($16+255)|0);
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=($19|0)==1;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$ccond;
 var $23=(($22+256)|0);
 var $24=HEAP32[(($23)>>2)];
 $lptr=$24;
 label=8;break;
 case 7: 
 var $26=$ccond;
 var $27=(($26)|0);
 var $28=(($27)|0);
 $lptr=$28;
 label=8;break;
 case 8: 
 var $30=$ccond;
 var $31=(($30+527)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=($33|0)==1;
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=$ccond;
 var $37=(($36+528)|0);
 var $38=HEAP32[(($37)>>2)];
 $rptr=$38;
 label=11;break;
 case 10: 
 var $40=$ccond;
 var $41=(($40+272)|0);
 var $42=(($41)|0);
 $rptr=$42;
 label=11;break;
 case 11: 
 var $44=$ccond;
 var $45=(($44+255)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=($47|0)==1;
 if($48){label=12;break;}else{label=13;break;}
 case 12: 
 var $50=$ccond;
 var $51=(($50+260)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+48)|0);
 var $54=HEAP8[($53)];
 var $55=(($54<<24)>>24);
 $ldtype=$55;
 label=14;break;
 case 13: 
 $ldtype=0;
 label=14;break;
 case 14: 
 var $58=$ccond;
 var $59=(($58+527)|0);
 var $60=HEAP8[($59)];
 var $61=($60&255);
 var $62=($61|0)==1;
 if($62){label=15;break;}else{label=16;break;}
 case 15: 
 var $64=$ccond;
 var $65=(($64+532)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+48)|0);
 var $68=HEAP8[($67)];
 var $69=(($68<<24)>>24);
 $rdtype=$69;
 label=17;break;
 case 16: 
 $rdtype=0;
 label=17;break;
 case 17: 
 var $72=$ldtype;
 var $73=($72|0)!=0;
 if($73){label=18;break;}else{label=22;break;}
 case 18: 
 var $75=$rdtype;
 var $76=($75|0)!=0;
 if($76){label=19;break;}else{label=22;break;}
 case 19: 
 var $78=$ldtype;
 var $79=$rdtype;
 var $80=($78|0)!=($79|0);
 if($80){label=20;break;}else{label=21;break;}
 case 20: 
 _raise_error(19,0,51560,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=50;break;
 case 21: 
 label=22;break;
 case 22: 
 var $84=$ldtype;
 var $85=($84|0)==2;
 if($85){label=24;break;}else{label=23;break;}
 case 23: 
 var $87=$rdtype;
 var $88=($87|0)==2;
 if($88){label=24;break;}else{label=25;break;}
 case 24: 
 var $90=$ccond;
 var $91=(($90+268)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=$ccond;
 var $94=(($93+260)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$lptr;
 var $97=$ccond;
 var $98=(($97+532)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$rptr;
 var $101=_do_int_eval($92,$95,$96,$99,$100,$errorflag);
 $cresult=$101;
 label=34;break;
 case 25: 
 var $103=$ldtype;
 var $104=($103|0)==1;
 if($104){label=27;break;}else{label=26;break;}
 case 26: 
 var $106=$rdtype;
 var $107=($106|0)==1;
 if($107){label=27;break;}else{label=28;break;}
 case 27: 
 var $109=$ccond;
 var $110=(($109+268)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$ccond;
 var $113=(($112+260)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$lptr;
 var $116=$ccond;
 var $117=(($116+532)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$rptr;
 var $120=_do_string_eval($111,$114,$115,$118,$119,$errorflag);
 $cresult=$120;
 label=33;break;
 case 28: 
 var $122=$ldtype;
 var $123=($122|0)==3;
 if($123){label=30;break;}else{label=29;break;}
 case 29: 
 var $125=$rdtype;
 var $126=($125|0)==3;
 if($126){label=30;break;}else{label=31;break;}
 case 30: 
 var $128=$ccond;
 var $129=(($128+268)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$ccond;
 var $132=(($131+260)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$lptr;
 var $135=$ccond;
 var $136=(($135+532)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=$rptr;
 var $139=_do_string_eval($130,$133,$134,$137,$138,$errorflag);
 $cresult=$139;
 label=32;break;
 case 31: 
 var $141=$ccond;
 var $142=(($141+268)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$ccond;
 var $145=(($144+260)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$lptr;
 var $148=$ccond;
 var $149=(($148+532)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=$rptr;
 var $152=_do_string_eval($143,$146,$147,$150,$151,$errorflag);
 $cresult=$152;
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 label=34;break;
 case 34: 
 var $156=$cresult;
 var $157=$counter;
 var $158=(($allresults+$157)|0);
 HEAP8[($158)]=$156;
 var $159=$ccond;
 var $160=(($159+540)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=$counter;
 var $163=(($booleanops+($162<<2))|0);
 HEAP32[(($163)>>2)]=$161;
 var $164=$counter;
 var $165=((($164)+(1))|0);
 $counter=$165;
 var $166=$ccond;
 var $167=(($166+544)|0);
 var $168=HEAP32[(($167)>>2)];
 $ccond=$168;
 label=2;break;
 case 35: 
 var $170=$counter;
 $noresults=$170;
 var $171=(($allresults)|0);
 var $172=HEAP8[($171)];
 $final_result=$172;
 $counter=1;
 label=36;break;
 case 36: 
 var $174=$counter;
 var $175=$noresults;
 var $176=($174|0)<($175|0);
 if($176){label=37;break;}else{label=49;break;}
 case 37: 
 var $178=$counter;
 var $179=((($178)-(1))|0);
 var $180=(($booleanops+($179<<2))|0);
 var $181=HEAP32[(($180)>>2)];
 if(($181|0)==1){ label=38;break;}else if(($181|0)==2){ label=41;break;}else if(($181|0)==3){ label=44;break;}else if(($181|0)==99){ label=45;break;}else{label=46;break;}
 case 38: 
 var $183=$final_result;
 var $184=($183&255);
 var $185=($184|0)!=0;
 if($185){label=39;break;}else{var $193=0;label=40;break;}
 case 39: 
 var $187=$counter;
 var $188=(($allresults+$187)|0);
 var $189=HEAP8[($188)];
 var $190=($189&255);
 var $191=($190|0)!=0;
 var $193=$191;label=40;break;
 case 40: 
 var $193;
 var $194=($193&1);
 var $195=(($194)&255);
 $final_result=$195;
 label=47;break;
 case 41: 
 var $197=$final_result;
 var $198=($197&255);
 var $199=($198|0)!=0;
 if($199){var $207=1;label=43;break;}else{label=42;break;}
 case 42: 
 var $201=$counter;
 var $202=(($allresults+$201)|0);
 var $203=HEAP8[($202)];
 var $204=($203&255);
 var $205=($204|0)!=0;
 var $207=$205;label=43;break;
 case 43: 
 var $207;
 var $208=($207&1);
 var $209=(($208)&255);
 $final_result=$209;
 label=47;break;
 case 44: 
 _raise_error(21,0,23080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,22744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=47;break;
 case 45: 
 label=47;break;
 case 46: 
 _raise_error(21,0,22504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,22048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 var $215=$counter;
 var $216=((($215)+(1))|0);
 $counter=$216;
 label=36;break;
 case 49: 
 _do_debug(1,21752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $218=$final_result;
 $1=$218;
 label=50;break;
 case 50: 
 var $220=$1;
 STACKTOP=sp;return $220;
  default: assert(0, "bad label: " + label);
 }

}


function _string_position_ok($cpos,$string_length,$text){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 $2=$cpos;
 $3=$string_length;
 $4=$text;
 var $5=$2;
 var $6=$3;
 var $7=($5|0)>=($6|0);
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=$4;
 _raise_error(15,0,$9,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=4;break;
 case 3: 
 $1=1;
 label=4;break;
 case 4: 
 var $12=$1;
 STACKTOP=sp;return $12;
  default: assert(0, "bad label: " + label);
 }

}


function _get_first_expression($text,$cond){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $start;
 var $cposition;
 var $boolean_start;
 var $boolean_end;
 var $endpos;
 var $string_length;
 var $start_end;
 var $end_start;
 var $errorflag;
 var $sposok;
 var $temp=sp;
 var $lptr;
 var $rptr;
 $2=$text;
 $3=$cond;
 $start=0;
 $cposition=0;
 $boolean_start=0;
 $boolean_end=0;
 $endpos=0;
 $string_length=0;
 $start_end=0;
 $end_start=0;
 $errorflag=0;
 var $4=$2;
 var $5=_strlen($4);
 $string_length=$5;
 var $6=$3;
 var $7=(($6+264)|0);
 HEAP16[(($7)>>1)]=-1;
 var $8=$3;
 var $9=(($8+536)|0);
 HEAP16[(($9)>>1)]=-1;
 label=2;break;
 case 2: 
 var $11=$cposition;
 var $12=$string_length;
 var $13=($11|0)<($12|0);
 if($13){label=3;break;}else{var $61=0;label=11;break;}
 case 3: 
 var $15=$cposition;
 var $16=$2;
 var $17=(($16+$15)|0);
 var $18=HEAP8[($17)];
 var $19=(($18<<24)>>24);
 var $20=($19|0)==32;
 if($20){label=5;break;}else{label=4;break;}
 case 4: 
 var $22=$cposition;
 var $23=$2;
 var $24=(($23+$22)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24);
 var $27=($26|0)==40;
 if($27){label=5;break;}else{var $59=0;label=10;break;}
 case 5: 
 var $29=$cposition;
 var $30=$2;
 var $31=(($30+$29)|0);
 var $32=HEAP8[($31)];
 var $33=(($32<<24)>>24);
 var $34=($33|0)<65;
 if($34){label=7;break;}else{label=6;break;}
 case 6: 
 var $36=$cposition;
 var $37=$2;
 var $38=(($37+$36)|0);
 var $39=HEAP8[($38)];
 var $40=(($39<<24)>>24);
 var $41=($40|0)>90;
 if($41){label=7;break;}else{var $59=0;label=10;break;}
 case 7: 
 var $43=$cposition;
 var $44=$2;
 var $45=(($44+$43)|0);
 var $46=HEAP8[($45)];
 var $47=(($46<<24)>>24);
 var $48=($47|0)<97;
 if($48){var $57=1;label=9;break;}else{label=8;break;}
 case 8: 
 var $50=$cposition;
 var $51=$2;
 var $52=(($51+$50)|0);
 var $53=HEAP8[($52)];
 var $54=(($53<<24)>>24);
 var $55=($54|0)>122;
 var $57=$55;label=9;break;
 case 9: 
 var $57;
 var $59=$57;label=10;break;
 case 10: 
 var $59;
 var $61=$59;label=11;break;
 case 11: 
 var $61;
 if($61){label=12;break;}else{label=13;break;}
 case 12: 
 var $63=$cposition;
 var $64=((($63)+(1))|0);
 $cposition=$64;
 label=2;break;
 case 13: 
 var $66=$cposition;
 $start=$66;
 var $67=$cposition;
 var $68=$string_length;
 var $69=$2;
 var $70=_string_position_ok($67,$68,$69);
 $sposok=$70;
 var $71=$sposok;
 var $72=($71&255);
 var $73=($72|0)!=1;
 if($73){label=14;break;}else{label=15;break;}
 case 14: 
 $1=0;
 label=96;break;
 case 15: 
 label=16;break;
 case 16: 
 var $77=$cposition;
 var $78=$string_length;
 var $79=($77|0)<($78|0);
 if($79){label=17;break;}else{var $116=0;label=22;break;}
 case 17: 
 var $81=$cposition;
 var $82=$2;
 var $83=(($82+$81)|0);
 var $84=HEAP8[($83)];
 var $85=(($84<<24)>>24);
 var $86=($85|0)!=61;
 if($86){label=18;break;}else{var $116=0;label=22;break;}
 case 18: 
 var $88=$cposition;
 var $89=$2;
 var $90=(($89+$88)|0);
 var $91=HEAP8[($90)];
 var $92=(($91<<24)>>24);
 var $93=($92|0)!=60;
 if($93){label=19;break;}else{var $116=0;label=22;break;}
 case 19: 
 var $95=$cposition;
 var $96=$2;
 var $97=(($96+$95)|0);
 var $98=HEAP8[($97)];
 var $99=(($98<<24)>>24);
 var $100=($99|0)!=62;
 if($100){label=20;break;}else{var $116=0;label=22;break;}
 case 20: 
 var $102=$cposition;
 var $103=$2;
 var $104=(($103+$102)|0);
 var $105=HEAP8[($104)];
 var $106=(($105<<24)>>24);
 var $107=($106|0)!=32;
 if($107){label=21;break;}else{var $116=0;label=22;break;}
 case 21: 
 var $109=$cposition;
 var $110=$2;
 var $111=(($110+$109)|0);
 var $112=HEAP8[($111)];
 var $113=(($112<<24)>>24);
 var $114=($113|0)!=126;
 var $116=$114;label=22;break;
 case 22: 
 var $116;
 if($116){label=23;break;}else{label=24;break;}
 case 23: 
 var $118=$cposition;
 var $119=((($118)+(1))|0);
 $cposition=$119;
 label=16;break;
 case 24: 
 var $121=$cposition;
 var $122=$string_length;
 var $123=$2;
 var $124=_string_position_ok($121,$122,$123);
 $sposok=$124;
 var $125=$cposition;
 $start_end=$125;
 var $126=$cposition;
 var $127=$2;
 var $128=(($127+$126)|0);
 var $129=HEAP8[($128)];
 var $130=(($129<<24)>>24);
 var $131=($130|0)==32;
 if($131){label=25;break;}else{label=31;break;}
 case 25: 
 label=26;break;
 case 26: 
 var $134=$cposition;
 var $135=$string_length;
 var $136=($134|0)<($135|0);
 if($136){label=27;break;}else{var $145=0;label=28;break;}
 case 27: 
 var $138=$cposition;
 var $139=$2;
 var $140=(($139+$138)|0);
 var $141=HEAP8[($140)];
 var $142=(($141<<24)>>24);
 var $143=($142|0)==32;
 var $145=$143;label=28;break;
 case 28: 
 var $145;
 if($145){label=29;break;}else{label=30;break;}
 case 29: 
 var $147=$cposition;
 var $148=((($147)+(1))|0);
 $cposition=$148;
 label=26;break;
 case 30: 
 label=31;break;
 case 31: 
 var $151=$cposition;
 $boolean_start=$151;
 label=32;break;
 case 32: 
 var $153=$cposition;
 var $154=$string_length;
 var $155=($153|0)<($154|0);
 if($155){label=33;break;}else{var $187=0;label=38;break;}
 case 33: 
 var $157=$cposition;
 var $158=$2;
 var $159=(($158+$157)|0);
 var $160=HEAP8[($159)];
 var $161=(($160<<24)>>24);
 var $162=($161|0)==61;
 if($162){var $185=1;label=37;break;}else{label=34;break;}
 case 34: 
 var $164=$cposition;
 var $165=$2;
 var $166=(($165+$164)|0);
 var $167=HEAP8[($166)];
 var $168=(($167<<24)>>24);
 var $169=($168|0)==60;
 if($169){var $185=1;label=37;break;}else{label=35;break;}
 case 35: 
 var $171=$cposition;
 var $172=$2;
 var $173=(($172+$171)|0);
 var $174=HEAP8[($173)];
 var $175=(($174<<24)>>24);
 var $176=($175|0)==62;
 if($176){var $185=1;label=37;break;}else{label=36;break;}
 case 36: 
 var $178=$cposition;
 var $179=$2;
 var $180=(($179+$178)|0);
 var $181=HEAP8[($180)];
 var $182=(($181<<24)>>24);
 var $183=($182|0)==126;
 var $185=$183;label=37;break;
 case 37: 
 var $185;
 var $187=$185;label=38;break;
 case 38: 
 var $187;
 if($187){label=39;break;}else{label=40;break;}
 case 39: 
 var $189=$cposition;
 var $190=((($189)+(1))|0);
 $cposition=$190;
 label=32;break;
 case 40: 
 var $192=$cposition;
 var $193=$string_length;
 var $194=$2;
 var $195=_string_position_ok($192,$193,$194);
 $sposok=$195;
 var $196=$sposok;
 var $197=($196&255);
 var $198=($197|0)!=1;
 if($198){label=41;break;}else{label=42;break;}
 case 41: 
 $1=0;
 label=96;break;
 case 42: 
 var $201=$cposition;
 $boolean_end=$201;
 var $202=$cposition;
 var $203=$2;
 var $204=(($203+$202)|0);
 var $205=HEAP8[($204)];
 var $206=(($205<<24)>>24);
 var $207=($206|0)==32;
 if($207){label=43;break;}else{label=49;break;}
 case 43: 
 label=44;break;
 case 44: 
 var $210=$cposition;
 var $211=$string_length;
 var $212=($210|0)<($211|0);
 if($212){label=45;break;}else{var $221=0;label=46;break;}
 case 45: 
 var $214=$cposition;
 var $215=$2;
 var $216=(($215+$214)|0);
 var $217=HEAP8[($216)];
 var $218=(($217<<24)>>24);
 var $219=($218|0)==32;
 var $221=$219;label=46;break;
 case 46: 
 var $221;
 if($221){label=47;break;}else{label=48;break;}
 case 47: 
 var $223=$cposition;
 var $224=((($223)+(1))|0);
 $cposition=$224;
 label=44;break;
 case 48: 
 label=49;break;
 case 49: 
 var $227=$cposition;
 $end_start=$227;
 label=50;break;
 case 50: 
 var $229=$cposition;
 var $230=$string_length;
 var $231=($229|0)<($230|0);
 if($231){label=51;break;}else{var $240=0;label=52;break;}
 case 51: 
 var $233=$cposition;
 var $234=$2;
 var $235=(($234+$233)|0);
 var $236=HEAP8[($235)];
 var $237=(($236<<24)>>24);
 var $238=($237|0)!=41;
 var $240=$238;label=52;break;
 case 52: 
 var $240;
 if($240){label=53;break;}else{label=54;break;}
 case 53: 
 var $242=$cposition;
 var $243=((($242)+(1))|0);
 $cposition=$243;
 label=50;break;
 case 54: 
 var $245=$cposition;
 $endpos=$245;
 var $246=$3;
 var $247=(($246)|0);
 var $248=(($247)|0);
 var $249=$start;
 var $250=$2;
 var $251=(($250+$249)|0);
 var $252=$start_end;
 var $253=$start;
 var $254=((($252)-($253))|0);
 var $255=_strncpy($248,$251,$254);
 var $256=$start_end;
 var $257=$start;
 var $258=((($256)-($257))|0);
 var $259=$3;
 var $260=(($259)|0);
 var $261=(($260+$258)|0);
 HEAP8[($261)]=0;
 var $262=$3;
 var $263=(($262+266)|0);
 var $264=(($263)|0);
 var $265=$boolean_start;
 var $266=$2;
 var $267=(($266+$265)|0);
 var $268=$boolean_end;
 var $269=$boolean_start;
 var $270=((($268)-($269))|0);
 var $271=_strncpy($264,$267,$270);
 var $272=$boolean_end;
 var $273=$boolean_start;
 var $274=((($272)-($273))|0);
 var $275=$3;
 var $276=(($275+266)|0);
 var $277=(($276+$274)|0);
 HEAP8[($277)]=0;
 var $278=$3;
 var $279=(($278+272)|0);
 var $280=(($279)|0);
 var $281=$end_start;
 var $282=$2;
 var $283=(($282+$281)|0);
 var $284=$endpos;
 var $285=$end_start;
 var $286=((($284)-($285))|0);
 var $287=_strncpy($280,$283,$286);
 var $288=$endpos;
 var $289=$end_start;
 var $290=((($288)-($289))|0);
 var $291=$3;
 var $292=(($291+272)|0);
 var $293=(($292+$290)|0);
 HEAP8[($293)]=0;
 var $294=$3;
 var $295=(($294)|0);
 var $296=(($295)|0);
 var $297=$3;
 var $298=(($297+266)|0);
 var $299=(($298)|0);
 var $300=$3;
 var $301=(($300+272)|0);
 var $302=(($301)|0);
 _do_debug(5,21280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$296,HEAP32[(((tempVarArgs)+(8))>>2)]=$299,HEAP32[(((tempVarArgs)+(16))>>2)]=$302,tempVarArgs)); STACKTOP=tempVarArgs;
 var $303=$3;
 var $304=(($303)|0);
 var $305=(($304)|0);
 var $306=_strpbrk($305,21000);
 $lptr=$306;
 var $307=($306|0)!=0;
 if($307){label=55;break;}else{label=59;break;}
 case 55: 
 var $309=$3;
 var $310=(($309+255)|0);
 HEAP8[($310)]=0;
 var $311=$lptr;
 var $312=(($311+1)|0);
 $lptr=$312;
 var $313=(($temp)|0);
 var $314=$lptr;
 var $315=_strcpy($313,$314);
 var $316=$3;
 var $317=(($316)|0);
 var $318=(($317)|0);
 var $319=(($temp)|0);
 var $320=_strcpy($318,$319);
 var $321=$3;
 var $322=(($321)|0);
 var $323=(($322)|0);
 var $324=_strpbrk($323,21000);
 $rptr=$324;
 var $325=$rptr;
 var $326=($325|0)!=0;
 if($326){label=56;break;}else{label=57;break;}
 case 56: 
 var $328=$rptr;
 HEAP8[($328)]=0;
 label=58;break;
 case 57: 
 var $330=$3;
 var $331=(($330)|0);
 var $332=(($331)|0);
 _raise_error(32,0,$332,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $errorflag=1;
 label=58;break;
 case 58: 
 label=66;break;
 case 59: 
 var $335=$3;
 var $336=(($335)|0);
 var $337=(($336)|0);
 var $338=_strcmp($337,20648);
 var $339=($338|0)==0;
 if($339){label=60;break;}else{label=61;break;}
 case 60: 
 var $341=$3;
 var $342=(($341+264)|0);
 HEAP16[(($342)>>1)]=1;
 label=65;break;
 case 61: 
 var $344=$3;
 var $345=(($344)|0);
 var $346=(($345)|0);
 var $347=_strcmp($346,20264);
 var $348=($347|0)==0;
 if($348){label=62;break;}else{label=63;break;}
 case 62: 
 var $350=$3;
 var $351=(($350+264)|0);
 HEAP16[(($351)>>1)]=0;
 label=64;break;
 case 63: 
 var $353=$3;
 var $354=(($353+255)|0);
 HEAP8[($354)]=1;
 label=64;break;
 case 64: 
 label=65;break;
 case 65: 
 label=66;break;
 case 66: 
 var $358=$3;
 var $359=(($358+272)|0);
 var $360=(($359)|0);
 var $361=_strpbrk($360,21000);
 $lptr=$361;
 var $362=($361|0)!=0;
 if($362){label=67;break;}else{label=71;break;}
 case 67: 
 var $364=$3;
 var $365=(($364+527)|0);
 HEAP8[($365)]=0;
 var $366=$lptr;
 var $367=(($366+1)|0);
 $lptr=$367;
 var $368=(($temp)|0);
 var $369=$lptr;
 var $370=_strcpy($368,$369);
 var $371=$3;
 var $372=(($371+272)|0);
 var $373=(($372)|0);
 var $374=(($temp)|0);
 var $375=_strcpy($373,$374);
 var $376=$3;
 var $377=(($376+272)|0);
 var $378=(($377)|0);
 var $379=_strpbrk($378,21000);
 $rptr=$379;
 var $380=$rptr;
 var $381=($380|0)!=0;
 if($381){label=68;break;}else{label=69;break;}
 case 68: 
 var $383=$rptr;
 HEAP8[($383)]=0;
 label=70;break;
 case 69: 
 var $385=$3;
 var $386=(($385+272)|0);
 var $387=(($386)|0);
 _raise_error(32,0,$387,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $errorflag=1;
 label=70;break;
 case 70: 
 label=78;break;
 case 71: 
 var $390=$3;
 var $391=(($390+272)|0);
 var $392=(($391)|0);
 var $393=_strcmp($392,20648);
 var $394=($393|0)==0;
 if($394){label=72;break;}else{label=73;break;}
 case 72: 
 var $396=$3;
 var $397=(($396+536)|0);
 HEAP16[(($397)>>1)]=1;
 label=77;break;
 case 73: 
 var $399=$3;
 var $400=(($399+272)|0);
 var $401=(($400)|0);
 var $402=_strcmp($401,20264);
 var $403=($402|0)==0;
 if($403){label=74;break;}else{label=75;break;}
 case 74: 
 var $405=$3;
 var $406=(($405+536)|0);
 HEAP16[(($406)>>1)]=0;
 label=76;break;
 case 75: 
 var $408=$3;
 var $409=(($408+527)|0);
 HEAP8[($409)]=1;
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 label=78;break;
 case 78: 
 var $413=$3;
 var $414=(($413+266)|0);
 var $415=(($414)|0);
 var $416=HEAP8[($415)];
 var $417=(($416<<24)>>24);
 if(($417|0)==61){ label=79;break;}else if(($417|0)==126){ label=80;break;}else if(($417|0)==60){ label=81;break;}else if(($417|0)==62){ label=87;break;}else{label=92;break;}
 case 79: 
 var $419=$3;
 var $420=(($419+268)|0);
 HEAP32[(($420)>>2)]=6;
 label=93;break;
 case 80: 
 var $422=$3;
 var $423=(($422+268)|0);
 HEAP32[(($423)>>2)]=10;
 label=93;break;
 case 81: 
 var $425=$3;
 var $426=(($425+266)|0);
 var $427=(($426+1)|0);
 var $428=HEAP8[($427)];
 var $429=(($428<<24)>>24);
 if(($429|0)==0){ label=82;break;}else if(($429|0)==61){ label=83;break;}else if(($429|0)==62){ label=84;break;}else{label=85;break;}
 case 82: 
 var $431=$3;
 var $432=(($431+268)|0);
 HEAP32[(($432)>>2)]=4;
 label=86;break;
 case 83: 
 var $434=$3;
 var $435=(($434+268)|0);
 HEAP32[(($435)>>2)]=7;
 label=86;break;
 case 84: 
 var $437=$3;
 var $438=(($437+268)|0);
 HEAP32[(($438)>>2)]=9;
 label=86;break;
 case 85: 
 var $440=$3;
 var $441=(($440+266)|0);
 var $442=(($441)|0);
 _raise_error(30,0,$442,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $errorflag=1;
 label=86;break;
 case 86: 
 label=93;break;
 case 87: 
 var $445=$3;
 var $446=(($445+266)|0);
 var $447=(($446+1)|0);
 var $448=HEAP8[($447)];
 var $449=(($448<<24)>>24);
 if(($449|0)==0){ label=88;break;}else if(($449|0)==61){ label=89;break;}else{label=90;break;}
 case 88: 
 var $451=$3;
 var $452=(($451+268)|0);
 HEAP32[(($452)>>2)]=5;
 label=91;break;
 case 89: 
 var $454=$3;
 var $455=(($454+268)|0);
 HEAP32[(($455)>>2)]=8;
 label=91;break;
 case 90: 
 var $457=$3;
 var $458=(($457+266)|0);
 var $459=(($458)|0);
 _raise_error(30,0,$459,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $errorflag=1;
 label=91;break;
 case 91: 
 label=93;break;
 case 92: 
 var $462=$3;
 var $463=(($462+266)|0);
 var $464=(($463)|0);
 _raise_error(30,0,$464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $errorflag=1;
 label=93;break;
 case 93: 
 var $466=$errorflag;
 var $467=($466&255);
 var $468=($467|0)==0;
 if($468){label=94;break;}else{label=95;break;}
 case 94: 
 $1=1;
 label=96;break;
 case 95: 
 $1=0;
 label=96;break;
 case 96: 
 var $472=$1;
 STACKTOP=sp;return $472;
  default: assert(0, "bad label: " + label);
 }

}


function _print_condition($condition){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $currentc;
 $1=$condition;
 var $2=$1;
 $currentc=$2;
 label=2;break;
 case 2: 
 var $4=$currentc;
 var $5=($4|0)!=0;
 if($5){label=3;break;}else{label=10;break;}
 case 3: 
 var $7=$currentc;
 var $8=(($7)|0);
 var $9=(($8)|0);
 var $10=$currentc;
 var $11=(($10+266)|0);
 var $12=(($11)|0);
 var $13=$currentc;
 var $14=(($13+272)|0);
 var $15=(($14)|0);
 var $16=_printf(20016,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,HEAP32[(((tempVarArgs)+(8))>>2)]=$12,HEAP32[(((tempVarArgs)+(16))>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 var $17=$currentc;
 var $18=(($17+540)|0);
 var $19=HEAP32[(($18)>>2)];
 if(($19|0)==99){ label=4;break;}else if(($19|0)==1){ label=5;break;}else if(($19|0)==2){ label=6;break;}else if(($19|0)==3){ label=7;break;}else{label=8;break;}
 case 4: 
 var $21=_printf(19696,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 5: 
 var $23=_printf(19432,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 6: 
 var $25=_printf(19136,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 7: 
 var $27=_printf(18672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 8: 
 var $29=_printf(18232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 var $31=$currentc;
 var $32=(($31+544)|0);
 var $33=HEAP32[(($32)>>2)];
 $currentc=$33;
 label=2;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _matchup($ccondition,$leftorright,$ltuple,$rtuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $lr_field;
 var $datumptr;
 var $lr_condition;
 var $lr_attribute_val;
 var $object_name=sp;
 var $sptr;
 var $lr_attribute;
 var $source;
 $2=$ccondition;
 $3=$leftorright;
 $4=$ltuple;
 $5=$rtuple;
 var $6=$3;
 if(($6|0)==1){ label=2;break;}else if(($6|0)==2){ label=3;break;}else{label=4;break;}
 case 2: 
 var $8=$2;
 var $9=(($8+255)|0);
 $lr_field=$9;
 var $10=$2;
 var $11=(($10)|0);
 var $12=(($11)|0);
 $lr_condition=$12;
 var $13=$2;
 var $14=(($13+256)|0);
 $lr_attribute_val=$14;
 label=5;break;
 case 3: 
 var $16=$2;
 var $17=(($16+527)|0);
 $lr_field=$17;
 var $18=$2;
 var $19=(($18+272)|0);
 var $20=(($19)|0);
 $lr_condition=$20;
 var $21=$2;
 var $22=(($21+528)|0);
 $lr_attribute_val=$22;
 label=5;break;
 case 4: 
 _raise_error(3,0,17864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=35;break;
 case 5: 
 var $25=$lr_field;
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=($27|0)==1;
 if($28){label=6;break;}else{label=34;break;}
 case 6: 
 $source=1;
 var $30=$lr_condition;
 var $31=_strchr($30,46);
 $sptr=$31;
 var $32=$sptr;
 var $33=($32|0)!=0;
 if($33){label=7;break;}else{label=18;break;}
 case 7: 
 var $35=(($object_name)|0);
 var $36=$lr_condition;
 var $37=_strcpy($35,$36);
 var $38=(($object_name)|0);
 var $39=_strchr($38,46);
 $sptr=$39;
 var $40=$sptr;
 HEAP8[($40)]=0;
 var $41=$sptr;
 var $42=(($41+1)|0);
 $sptr=$42;
 var $43=(($object_name)|0);
 var $44=$4;
 var $45=_get_relation($44);
 var $46=(($45)|0);
 var $47=(($46)|0);
 var $48=_strcmp($43,$47);
 var $49=($48|0)==0;
 if($49){label=8;break;}else{label=11;break;}
 case 8: 
 var $51=$4;
 var $52=$sptr;
 var $53=_tuple_find_attribute_val($51,$52);
 $datumptr=$53;
 var $54=$datumptr;
 var $55=($54|0)==0;
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 var $57=$sptr;
 _raise_error(5,0,$57,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=35;break;
 case 10: 
 var $59=$datumptr;
 var $60=$lr_attribute_val;
 HEAP32[(($60)>>2)]=$59;
 var $61=$4;
 var $62=$sptr;
 var $63=_tuple_find_attribute($61,$62);
 $lr_attribute=$63;
 label=17;break;
 case 11: 
 var $65=(($object_name)|0);
 var $66=$5;
 var $67=_get_relation($66);
 var $68=(($67)|0);
 var $69=(($68)|0);
 var $70=_strcmp($65,$69);
 var $71=($70|0)==0;
 if($71){label=12;break;}else{label=15;break;}
 case 12: 
 var $73=$5;
 var $74=$sptr;
 var $75=_tuple_find_attribute_val($73,$74);
 $datumptr=$75;
 var $76=$datumptr;
 var $77=($76|0)==0;
 if($77){label=13;break;}else{label=14;break;}
 case 13: 
 var $79=$sptr;
 _raise_error(5,0,$79,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=35;break;
 case 14: 
 var $81=$datumptr;
 var $82=$lr_attribute_val;
 HEAP32[(($82)>>2)]=$81;
 var $83=$5;
 var $84=$sptr;
 var $85=_tuple_find_attribute($83,$84);
 $lr_attribute=$85;
 label=16;break;
 case 15: 
 var $87=(($object_name)|0);
 _raise_error(9,0,$87,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=35;break;
 case 16: 
 label=17;break;
 case 17: 
 label=29;break;
 case 18: 
 var $91=$4;
 var $92=$lr_condition;
 var $93=_tuple_find_attribute_val($91,$92);
 $datumptr=$93;
 var $94=$5;
 var $95=($94|0)!=0;
 if($95){label=19;break;}else{label=21;break;}
 case 19: 
 var $97=$datumptr;
 var $98=($97|0)==0;
 if($98){label=20;break;}else{label=21;break;}
 case 20: 
 $source=2;
 var $100=$5;
 var $101=$lr_condition;
 var $102=_tuple_find_attribute_val($100,$101);
 $datumptr=$102;
 label=21;break;
 case 21: 
 var $104=$datumptr;
 var $105=($104|0)==0;
 if($105){label=22;break;}else{label=23;break;}
 case 22: 
 var $107=$lr_condition;
 _raise_error(5,0,$107,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=35;break;
 case 23: 
 var $109=$datumptr;
 var $110=$lr_attribute_val;
 HEAP32[(($110)>>2)]=$109;
 var $111=$source;
 if(($111|0)==1){ label=24;break;}else if(($111|0)==2){ label=25;break;}else{label=26;break;}
 case 24: 
 var $113=$datumptr;
 var $114=$lr_attribute_val;
 HEAP32[(($114)>>2)]=$113;
 var $115=$4;
 var $116=$lr_condition;
 var $117=_tuple_find_attribute($115,$116);
 $lr_attribute=$117;
 label=27;break;
 case 25: 
 var $119=$datumptr;
 var $120=$lr_attribute_val;
 HEAP32[(($120)>>2)]=$119;
 var $121=$5;
 var $122=$lr_condition;
 var $123=_tuple_find_attribute($121,$122);
 $lr_attribute=$123;
 label=27;break;
 case 26: 
 var $125=$lr_condition;
 _raise_error(5,0,$125,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=35;break;
 case 27: 
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 var $129=$3;
 if(($129|0)==1){ label=30;break;}else if(($129|0)==2){ label=31;break;}else{label=32;break;}
 case 30: 
 var $131=$lr_attribute;
 var $132=$2;
 var $133=(($132+260)|0);
 HEAP32[(($133)>>2)]=$131;
 label=33;break;
 case 31: 
 var $135=$lr_attribute;
 var $136=$2;
 var $137=(($136+532)|0);
 HEAP32[(($137)>>2)]=$135;
 label=33;break;
 case 32: 
 _raise_error(3,0,17424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=35;break;
 case 33: 
 label=34;break;
 case 34: 
 $1=1;
 label=35;break;
 case 35: 
 var $142=$1;
 STACKTOP=sp;return $142;
  default: assert(0, "bad label: " + label);
 }

}


function _match_tuples($condition,$left_tuple,$right_tuple){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $ccondition;
 var $errorflag;
 $2=$condition;
 $3=$left_tuple;
 $4=$right_tuple;
 $errorflag=0;
 var $5=$2;
 $ccondition=$5;
 label=2;break;
 case 2: 
 var $7=$errorflag;
 var $8=($7&255);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $14=0;label=4;break;}
 case 3: 
 var $11=$ccondition;
 var $12=($11|0)!=0;
 var $14=$12;label=4;break;
 case 4: 
 var $14;
 if($14){label=5;break;}else{label=8;break;}
 case 5: 
 var $16=$ccondition;
 var $17=$3;
 var $18=$4;
 var $19=_matchup($16,1,$17,$18);
 var $20=($19|0)!=1;
 var $21=($20&1);
 var $22=(($21)&255);
 $errorflag=$22;
 var $23=$errorflag;
 var $24=($23&255);
 var $25=($24|0)!=1;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=$ccondition;
 var $28=$3;
 var $29=$4;
 var $30=_matchup($27,2,$28,$29);
 var $31=($30|0)!=1;
 var $32=($31&1);
 var $33=(($32)&255);
 $errorflag=$33;
 label=7;break;
 case 7: 
 var $35=$ccondition;
 var $36=(($35+544)|0);
 var $37=HEAP32[(($36)>>2)];
 $ccondition=$37;
 label=2;break;
 case 8: 
 var $39=$errorflag;
 var $40=($39&255);
 var $41=($40|0)==0;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 $1=1;
 label=11;break;
 case 10: 
 $1=0;
 label=11;break;
 case 11: 
 var $45=$1;
 STACKTOP=sp;return $45;
  default: assert(0, "bad label: " + label);
 }

}


function _destroy_condition($condition){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $previousc;
 var $currentc;
 $1=$condition;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 $currentc=$3;
 label=2;break;
 case 2: 
 var $5=$currentc;
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=$currentc;
 $previousc=$8;
 var $9=$currentc;
 var $10=(($9+544)|0);
 var $11=HEAP32[(($10)>>2)];
 $currentc=$11;
 var $12=$previousc;
 var $13=$12;
 _free($13);
 label=2;break;
 case 4: 
 var $15=$1;
 HEAP32[(($15)>>2)]=0;
 STACKTOP=sp;return 1;
  default: assert(0, "bad label: " + label);
 }

}


function _create_condition(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ccondition;
 var $1=_malloc(552);
 var $2=$1;
 $ccondition=$2;
 var $3=$ccondition;
 var $4=(($3)|0);
 var $5=(($4)|0);
 var $6=_strcpy($5,51560);
 var $7=$ccondition;
 var $8=(($7+255)|0);
 HEAP8[($8)]=0;
 var $9=$ccondition;
 var $10=(($9+256)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=$ccondition;
 var $12=(($11+260)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$ccondition;
 var $14=(($13+264)|0);
 HEAP16[(($14)>>1)]=0;
 var $15=$ccondition;
 var $16=(($15+266)|0);
 var $17=(($16)|0);
 var $18=_strcpy($17,51560);
 var $19=$ccondition;
 var $20=(($19+268)|0);
 HEAP32[(($20)>>2)]=0;
 var $21=$ccondition;
 var $22=(($21+272)|0);
 var $23=(($22)|0);
 var $24=_strcpy($23,51560);
 var $25=$ccondition;
 var $26=(($25+527)|0);
 HEAP8[($26)]=0;
 var $27=$ccondition;
 var $28=(($27+528)|0);
 HEAP32[(($28)>>2)]=0;
 var $29=$ccondition;
 var $30=(($29+532)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=$ccondition;
 var $32=(($31+536)|0);
 HEAP16[(($32)>>1)]=0;
 var $33=$ccondition;
 var $34=(($33+540)|0);
 HEAP32[(($34)>>2)]=0;
 var $35=$ccondition;
 var $36=(($35+544)|0);
 HEAP32[(($36)>>2)]=0;
 var $37=$ccondition;
 var $38=(($37+548)|0);
 HEAP8[($38)]=0;
 var $39=$ccondition;
 STACKTOP=sp;return $39;
}


function _build_condition($qualification,$left_tuple,$right_tuple){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $counter;
 var $result;
 var $matchupres;
 var $booleanexp=sp;
 var $currentexp=(sp)+(1032);
 var $stringptr;
 var $pcondition;
 var $ccondition;
 var $rcondition=(sp)+(2064);
 var $errorflag;
 $2=$qualification;
 $3=$left_tuple;
 $4=$right_tuple;
 $matchupres=0;
 $errorflag=0;
 $pcondition=0;
 var $5=_create_condition();
 $ccondition=$5;
 var $6=$ccondition;
 HEAP32[(($rcondition)>>2)]=$6;
 var $7=$2;
 var $8=(($currentexp)|0);
 var $9=_cut_to_right_bracket($7,1,1,$8);
 $counter=0;
 label=2;break;
 case 2: 
 var $11=$errorflag;
 var $12=($11&255);
 var $13=($12|0)!=1;
 if($13){label=3;break;}else{var $19=0;label=4;break;}
 case 3: 
 var $15=(($currentexp)|0);
 var $16=_strlen($15);
 var $17=($16|0)!=0;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 if($19){label=5;break;}else{label=25;break;}
 case 5: 
 var $21=(($currentexp)|0);
 var $22=$ccondition;
 var $23=_get_first_expression($21,$22);
 $result=$23;
 var $24=$result;
 var $25=($24|0)!=1;
 if($25){label=6;break;}else{label=9;break;}
 case 6: 
 var $27=$ccondition;
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=$ccondition;
 var $31=$30;
 _free($31);
 label=8;break;
 case 8: 
 $ccondition=0;
 $errorflag=1;
 label=12;break;
 case 9: 
 var $34=$pcondition;
 var $35=($34|0)!=0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 var $37=$ccondition;
 var $38=$pcondition;
 var $39=(($38+544)|0);
 HEAP32[(($39)>>2)]=$37;
 label=11;break;
 case 11: 
 var $41=$ccondition;
 $pcondition=$41;
 var $42=_create_condition();
 $ccondition=$42;
 var $43=$ccondition;
 var $44=(($43+540)|0);
 HEAP32[(($44)>>2)]=99;
 label=12;break;
 case 12: 
 var $46=$counter;
 var $47=((($46)+(1))|0);
 $counter=$47;
 var $48=$2;
 var $49=_find_start_of_data($48);
 $stringptr=$49;
 var $50=$stringptr;
 var $51=($50|0)!=0;
 if($51){label=13;break;}else{label=23;break;}
 case 13: 
 var $53=$stringptr;
 $2=$53;
 var $54=$2;
 var $55=(($booleanexp)|0);
 var $56=_cut_token($54,0,$55);
 var $57=(($booleanexp)|0);
 var $58=_strcmp($57,17160);
 var $59=($58|0)==0;
 if($59){label=14;break;}else{label=15;break;}
 case 14: 
 var $61=$pcondition;
 var $62=(($61+540)|0);
 HEAP32[(($62)>>2)]=1;
 label=22;break;
 case 15: 
 var $64=(($booleanexp)|0);
 var $65=_strcmp($64,16792);
 var $66=($65|0)==0;
 if($66){label=16;break;}else{label=17;break;}
 case 16: 
 var $68=$pcondition;
 var $69=(($68+540)|0);
 HEAP32[(($69)>>2)]=2;
 label=21;break;
 case 17: 
 var $71=(($booleanexp)|0);
 var $72=_strcmp($71,16480);
 var $73=($72|0)==0;
 if($73){label=18;break;}else{label=19;break;}
 case 18: 
 var $75=$pcondition;
 var $76=(($75+540)|0);
 HEAP32[(($76)>>2)]=3;
 label=20;break;
 case 19: 
 var $78=$pcondition;
 var $79=(($78+540)|0);
 HEAP32[(($79)>>2)]=0;
 var $80=(($booleanexp)|0);
 _raise_error(31,0,$80,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $errorflag=1;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 var $84=$2;
 var $85=(($currentexp)|0);
 var $86=_cut_to_right_bracket($84,1,1,$85);
 label=24;break;
 case 23: 
 var $88=(($currentexp)|0);
 var $89=_strcpy($88,51560);
 label=24;break;
 case 24: 
 label=2;break;
 case 25: 
 var $92=$pcondition;
 var $93=($92|0)!=0;
 if($93){label=26;break;}else{label=27;break;}
 case 26: 
 var $95=$pcondition;
 var $96=(($95+544)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=$pcondition;
 var $98=(($97+540)|0);
 HEAP32[(($98)>>2)]=99;
 label=27;break;
 case 27: 
 var $100=$ccondition;
 var $101=($100|0)!=0;
 if($101){label=28;break;}else{label=29;break;}
 case 28: 
 var $103=$ccondition;
 var $104=$103;
 _free($104);
 label=29;break;
 case 29: 
 $ccondition=0;
 var $106=$errorflag;
 var $107=($106&255);
 var $108=($107|0)==0;
 if($108){label=30;break;}else{label=33;break;}
 case 30: 
 var $110=HEAP32[(($rcondition)>>2)];
 var $111=$3;
 var $112=$4;
 var $113=_match_tuples($110,$111,$112);
 $matchupres=$113;
 var $114=$matchupres;
 var $115=($114|0)==1;
 if($115){label=31;break;}else{label=32;break;}
 case 31: 
 var $117=HEAP32[(($rcondition)>>2)];
 $1=$117;
 label=34;break;
 case 32: 
 var $119=_destroy_condition($rcondition);
 $1=0;
 label=34;break;
 case 33: 
 $1=0;
 label=34;break;
 case 34: 
 var $122=$1;
 STACKTOP=sp;return $122;
  default: assert(0, "bad label: " + label);
 }

}



function _change_db($new_db){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $temp=sp;
 var $filen=(sp)+(1032);
 var $selectr;
 var $projectr;
 var $ctuple=(sp)+(5136);
 $2=$new_db;
 var $3=$2;
 var $4=_strlen($3);
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=HEAP32[((42672)>>2)];
 var $8=HEAP32[((42672)>>2)];
 var $9=_relation_find($8,27080);
 var $10=_rl_project($7,$9,28816,51552);
 $projectr=$10;
 var $11=$projectr;
 var $12=($11|0)!=0;
 if($12){label=3;break;}else{label=10;break;}
 case 3: 
 var $14=_printf(18944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=$projectr;
 var $16=_tuple_readfirst($15,1,0);
 HEAP32[(($ctuple)>>2)]=$16;
 label=4;break;
 case 4: 
 var $18=HEAP32[(($ctuple)>>2)];
 var $19=($18|0)!=0;
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=HEAP32[(($ctuple)>>2)];
 var $22=(($temp)|0);
 _tuple_to_string($21,$22);
 var $23=(($temp)|0);
 var $24=_strlen($23);
 var $25=($24>>>0)<=255;
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=(($temp)|0);
 _leap_printf(15256,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 7: 
 var $29=(($temp)|0);
 _leap_printf(11944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$29,HEAP32[(((tempVarArgs)+(8))>>2)]=255,tempVarArgs)); STACKTOP=tempVarArgs;
 label=8;break;
 case 8: 
 var $31=_tuple_readnext($ctuple,1);
 label=4;break;
 case 9: 
 _close_tuple($ctuple,2);
 label=11;break;
 case 10: 
 var $34=(($temp)|0);
 var $35=_sprintf($34,9048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=27080,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($temp)|0);
 _raise_error(34,0,$36,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 11: 
 label=40;break;
 case 12: 
 var $39=HEAP32[((43016)>>2)];
 var $40=_database_name($39);
 var $41=$2;
 var $42=_strcmp($40,$41);
 var $43=($42|0)==0;
 if($43){label=13;break;}else{label=14;break;}
 case 13: 
 var $45=$2;
 _raise_error(18,0,$45,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=39;break;
 case 14: 
 var $47=$2;
 var $48=_strlen($47);
 var $49=($48>>>0)<=255;
 if($49){label=15;break;}else{label=37;break;}
 case 15: 
 var $51=(($temp)|0);
 var $52=$2;
 var $53=_sprintf($51,6600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=28816,HEAP32[(((tempVarArgs)+(8))>>2)]=$52,tempVarArgs)); STACKTOP=tempVarArgs;
 var $54=HEAP32[((42672)>>2)];
 var $55=HEAP32[((42672)>>2)];
 var $56=_relation_find($55,27080);
 var $57=(($temp)|0);
 var $58=_rl_select($54,$56,$57,51552);
 $selectr=$58;
 var $59=$selectr;
 var $60=($59|0)!=0;
 if($60){label=16;break;}else{label=35;break;}
 case 16: 
 var $62=HEAP32[((42672)>>2)];
 var $63=$selectr;
 var $64=_rl_project($62,$63,28816,51552);
 $projectr=$64;
 var $65=$projectr;
 var $66=($65|0)!=0;
 if($66){label=17;break;}else{label=33;break;}
 case 17: 
 var $68=$projectr;
 var $69=_tuple_readfirst($68,1,0);
 HEAP32[(($ctuple)>>2)]=$69;
 var $70=HEAP32[(($ctuple)>>2)];
 var $71=($70|0)==0;
 if($71){label=18;break;}else{label=19;break;}
 case 18: 
 var $73=$2;
 _raise_error(17,0,$73,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 19: 
 var $75=HEAP32[(($ctuple)>>2)];
 var $76=(($temp)|0);
 _tuple_to_string($75,$76);
 var $77=(($temp)|0);
 var $78=_strcmp($77,51552);
 var $79=($78|0)==0;
 if($79){label=21;break;}else{label=20;break;}
 case 20: 
 var $81=(($temp)|0);
 var $82=_strcmp($81,4232);
 var $83=($82|0)==0;
 if($83){label=21;break;}else{label=22;break;}
 case 21: 
 _close_tuple($ctuple,2);
 var $85=(($temp)|0);
 var $86=_sprintf($85,2664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=27080,tempVarArgs)); STACKTOP=tempVarArgs;
 var $87=(($temp)|0);
 _raise_error(34,0,$87,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 22: 
 var $89=_tuple_readnext($ctuple,1);
 label=23;break;
 case 23: 
 var $91=HEAP32[(($ctuple)>>2)];
 var $92=($91|0)!=0;
 if($92){label=24;break;}else{label=25;break;}
 case 24: 
 _close_tuple($ctuple,2);
 _raise_error(999,0,30648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 25: 
 var $95=(($temp)|0);
 var $96=_strlen($95);
 var $97=($96>>>0)>0;
 if($97){label=26;break;}else{label=29;break;}
 case 26: 
 var $99=HEAP32[((43016)>>2)];
 _relations_dispose_all($99);
 _LEAPAPI_db_destroy(43016);
 var $100=(($temp)|0);
 var $101=_LEAPAPI_db_create(0,$100);
 HEAP32[((43016)>>2)]=$101;
 var $102=HEAP32[((43016)>>2)];
 var $103=_relations_ddopen($102);
 var $104=HEAP32[((43016)>>2)];
 var $105=_database_name($104);
 _raise_message(0,29176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$105,tempVarArgs)); STACKTOP=tempVarArgs;
 var $106=HEAP32[((43016)>>2)];
 var $107=_database_name($106);
 var $108=_set_variable(27784,$107);
 var $109=HEAP8[(47136)];
 var $110=($109&255);
 var $111=($110|0)!=1;
 if($111){label=27;break;}else{label=28;break;}
 case 27: 
 var $113=(($filen)|0);
 var $114=HEAP32[((43016)>>2)];
 var $115=_database_dir($114);
 var $116=_sprintf($113,26936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$115,HEAP32[(((tempVarArgs)+(8))>>2)]=25936,HEAP32[(((tempVarArgs)+(16))>>2)]=25120,HEAP32[(((tempVarArgs)+(24))>>2)]=24544,tempVarArgs)); STACKTOP=tempVarArgs;
 var $117=(($filen)|0);
 _do_debug(3,23864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$117,tempVarArgs)); STACKTOP=tempVarArgs;
 var $118=(($filen)|0);
 _assign_input_stream($118);
 label=28;break;
 case 28: 
 label=30;break;
 case 29: 
 var $121=$2;
 _raise_error(17,0,$121,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=34;break;
 case 33: 
 var $126=(($temp)|0);
 var $127=_sprintf($126,2664,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=27080,tempVarArgs)); STACKTOP=tempVarArgs;
 var $128=(($temp)|0);
 _raise_error(34,0,$128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 34: 
 label=36;break;
 case 35: 
 var $131=(($temp)|0);
 var $132=_sprintf($131,9048,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=27080,tempVarArgs)); STACKTOP=tempVarArgs;
 var $133=(($temp)|0);
 _raise_error(34,0,$133,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 36: 
 label=38;break;
 case 37: 
 var $136=HEAP32[((_stderr)>>2)];
 var $137=_fprintf($136,23392,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=255,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=41;break;
 case 38: 
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 $1=1;
 label=41;break;
 case 41: 
 var $142=$1;
 STACKTOP=sp;return $142;
  default: assert(0, "bad label: " + label);
 }

}


function _get_keys($db,$foreign,$primary,$foreign_names,$primary_names){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $pname;
 var $fname;
 var $temp=sp;
 var $temp2=(sp)+(160);
 var $current_keyset;
 var $select_result;
 var $ctuple=(sp)+(240);
 var $sposition;
 var $cposition;
 $2=$db;
 $3=$foreign;
 $4=$primary;
 $5=$foreign_names;
 $6=$primary_names;
 var $7=$6;
 var $8=_strcpy($7,51552);
 var $9=$5;
 var $10=_strcpy($9,51552);
 var $11=(($temp2)|0);
 var $12=_strcpy($11,51552);
 var $13=$4;
 var $14=($13|0)!=0;
 if($14){label=2;break;}else{label=21;break;}
 case 2: 
 var $16=$3;
 var $17=($16|0)!=0;
 if($17){label=3;break;}else{label=21;break;}
 case 3: 
 var $19=$4;
 var $20=(($19)|0);
 var $21=(($20)|0);
 $pname=$21;
 var $22=$3;
 var $23=(($22)|0);
 var $24=(($23)|0);
 $fname=$24;
 var $25=(($temp)|0);
 var $26=$pname;
 var $27=$fname;
 var $28=_sprintf($25,23040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=22736,HEAP32[(((tempVarArgs)+(8))>>2)]=22488,HEAP32[(((tempVarArgs)+(16))>>2)]=$26,HEAP32[(((tempVarArgs)+(24))>>2)]=22032,HEAP32[(((tempVarArgs)+(32))>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 var $29=(($temp)|0);
 _do_debug(3,21736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$29,tempVarArgs)); STACKTOP=tempVarArgs;
 var $30=$2;
 var $31=(($temp)|0);
 var $32=_vprocess_query($30,$31,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $select_result=$32;
 var $33=$select_result;
 var $34=($33|0)!=0;
 if($34){label=4;break;}else{label=19;break;}
 case 4: 
 var $36=$select_result;
 var $37=_tuple_readfirst($36,1,0);
 HEAP32[(($ctuple)>>2)]=$37;
 var $38=HEAP32[(($ctuple)>>2)];
 var $39=($38|0)!=0;
 if($39){label=5;break;}else{label=17;break;}
 case 5: 
 var $41=$5;
 $current_keyset=$41;
 $sposition=2;
 var $42=$sposition;
 $cposition=$42;
 label=6;break;
 case 6: 
 var $44=$cposition;
 var $45=HEAP32[(($ctuple)>>2)];
 var $46=(($45)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+($44<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)!=0;
 if($52){label=7;break;}else{var $59=0;label=8;break;}
 case 7: 
 var $54=$cposition;
 var $55=$sposition;
 var $56=((($55)+(6))|0);
 var $57=($54>>>0)<($56>>>0);
 var $59=$57;label=8;break;
 case 8: 
 var $59;
 if($59){label=9;break;}else{label=14;break;}
 case 9: 
 var $61=$cposition;
 var $62=$sposition;
 var $63=((($62)+(3))|0);
 var $64=($61>>>0)>=($63>>>0);
 if($64){label=10;break;}else{label=11;break;}
 case 10: 
 var $66=$6;
 $current_keyset=$66;
 label=11;break;
 case 11: 
 var $68=$cposition;
 var $69=HEAP32[(($ctuple)>>2)];
 var $70=(($69)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+($68<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+8)|0);
 var $75=(($74)|0);
 var $76=_strlen($75);
 var $77=($76>>>0)>0;
 if($77){label=12;break;}else{label=13;break;}
 case 12: 
 var $79=(($temp)|0);
 var $80=$cposition;
 var $81=HEAP32[(($ctuple)>>2)];
 var $82=(($81)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+($80<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=(($86)|0);
 var $88=_sprintf($79,21272,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$87,tempVarArgs)); STACKTOP=tempVarArgs;
 var $89=$current_keyset;
 var $90=(($temp)|0);
 var $91=_strcat($89,$90);
 label=13;break;
 case 13: 
 var $93=$cposition;
 var $94=((($93)+(1))|0);
 $cposition=$94;
 label=6;break;
 case 14: 
 var $96=_tuple_readnext($ctuple,1);
 var $97=HEAP32[(($ctuple)>>2)];
 var $98=($97|0)!=0;
 if($98){label=15;break;}else{label=16;break;}
 case 15: 
 _close_tuple($ctuple,2);
 _raise_error(999,0,30648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=22;break;
 case 16: 
 _close_tuple($ctuple,2);
 label=18;break;
 case 17: 
 $1=0;
 label=22;break;
 case 18: 
 label=20;break;
 case 19: 
 _raise_error(34,0,20976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=22736,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=22;break;
 case 20: 
 label=21;break;
 case 21: 
 $1=1;
 label=22;break;
 case 22: 
 var $107=$1;
 STACKTOP=sp;return $107;
  default: assert(0, "bad label: " + label);
 }

}


function _hash($key){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $h;
 var $c;
 var $slen;
 $1=$key;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=(($4<<24)>>24);
 $h=$5;
 var $6=$1;
 var $7=_strlen($6);
 $slen=$7;
 $c=0;
 label=2;break;
 case 2: 
 var $9=$c;
 var $10=$slen;
 var $11=($9>>>0)<($10>>>0);
 if($11){label=3;break;}else{label=5;break;}
 case 3: 
 var $13=$h;
 var $14=($13<<7);
 var $15=$c;
 var $16=$1;
 var $17=(($16+$15)|0);
 var $18=HEAP8[($17)];
 var $19=(($18<<24)>>24);
 var $20=((($14)+($19))|0);
 var $21=(((($20>>>0))%(53))&-1);
 $h=$21;
 label=4;break;
 case 4: 
 var $23=$c;
 var $24=((($23)+(1))|0);
 $c=$24;
 label=2;break;
 case 5: 
 var $26=$h;
 var $27=(($26)&65535);
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }

}


function _chain_node_create($e){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $rchain;
 $1=$e;
 var $2=_malloc(17368);
 var $3=$2;
 $rchain=$3;
 var $4=$rchain;
 var $5=$4;
 _check_assign($5,26688);
 var $6=$rchain;
 var $7=(($6+16320)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=$rchain;
 var $9=(($8+16324)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$rchain;
 var $11=(($10)|0);
 var $12=(($11)|0);
 var $13=$1;
 var $14=_strcpy($12,$13);
 var $15=$1;
 _do_debug(7,28776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs)); STACKTOP=tempVarArgs;
 var $16=HEAP32[((43024)>>2)];
 var $17=((($16)+(1))|0);
 HEAP32[((43024)>>2)]=$17;
 var $18=$rchain;
 STACKTOP=sp;return $18;
}


function _hashing_insert($HT,$e,$hk){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $psn;
 var $nchn;
 var $pchnn;
 var $cchnn;
 $1=$HT;
 $2=$e;
 $3=$hk;
 _do_debug(3,22264,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=$3;
 var $5=($4&65535);
 var $6=($5|0)>54;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(27,2,51536,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=3;break;
 case 3: 
 var $9=$3;
 var $10=($9&65535);
 var $11=($10|0)==54;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$2;
 var $14=_hash($13);
 $psn=$14;
 label=6;break;
 case 5: 
 var $16=$3;
 $psn=$16;
 label=6;break;
 case 6: 
 var $18=$2;
 var $19=_chain_node_create($18);
 $nchn=$19;
 var $20=$nchn;
 _do_debug(7,15176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$20,tempVarArgs)); STACKTOP=tempVarArgs;
 var $21=$psn;
 var $22=($21&65535);
 var $23=$1;
 var $24=(($23+($22<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 var $28=$nchn;
 var $29=$psn;
 var $30=($29&65535);
 var $31=$1;
 var $32=(($31+($30<<2))|0);
 HEAP32[(($32)>>2)]=$28;
 label=23;break;
 case 8: 
 $pchnn=0;
 var $34=$psn;
 var $35=($34&65535);
 var $36=$1;
 var $37=(($36+($35<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 $cchnn=$38;
 label=9;break;
 case 9: 
 var $40=$cchnn;
 var $41=($40|0)!=0;
 if($41){label=10;break;}else{var $50=0;label=11;break;}
 case 10: 
 var $43=$2;
 var $44=$cchnn;
 var $45=(($44)|0);
 var $46=(($45)|0);
 var $47=_strcmp($43,$46);
 var $48=($47|0)>0;
 var $50=$48;label=11;break;
 case 11: 
 var $50;
 if($50){label=12;break;}else{label=13;break;}
 case 12: 
 var $52=$cchnn;
 $pchnn=$52;
 var $53=$cchnn;
 var $54=(($53+16320)|0);
 var $55=HEAP32[(($54)>>2)];
 $cchnn=$55;
 label=9;break;
 case 13: 
 var $57=$cchnn;
 var $58=($57|0)==0;
 if($58){label=14;break;}else{label=15;break;}
 case 14: 
 var $60=$nchn;
 var $61=$pchnn;
 var $62=(($61+16320)|0);
 HEAP32[(($62)>>2)]=$60;
 var $63=$pchnn;
 var $64=$nchn;
 var $65=(($64+16324)|0);
 HEAP32[(($65)>>2)]=$63;
 var $66=$nchn;
 _do_debug(7,11896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$66,tempVarArgs)); STACKTOP=tempVarArgs;
 label=22;break;
 case 15: 
 var $68=$cchnn;
 var $69=(($68)|0);
 var $70=(($69)|0);
 var $71=$psn;
 var $72=($71&65535);
 var $73=$1;
 var $74=(($73+($72<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75)|0);
 var $77=(($76)|0);
 var $78=_strcmp($70,$77);
 var $79=($78|0)==0;
 if($79){label=16;break;}else{label=17;break;}
 case 16: 
 var $81=$psn;
 var $82=($81&65535);
 var $83=$1;
 var $84=(($83+($82<<2))|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$nchn;
 var $87=(($86+16320)|0);
 HEAP32[(($87)>>2)]=$85;
 var $88=$nchn;
 var $89=$psn;
 var $90=($89&65535);
 var $91=$1;
 var $92=(($91+($90<<2))|0);
 HEAP32[(($92)>>2)]=$88;
 var $93=$nchn;
 _do_debug(7,8976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$93,tempVarArgs)); STACKTOP=tempVarArgs;
 label=21;break;
 case 17: 
 var $95=$2;
 var $96=$cchnn;
 var $97=(($96)|0);
 var $98=(($97)|0);
 var $99=_strcmp($95,$98);
 var $100=($99|0)<0;
 if($100){label=18;break;}else{label=19;break;}
 case 18: 
 var $102=$cchnn;
 var $103=$nchn;
 var $104=(($103+16320)|0);
 HEAP32[(($104)>>2)]=$102;
 var $105=$pchnn;
 var $106=$nchn;
 var $107=(($106+16324)|0);
 HEAP32[(($107)>>2)]=$105;
 var $108=$nchn;
 var $109=$pchnn;
 var $110=(($109+16320)|0);
 HEAP32[(($110)>>2)]=$108;
 var $111=$nchn;
 _do_debug(7,6552,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$111,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 19: 
 var $113=$nchn;
 var $114=$113;
 _free($114);
 var $115=HEAP32[((43024)>>2)];
 var $116=((($115)-(1))|0);
 HEAP32[((43024)>>2)]=$116;
 var $117=$nchn;
 _do_debug(7,4168,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$117,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $122=HEAP32[((43024)>>2)];
 _do_debug(7,2640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$122,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(3,30616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _findposn($HT,$tkey,$posn,$chn,$found){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $home;
 var $finished;
 var $cchnn;
 $1=$HT;
 $2=$tkey;
 $3=$posn;
 $4=$chn;
 $5=$found;
 _do_debug(3,29144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$5;
 HEAP8[($6)]=0;
 var $7=$2;
 var $8=_hash($7);
 $home=$8;
 var $9=$home;
 var $10=$3;
 HEAP16[(($10)>>1)]=$9;
 $finished=0;
 var $11=$3;
 var $12=HEAP16[(($11)>>1)];
 var $13=($12&65535);
 var $14=$1;
 var $15=(($14+($13<<2))|0);
 var $16=HEAP32[(($15)>>2)];
 $cchnn=$16;
 label=2;break;
 case 2: 
 var $18=$finished;
 var $19=(($18<<24)>>24)!=0;
 var $20=$19^1;
 if($20){label=3;break;}else{label=8;break;}
 case 3: 
 var $22=$cchnn;
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $25=$cchnn;
 var $26=(($25)|0);
 var $27=(($26)|0);
 var $28=$2;
 var $29=_strcmp($27,$28);
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 $finished=1;
 label=7;break;
 case 6: 
 var $33=$cchnn;
 var $34=(($33+16320)|0);
 var $35=HEAP32[(($34)>>2)];
 $cchnn=$35;
 label=7;break;
 case 7: 
 label=2;break;
 case 8: 
 var $38=$cchnn;
 var $39=($38|0)!=0;
 var $40=($39&1);
 var $41=(($40)&255);
 var $42=$5;
 HEAP8[($42)]=$41;
 var $43=$cchnn;
 var $44=$4;
 HEAP32[(($44)>>2)]=$43;
 _do_debug(3,27752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _hashing_delete($HT,$e,$updated){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $posn=sp;
 var $found=(sp)+(8);
 var $chn=(sp)+(16);
 var $hchn;
 $1=$HT;
 $2=$e;
 $3=$updated;
 _do_debug(5,26912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=$3;
 HEAP8[($4)]=0;
 var $5=$1;
 var $6=$2;
 _findposn($5,$6,$posn,$chn,$found);
 var $7=HEAP8[($found)];
 var $8=(($7<<24)>>24)!=0;
 if($8){label=2;break;}else{label=17;break;}
 case 2: 
 var $10=HEAP32[(($chn)>>2)];
 var $11=(($10+16324)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=6;break;}
 case 3: 
 _do_debug(7,25912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=HEAP32[(($chn)>>2)];
 var $16=(($15+16320)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=HEAP16[(($posn)>>1)];
 var $19=($18&65535);
 var $20=$1;
 var $21=(($20+($19<<2))|0);
 HEAP32[(($21)>>2)]=$17;
 $hchn=$17;
 var $22=HEAP32[(($chn)>>2)];
 var $23=(($22+16320)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)!=0;
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=HEAP32[(($chn)>>2)];
 var $28=(($27+16320)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+16324)|0);
 HEAP32[(($30)>>2)]=0;
 label=5;break;
 case 5: 
 var $32=HEAP32[(($chn)>>2)];
 var $33=$32;
 _free($33);
 label=16;break;
 case 6: 
 var $35=HEAP32[(($chn)>>2)];
 var $36=(($35+16320)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=7;break;}else{label=10;break;}
 case 7: 
 _do_debug(7,25080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $40=HEAP32[(($chn)>>2)];
 var $41=(($40+16324)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)!=0;
 if($43){label=8;break;}else{label=9;break;}
 case 8: 
 var $45=HEAP32[(($chn)>>2)];
 var $46=(($45+16324)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+16320)|0);
 HEAP32[(($48)>>2)]=0;
 label=9;break;
 case 9: 
 var $50=HEAP32[(($chn)>>2)];
 var $51=$50;
 _free($51);
 label=15;break;
 case 10: 
 _do_debug(7,24504,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $53=HEAP32[(($chn)>>2)];
 var $54=(($53+16324)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)!=0;
 if($56){label=11;break;}else{label=12;break;}
 case 11: 
 var $58=HEAP32[(($chn)>>2)];
 var $59=(($58+16320)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=HEAP32[(($chn)>>2)];
 var $62=(($61+16324)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+16320)|0);
 HEAP32[(($64)>>2)]=$60;
 label=12;break;
 case 12: 
 var $66=HEAP32[(($chn)>>2)];
 var $67=(($66+16320)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)!=0;
 if($69){label=13;break;}else{label=14;break;}
 case 13: 
 var $71=HEAP32[(($chn)>>2)];
 var $72=(($71+16324)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($chn)>>2)];
 var $75=(($74+16320)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+16324)|0);
 HEAP32[(($77)>>2)]=$73;
 label=14;break;
 case 14: 
 var $79=HEAP32[(($chn)>>2)];
 var $80=$79;
 _free($80);
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 var $83=HEAP32[((43024)>>2)];
 var $84=((($83)-(1))|0);
 HEAP32[((43024)>>2)]=$84;
 var $85=$3;
 HEAP8[($85)]=1;
 label=17;break;
 case 17: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _hashing_retrieve($HT,$tkey,$e,$retrieved){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $posn=sp;
 var $found=(sp)+(8);
 var $chn=(sp)+(16);
 $1=$HT;
 $2=$tkey;
 $3=$e;
 $4=$retrieved;
 var $5=$2;
 _do_debug(1,23816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$5,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=$4;
 HEAP8[($6)]=0;
 var $7=$1;
 var $8=$2;
 _findposn($7,$8,$posn,$chn,$found);
 var $9=HEAP8[($found)];
 var $10=(($9<<24)>>24)!=0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$3;
 var $13=HEAP32[(($chn)>>2)];
 var $14=(($13)|0);
 var $15=(($14)|0);
 var $16=_strcpy($12,$15);
 var $17=$4;
 HEAP8[($17)]=1;
 label=3;break;
 case 3: 
 _do_debug(1,23368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _hashing_create(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $k;
 var $HT;
 _do_debug(9,23024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=212,tempVarArgs)); STACKTOP=tempVarArgs;
 var $1=_malloc(212);
 var $2=$1;
 $HT=$2;
 var $3=$HT;
 var $4=$3;
 _check_assign($4,22712);
 $k=0;
 label=2;break;
 case 2: 
 var $6=$k;
 var $7=($6>>>0)<53;
 if($7){label=3;break;}else{label=5;break;}
 case 3: 
 var $9=$k;
 var $10=$HT;
 var $11=(($10+($9<<2))|0);
 HEAP32[(($11)>>2)]=0;
 label=4;break;
 case 4: 
 var $13=$k;
 var $14=((($13)+(1))|0);
 $k=$14;
 label=2;break;
 case 5: 
 var $16=$HT;
 STACKTOP=sp;return $16;
  default: assert(0, "bad label: " + label);
 }

}


function _hashing_terminate($HT){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $k;
 var $ochn;
 var $cchnn;
 $1=$HT;
 _levindicator(0);
 $k=0;
 label=2;break;
 case 2: 
 var $3=$k;
 var $4=($3>>>0)<53;
 if($4){label=3;break;}else{label=12;break;}
 case 3: 
 var $6=$k;
 _do_debug(7,22480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $7=$1;
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=0;
 if($9){label=4;break;}else{label=10;break;}
 case 4: 
 var $11=$k;
 var $12=$1;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+($11<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 $cchnn=$15;
 label=5;break;
 case 5: 
 var $17=$cchnn;
 var $18=($17|0)!=0;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=$cchnn;
 var $21=(($20)|0);
 var $22=(($21)|0);
 _do_debug(7,22008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$22,tempVarArgs)); STACKTOP=tempVarArgs;
 var $23=$cchnn;
 $ochn=$23;
 var $24=$cchnn;
 var $25=(($24+16320)|0);
 var $26=HEAP32[(($25)>>2)];
 $cchnn=$26;
 var $27=$ochn;
 _do_debug(7,15176,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs)); STACKTOP=tempVarArgs;
 var $28=$ochn;
 var $29=($28|0)!=0;
 if($29){label=7;break;}else{label=8;break;}
 case 7: 
 var $31=$ochn;
 var $32=$31;
 _free($32);
 var $33=HEAP32[((43024)>>2)];
 var $34=((($33)-(1))|0);
 HEAP32[((43024)>>2)]=$34;
 $ochn=0;
 label=8;break;
 case 8: 
 label=5;break;
 case 9: 
 var $37=$k;
 var $38=$1;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+($37<<2))|0);
 HEAP32[(($40)>>2)]=0;
 label=10;break;
 case 10: 
 label=11;break;
 case 11: 
 var $43=$k;
 var $44=((($43)+(1))|0);
 $k=$44;
 label=2;break;
 case 12: 
 _levindicator(1);
 var $46=$1;
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 _free($48);
 var $49=$1;
 HEAP32[(($49)>>2)]=0;
 var $50=HEAP32[((43024)>>2)];
 _do_debug(7,2640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$50,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _hashing_save($HT,$filen){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16432)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $fptr;
 var $temp=sp;
 var $counter;
 var $node=(sp)+(104);
 var $cur_chain_node;
 $1=$HT;
 $2=$filen;
 _do_debug(1,21712,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=$2;
 var $4=_fopen($3,21264);
 $fptr=$4;
 var $5=$fptr;
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($temp)|0);
 var $9=$2;
 var $10=_sprintf($8,20944,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,tempVarArgs)); STACKTOP=tempVarArgs;
 var $11=(($temp)|0);
 _raise_error(2,0,$11,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=11;break;
 case 3: 
 $counter=0;
 label=4;break;
 case 4: 
 var $14=$counter;
 var $15=($14>>>0)<53;
 if($15){label=5;break;}else{label=10;break;}
 case 5: 
 var $17=$counter;
 var $18=(($17)&255);
 var $19=(($node)|0);
 HEAP8[($19)]=$18;
 var $20=$counter;
 var $21=$1;
 var $22=(($21+($20<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 $cur_chain_node=$23;
 var $24=(($node+16324)|0);
 HEAP32[(($24)>>2)]=0;
 _levindicator(0);
 var $25=$counter;
 _do_debug(7,20640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$25,tempVarArgs)); STACKTOP=tempVarArgs;
 label=6;break;
 case 6: 
 var $27=$cur_chain_node;
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=(($node+1)|0);
 var $31=(($30)|0);
 var $32=$cur_chain_node;
 var $33=(($32)|0);
 var $34=(($33)|0);
 var $35=_strcpy($31,$34);
 var $36=(($node+16324)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=((($37)+(1))|0);
 HEAP32[(($36)>>2)]=$38;
 var $39=$fptr;
 var $40=(($node)|0);
 var $41=HEAP8[($40)];
 var $42=(($41<<24)>>24);
 var $43=(($node+1)|0);
 var $44=(($43)|0);
 var $45=(($node+16324)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=_fprintf($39,20248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$42,HEAP32[(((tempVarArgs)+(8))>>2)]=$44,HEAP32[(((tempVarArgs)+(16))>>2)]=$46,tempVarArgs)); STACKTOP=tempVarArgs;
 var $48=$counter;
 _do_debug(7,20008,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$48,tempVarArgs)); STACKTOP=tempVarArgs;
 var $49=$cur_chain_node;
 var $50=(($49+16320)|0);
 var $51=HEAP32[(($50)>>2)];
 $cur_chain_node=$51;
 label=6;break;
 case 8: 
 _do_debug(7,19688,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=9;break;
 case 9: 
 var $54=$counter;
 var $55=((($54)+(1))|0);
 $counter=$55;
 label=4;break;
 case 10: 
 _do_debug(7,19424,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 _levindicator(1);
 var $57=$fptr;
 var $58=_fclose($57);
 label=11;break;
 case 11: 
 var $60=$2;
 _do_debug(2,19104,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$60,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,18648,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _hashing_load($HT,$filen){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32648)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $fptr;
 var $node=sp;
 var $readerr;
 var $cptr;
 var $line=(sp)+(16328);
 $1=$HT;
 $2=$filen;
 _do_debug(1,18208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $3=$2;
 _do_debug(2,17816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=_hashing_create();
 var $5=$1;
 HEAP32[(($5)>>2)]=$4;
 var $6=$2;
 var $7=_fopen($6,17416);
 $fptr=$7;
 var $8=$fptr;
 var $9=($8|0)!=0;
 if($9){label=2;break;}else{label=17;break;}
 case 2: 
 label=3;break;
 case 3: 
 var $12=$fptr;
 var $13=(($node)|0);
 var $14=_fscanf($12,17152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$13,tempVarArgs)); STACKTOP=tempVarArgs;
 $readerr=$14;
 var $15=$readerr;
 var $16=($15|0)!=-1;
 if($16){label=4;break;}else{label=9;break;}
 case 4: 
 var $18=(($line)|0);
 var $19=$fptr;
 var $20=_fgets($18,16320,$19);
 $cptr=$20;
 var $21=$cptr;
 var $22=($21|0)!=0;
 if($22){label=5;break;}else{label=8;break;}
 case 5: 
 var $24=(($line)|0);
 var $25=_strlen($24);
 var $26=((($25)-(1))|0);
 var $27=$cptr;
 var $28=(($27+$26)|0);
 HEAP8[($28)]=0;
 var $29=(($line)|0);
 var $30=_strchr($29,61);
 $cptr=$30;
 var $31=$cptr;
 var $32=($31|0)!=0;
 if($32){label=6;break;}else{label=7;break;}
 case 6: 
 var $34=$cptr;
 var $35=(($34+1)|0);
 $cptr=$35;
 var $36=(($node+1)|0);
 var $37=(($36)|0);
 var $38=$cptr;
 var $39=_strcpy($37,$38);
 var $40=$cptr;
 _do_debug(7,16768,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$40,tempVarArgs)); STACKTOP=tempVarArgs;
 label=7;break;
 case 7: 
 var $42=$fptr;
 var $43=(($node+16324)|0);
 var $44=_fscanf($42,16472,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$43,tempVarArgs)); STACKTOP=tempVarArgs;
 $readerr=$44;
 label=8;break;
 case 8: 
 label=9;break;
 case 9: 
 var $47=$readerr;
 var $48=($47|0)!=-1;
 if($48){label=10;break;}else{label=12;break;}
 case 10: 
 var $50=$cptr;
 var $51=($50|0)!=0;
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $53=$1;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($node+1)|0);
 var $56=(($55)|0);
 var $57=(($node)|0);
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24);
 _hashing_insert($54,$56,$59);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $62=$readerr;
 var $63=($62|0)!=-1;
 if($63){label=14;break;}else{var $68=0;label=15;break;}
 case 14: 
 var $65=$cptr;
 var $66=($65|0)!=0;
 var $68=$66;label=15;break;
 case 15: 
 var $68;
 if($68){label=3;break;}else{label=16;break;}
 case 16: 
 var $70=$fptr;
 var $71=_fclose($70);
 label=18;break;
 case 17: 
 _do_debug(1,16128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 var $73=$2;
 _raise_error(2,0,$73,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=18;break;
 case 18: 
 var $75=$2;
 _do_debug(2,15704,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$75,tempVarArgs)); STACKTOP=tempVarArgs;
 var $76=HEAP32[((43024)>>2)];
 _do_debug(7,2640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$76,tempVarArgs)); STACKTOP=tempVarArgs;
 _do_debug(1,15376,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _build_hash_table($rel){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $htable;
 var $ct=sp;
 var $tuple_string=(sp)+(8);
 var $count;
 $1=$rel;
 var $2=_hashing_create();
 $htable=$2;
 var $3=$1;
 var $4=_tuple_readfirst($3,1,0);
 HEAP32[(($ct)>>2)]=$4;
 $count=0;
 _do_debug(3,14752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=2;break;
 case 2: 
 var $6=HEAP32[(($ct)>>2)];
 var $7=($6|0)!=0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=HEAP32[(($ct)>>2)];
 var $10=(($tuple_string)|0);
 _tuple_to_string($9,$10);
 var $11=$htable;
 var $12=(($tuple_string)|0);
 _hashing_insert($11,$12,54);
 var $13=$count;
 var $14=((($13)+(1))|0);
 $count=$14;
 var $15=_tuple_readnext($ct,1);
 label=2;break;
 case 4: 
 var $17=$1;
 var $18=(($17+4668)|0);
 HEAP8[($18)]=1;
 _close_tuple($ct,2);
 var $19=$1;
 var $20=(($19)|0);
 var $21=(($20)|0);
 _do_debug(2,14296,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,tempVarArgs)); STACKTOP=tempVarArgs;
 var $22=HEAP32[((43024)>>2)];
 _do_debug(7,2640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$22,tempVarArgs)); STACKTOP=tempVarArgs;
 var $23=$htable;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }

}


function _pt_create_stack(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $pts;
 var $1=_malloc(8);
 var $2=$1;
 $pts=$2;
 var $3=$pts;
 var $4=$3;
 _check_assign($4,26184);
 var $5=$pts;
 var $6=(($5)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=$pts;
 var $8=(($7+4)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=$pts;
 STACKTOP=sp;return $9;
}


function _pt_push_stack($st,$data){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $1;
 var $2;
 var $st_node;
 $1=$st;
 $2=$data;
 var $3=_malloc(8);
 var $4=$3;
 $st_node=$4;
 var $5=$st_node;
 var $6=$5;
 _check_assign($6,28704);
 _do_trace(22240);
 var $7=$2;
 var $8=$st_node;
 var $9=(($8)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$1;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$st_node;
 var $14=(($13+4)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$st_node;
 var $16=$1;
 var $17=(($16)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$1;
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 STACKTOP=sp;return;
}


function _pt_pop_stack($st){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $node;
 var $rdata;
 $2=$st;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=6;break;}
 case 2: 
 var $8=$2;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 $rdata=$12;
 var $13=$2;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 $node=$15;
 var $16=$node;
 var $17=(($16+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$2;
 var $20=(($19)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$node;
 var $22=($21|0)!=0;
 if($22){label=3;break;}else{label=4;break;}
 case 3: 
 var $24=$node;
 var $25=$24;
 _free($25);
 $node=0;
 label=5;break;
 case 4: 
 _raise_error(14,0,18880,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=5;break;
 case 5: 
 var $28=$2;
 var $29=(($28+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($30)-(1))|0);
 HEAP32[(($29)>>2)]=$31;
 var $32=$rdata;
 $1=$32;
 label=7;break;
 case 6: 
 _raise_error(14,0,15144,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=7;break;
 case 7: 
 var $35=$1;
 STACKTOP=sp;return $35;
  default: assert(0, "bad label: " + label);
 }

}


function _pt_stack_empty($stack){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$stack;
 var $3=$2;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 $1=1;
 label=4;break;
 case 3: 
 $1=0;
 label=4;break;
 case 4: 
 var $10=$1;
 STACKTOP=sp;return $10;
  default: assert(0, "bad label: " + label);
 }

}


function _pt_stack_dispose($st){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$st;
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)!=0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 _free($8);
 label=4;break;
 case 3: 
 _raise_error(14,0,11856,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=4;break;
 case 4: 
 var $11=$1;
 HEAP32[(($11)>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _pt_flush_stack($st){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$st;
 label=2;break;
 case 2: 
 var $3=$1;
 var $4=HEAP32[(($3)>>2)];
 var $5=_pt_stack_empty($4);
 var $6=(($5<<24)>>24)!=0;
 var $7=$6^1;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$1;
 var $10=HEAP32[(($9)>>2)];
 var $11=_pt_pop_stack($10);
 label=2;break;
 case 4: 
 var $13=$1;
 _pt_stack_dispose($13);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _regcomp($exp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $r;
 var $scan;
 var $longest;
 var $len;
 var $flags=sp;
 $2=$exp;
 var $3=$2;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 _raise_error(56,0,26056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=28;break;
 case 3: 
 var $7=$2;
 HEAP32[((42512)>>2)]=$7;
 HEAP32[((42520)>>2)]=1;
 HEAP32[((42504)>>2)]=0;
 HEAP32[((42552)>>2)]=42544;
 _regc(156);
 var $8=_reg(0,$flags);
 var $9=($8|0)==0;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=28;break;
 case 5: 
 var $12=HEAP32[((42504)>>2)];
 var $13=($12|0)>=32767;
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 _raise_error(56,0,28640,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=28;break;
 case 7: 
 var $16=HEAP32[((42504)>>2)];
 var $17=((($16)+(96))|0);
 var $18=_malloc($17);
 var $19=$18;
 $r=$19;
 var $20=$r;
 var $21=($20|0)==0;
 if($21){label=8;break;}else{label=9;break;}
 case 8: 
 _raise_error(56,0,22216,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=28;break;
 case 9: 
 var $24=$2;
 HEAP32[((42512)>>2)]=$24;
 HEAP32[((42520)>>2)]=1;
 var $25=$r;
 var $26=(($25+92)|0);
 var $27=(($26)|0);
 HEAP32[((42552)>>2)]=$27;
 _regc(156);
 var $28=_reg(0,$flags);
 var $29=($28|0)==0;
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 $1=0;
 label=28;break;
 case 11: 
 var $32=$r;
 var $33=(($32+80)|0);
 HEAP8[($33)]=0;
 var $34=$r;
 var $35=(($34+81)|0);
 HEAP8[($35)]=0;
 var $36=$r;
 var $37=(($36+84)|0);
 HEAP32[(($37)>>2)]=0;
 var $38=$r;
 var $39=(($38+88)|0);
 HEAP32[(($39)>>2)]=0;
 var $40=$r;
 var $41=(($40+92)|0);
 var $42=(($41)|0);
 var $43=(($42+1)|0);
 $scan=$43;
 var $44=$scan;
 var $45=_regnext($44);
 var $46=HEAP8[($45)];
 var $47=(($46<<24)>>24);
 var $48=($47|0)==0;
 if($48){label=12;break;}else{label=27;break;}
 case 12: 
 var $50=$scan;
 var $51=(($50+3)|0);
 $scan=$51;
 var $52=$scan;
 var $53=HEAP8[($52)];
 var $54=(($53<<24)>>24);
 var $55=($54|0)==8;
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 var $57=$scan;
 var $58=(($57+3)|0);
 var $59=HEAP8[($58)];
 var $60=$r;
 var $61=(($60+80)|0);
 HEAP8[($61)]=$59;
 label=17;break;
 case 14: 
 var $63=$scan;
 var $64=HEAP8[($63)];
 var $65=(($64<<24)>>24);
 var $66=($65|0)==1;
 if($66){label=15;break;}else{label=16;break;}
 case 15: 
 var $68=$r;
 var $69=(($68+81)|0);
 var $70=HEAP8[($69)];
 var $71=((($70)+(1))&255);
 HEAP8[($69)]=$71;
 label=16;break;
 case 16: 
 label=17;break;
 case 17: 
 var $74=HEAP32[(($flags)>>2)];
 var $75=$74&4;
 var $76=($75|0)!=0;
 if($76){label=18;break;}else{label=26;break;}
 case 18: 
 $longest=0;
 $len=0;
 label=19;break;
 case 19: 
 var $79=$scan;
 var $80=($79|0)!=0;
 if($80){label=20;break;}else{label=25;break;}
 case 20: 
 var $82=$scan;
 var $83=HEAP8[($82)];
 var $84=(($83<<24)>>24);
 var $85=($84|0)==8;
 if($85){label=21;break;}else{label=23;break;}
 case 21: 
 var $87=$scan;
 var $88=(($87+3)|0);
 var $89=_strlen($88);
 var $90=$len;
 var $91=($89>>>0)>=($90>>>0);
 if($91){label=22;break;}else{label=23;break;}
 case 22: 
 var $93=$scan;
 var $94=(($93+3)|0);
 $longest=$94;
 var $95=$scan;
 var $96=(($95+3)|0);
 var $97=_strlen($96);
 $len=$97;
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $100=$scan;
 var $101=_regnext($100);
 $scan=$101;
 label=19;break;
 case 25: 
 var $103=$longest;
 var $104=$r;
 var $105=(($104+84)|0);
 HEAP32[(($105)>>2)]=$103;
 var $106=$len;
 var $107=$r;
 var $108=(($107+88)|0);
 HEAP32[(($108)>>2)]=$106;
 label=26;break;
 case 26: 
 label=27;break;
 case 27: 
 var $111=$r;
 $1=$111;
 label=28;break;
 case 28: 
 var $113=$1;
 STACKTOP=sp;return $113;
  default: assert(0, "bad label: " + label);
 }

}


function _regexec($prog,$string){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $s;
 $2=$prog;
 $3=$string;
 var $4=$2;
 var $5=($4|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$3;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 _raise_error(56,0,18864,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=31;break;
 case 4: 
 var $11=$2;
 var $12=(($11+92)|0);
 var $13=(($12)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=($15|0)!=156;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 _raise_error(56,0,15120,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=31;break;
 case 6: 
 var $19=$2;
 var $20=(($19+84)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)!=0;
 if($22){label=7;break;}else{label=15;break;}
 case 7: 
 var $24=$3;
 $s=$24;
 label=8;break;
 case 8: 
 var $26=$s;
 var $27=$2;
 var $28=(($27+84)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24);
 var $33=_strchr($26,$32);
 $s=$33;
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{label=12;break;}
 case 9: 
 var $36=$s;
 var $37=$2;
 var $38=(($37+84)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$2;
 var $41=(($40+88)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=_strncmp($36,$39,$42);
 var $44=($43|0)==0;
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 label=12;break;
 case 11: 
 var $47=$s;
 var $48=(($47+1)|0);
 $s=$48;
 label=8;break;
 case 12: 
 var $50=$s;
 var $51=($50|0)==0;
 if($51){label=13;break;}else{label=14;break;}
 case 13: 
 $1=0;
 label=31;break;
 case 14: 
 label=15;break;
 case 15: 
 var $55=$3;
 HEAP32[((42560)>>2)]=$55;
 var $56=$2;
 var $57=(($56+81)|0);
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24)!=0;
 if($59){label=16;break;}else{label=17;break;}
 case 16: 
 var $61=$2;
 var $62=$3;
 var $63=_regtry($61,$62);
 $1=$63;
 label=31;break;
 case 17: 
 var $65=$3;
 $s=$65;
 var $66=$2;
 var $67=(($66+80)|0);
 var $68=HEAP8[($67)];
 var $69=(($68<<24)>>24);
 var $70=($69|0)!=0;
 if($70){label=18;break;}else{label=24;break;}
 case 18: 
 label=19;break;
 case 19: 
 var $73=$s;
 var $74=$2;
 var $75=(($74+80)|0);
 var $76=HEAP8[($75)];
 var $77=(($76<<24)>>24);
 var $78=_strchr($73,$77);
 $s=$78;
 var $79=($78|0)!=0;
 if($79){label=20;break;}else{label=23;break;}
 case 20: 
 var $81=$2;
 var $82=$s;
 var $83=_regtry($81,$82);
 var $84=($83|0)!=0;
 if($84){label=21;break;}else{label=22;break;}
 case 21: 
 $1=1;
 label=31;break;
 case 22: 
 var $87=$s;
 var $88=(($87+1)|0);
 $s=$88;
 label=19;break;
 case 23: 
 label=30;break;
 case 24: 
 label=25;break;
 case 25: 
 var $92=$2;
 var $93=$s;
 var $94=_regtry($92,$93);
 var $95=($94|0)!=0;
 if($95){label=26;break;}else{label=27;break;}
 case 26: 
 $1=1;
 label=31;break;
 case 27: 
 label=28;break;
 case 28: 
 var $99=$s;
 var $100=(($99+1)|0);
 $s=$100;
 var $101=HEAP8[($99)];
 var $102=(($101<<24)>>24);
 var $103=($102|0)!=0;
 if($103){label=25;break;}else{label=29;break;}
 case 29: 
 label=30;break;
 case 30: 
 $1=0;
 label=31;break;
 case 31: 
 var $107=$1;
 STACKTOP=sp;return $107;
  default: assert(0, "bad label: " + label);
 }

}


function _regc($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $b=(($0)&255);
 $2=$b;
 var $3=HEAP32[((42552)>>2)];
 var $4=($3|0)!=42544;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$2;
 var $7=HEAP32[((42552)>>2)];
 var $8=(($7+1)|0);
 HEAP32[((42552)>>2)]=$8;
 HEAP8[($7)]=$6;
 label=4;break;
 case 3: 
 var $10=HEAP32[((42504)>>2)];
 var $11=((($10)+(1))|0);
 HEAP32[((42504)>>2)]=$11;
 label=4;break;
 case 4: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _reg($paren,$flagp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $ret;
 var $br;
 var $ender;
 var $parno;
 var $flags=sp;
 $2=$paren;
 $3=$flagp;
 $parno=0;
 var $4=$3;
 HEAP32[(($4)>>2)]=1;
 var $5=$2;
 var $6=($5|0)!=0;
 if($6){label=2;break;}else{label=5;break;}
 case 2: 
 var $8=HEAP32[((42520)>>2)];
 var $9=($8|0)>=10;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 _raise_error(56,0,4152,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=37;break;
 case 4: 
 var $12=HEAP32[((42520)>>2)];
 $parno=$12;
 var $13=HEAP32[((42520)>>2)];
 var $14=((($13)+(1))|0);
 HEAP32[((42520)>>2)]=$14;
 var $15=$parno;
 var $16=((($15)+(20))|0);
 var $17=_regnode($16);
 $ret=$17;
 label=6;break;
 case 5: 
 $ret=0;
 label=6;break;
 case 6: 
 var $20=_regbranch($flags);
 $br=$20;
 var $21=$br;
 var $22=($21|0)==0;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=37;break;
 case 8: 
 var $25=$ret;
 var $26=($25|0)!=0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $28=$ret;
 var $29=$br;
 _regtail($28,$29);
 label=11;break;
 case 10: 
 var $31=$br;
 $ret=$31;
 label=11;break;
 case 11: 
 var $33=HEAP32[(($flags)>>2)];
 var $34=$33&1;
 var $35=($34|0)!=0;
 if($35){label=13;break;}else{label=12;break;}
 case 12: 
 var $37=$3;
 var $38=HEAP32[(($37)>>2)];
 var $39=$38&-2;
 HEAP32[(($37)>>2)]=$39;
 label=13;break;
 case 13: 
 var $41=HEAP32[(($flags)>>2)];
 var $42=$41&4;
 var $43=$3;
 var $44=HEAP32[(($43)>>2)];
 var $45=$44|$42;
 HEAP32[(($43)>>2)]=$45;
 label=14;break;
 case 14: 
 var $47=HEAP32[((42512)>>2)];
 var $48=HEAP8[($47)];
 var $49=(($48<<24)>>24);
 var $50=($49|0)==124;
 if($50){label=15;break;}else{label=20;break;}
 case 15: 
 var $52=HEAP32[((42512)>>2)];
 var $53=(($52+1)|0);
 HEAP32[((42512)>>2)]=$53;
 var $54=_regbranch($flags);
 $br=$54;
 var $55=$br;
 var $56=($55|0)==0;
 if($56){label=16;break;}else{label=17;break;}
 case 16: 
 $1=0;
 label=37;break;
 case 17: 
 var $59=$ret;
 var $60=$br;
 _regtail($59,$60);
 var $61=HEAP32[(($flags)>>2)];
 var $62=$61&1;
 var $63=($62|0)!=0;
 if($63){label=19;break;}else{label=18;break;}
 case 18: 
 var $65=$3;
 var $66=HEAP32[(($65)>>2)];
 var $67=$66&-2;
 HEAP32[(($65)>>2)]=$67;
 label=19;break;
 case 19: 
 var $69=HEAP32[(($flags)>>2)];
 var $70=$69&4;
 var $71=$3;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72|$70;
 HEAP32[(($71)>>2)]=$73;
 label=14;break;
 case 20: 
 var $75=$2;
 var $76=($75|0)!=0;
 if($76){label=21;break;}else{label=22;break;}
 case 21: 
 var $78=$parno;
 var $79=((($78)+(30))|0);
 var $82=$79;label=23;break;
 case 22: 
 var $82=0;label=23;break;
 case 23: 
 var $82;
 var $83=_regnode($82);
 $ender=$83;
 var $84=$ret;
 var $85=$ender;
 _regtail($84,$85);
 var $86=$ret;
 $br=$86;
 label=24;break;
 case 24: 
 var $88=$br;
 var $89=($88|0)!=0;
 if($89){label=25;break;}else{label=27;break;}
 case 25: 
 var $91=$br;
 var $92=$ender;
 _regoptail($91,$92);
 label=26;break;
 case 26: 
 var $94=$br;
 var $95=_regnext($94);
 $br=$95;
 label=24;break;
 case 27: 
 var $97=$2;
 var $98=($97|0)!=0;
 if($98){label=28;break;}else{label=30;break;}
 case 28: 
 var $100=HEAP32[((42512)>>2)];
 var $101=(($100+1)|0);
 HEAP32[((42512)>>2)]=$101;
 var $102=HEAP8[($100)];
 var $103=(($102<<24)>>24);
 var $104=($103|0)!=41;
 if($104){label=29;break;}else{label=30;break;}
 case 29: 
 _raise_error(56,0,2624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=37;break;
 case 30: 
 var $107=$2;
 var $108=($107|0)!=0;
 if($108){label=35;break;}else{label=31;break;}
 case 31: 
 var $110=HEAP32[((42512)>>2)];
 var $111=HEAP8[($110)];
 var $112=(($111<<24)>>24);
 var $113=($112|0)!=0;
 if($113){label=32;break;}else{label=35;break;}
 case 32: 
 var $115=HEAP32[((42512)>>2)];
 var $116=HEAP8[($115)];
 var $117=(($116<<24)>>24);
 var $118=($117|0)==41;
 if($118){label=33;break;}else{label=34;break;}
 case 33: 
 _raise_error(56,0,2624,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=37;break;
 case 34: 
 _raise_error(56,0,30600,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=37;break;
 case 35: 
 label=36;break;
 case 36: 
 var $123=$ret;
 $1=$123;
 label=37;break;
 case 37: 
 var $125=$1;
 STACKTOP=sp;return $125;
  default: assert(0, "bad label: " + label);
 }

}


function _regnext($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $offset;
 $2=$p;
 var $3=$2;
 var $4=($3|0)==42544;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=8;break;
 case 3: 
 var $7=$2;
 var $8=(($7+1)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24);
 var $11=$10&255;
 var $12=$11<<8;
 var $13=$2;
 var $14=(($13+2)|0);
 var $15=HEAP8[($14)];
 var $16=(($15<<24)>>24);
 var $17=$16&255;
 var $18=((($12)+($17))|0);
 $offset=$18;
 var $19=$offset;
 var $20=($19|0)==0;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 $1=0;
 label=8;break;
 case 5: 
 var $23=$2;
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 var $26=($25|0)==7;
 if($26){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=$2;
 var $29=$offset;
 var $30=(((-$29))|0);
 var $31=(($28+$30)|0);
 $1=$31;
 label=8;break;
 case 7: 
 var $33=$2;
 var $34=$offset;
 var $35=(($33+$34)|0);
 $1=$35;
 label=8;break;
 case 8: 
 var $37=$1;
 STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }

}


function _regtry($prog,$string){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $i;
 var $sp;
 var $ep;
 $2=$prog;
 $3=$string;
 var $4=$3;
 HEAP32[((42528)>>2)]=$4;
 var $5=$2;
 var $6=(($5)|0);
 var $7=(($6)|0);
 HEAP32[((42496)>>2)]=$7;
 var $8=$2;
 var $9=(($8+40)|0);
 var $10=(($9)|0);
 HEAP32[((42536)>>2)]=$10;
 var $11=$2;
 var $12=(($11)|0);
 var $13=(($12)|0);
 $sp=$13;
 var $14=$2;
 var $15=(($14+40)|0);
 var $16=(($15)|0);
 $ep=$16;
 $i=10;
 label=2;break;
 case 2: 
 var $18=$i;
 var $19=($18|0)>0;
 if($19){label=3;break;}else{label=5;break;}
 case 3: 
 var $21=$sp;
 var $22=(($21+4)|0);
 $sp=$22;
 HEAP32[(($21)>>2)]=0;
 var $23=$ep;
 var $24=(($23+4)|0);
 $ep=$24;
 HEAP32[(($23)>>2)]=0;
 label=4;break;
 case 4: 
 var $26=$i;
 var $27=((($26)-(1))|0);
 $i=$27;
 label=2;break;
 case 5: 
 var $29=$2;
 var $30=(($29+92)|0);
 var $31=(($30)|0);
 var $32=(($31+1)|0);
 var $33=_regmatch($32);
 var $34=($33|0)!=0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $36=$3;
 var $37=$2;
 var $38=(($37)|0);
 var $39=(($38)|0);
 HEAP32[(($39)>>2)]=$36;
 var $40=HEAP32[((42528)>>2)];
 var $41=$2;
 var $42=(($41+40)|0);
 var $43=(($42)|0);
 HEAP32[(($43)>>2)]=$40;
 $1=1;
 label=8;break;
 case 7: 
 $1=0;
 label=8;break;
 case 8: 
 var $46=$1;
 STACKTOP=sp;return $46;
  default: assert(0, "bad label: " + label);
 }

}


function _regnode($0){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $ret;
 var $ptr;
 var $op=(($0)&255);
 $3=$op;
 var $4=HEAP32[((42552)>>2)];
 $ret=$4;
 var $5=$ret;
 var $6=($5|0)==42544;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=HEAP32[((42504)>>2)];
 var $9=((($8)+(3))|0);
 HEAP32[((42504)>>2)]=$9;
 var $10=$ret;
 $2=$10;
 label=4;break;
 case 3: 
 var $12=$ret;
 $ptr=$12;
 var $13=$3;
 var $14=$ptr;
 var $15=(($14+1)|0);
 $ptr=$15;
 HEAP8[($14)]=$13;
 var $16=$ptr;
 var $17=(($16+1)|0);
 $ptr=$17;
 HEAP8[($16)]=0;
 var $18=$ptr;
 var $19=(($18+1)|0);
 $ptr=$19;
 HEAP8[($18)]=0;
 var $20=$ptr;
 HEAP32[((42552)>>2)]=$20;
 var $21=$ret;
 $2=$21;
 label=4;break;
 case 4: 
 var $23=$2;
 STACKTOP=sp;return $23;
  default: assert(0, "bad label: " + label);
 }

}


function _regbranch($flagp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 var $chain;
 var $latest;
 var $flags=sp;
 $2=$flagp;
 var $3=$2;
 HEAP32[(($3)>>2)]=0;
 var $4=_regnode(6);
 $ret=$4;
 $chain=0;
 label=2;break;
 case 2: 
 var $6=HEAP32[((42512)>>2)];
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24);
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{var $21=0;label=5;break;}
 case 3: 
 var $11=HEAP32[((42512)>>2)];
 var $12=HEAP8[($11)];
 var $13=(($12<<24)>>24);
 var $14=($13|0)!=124;
 if($14){label=4;break;}else{var $21=0;label=5;break;}
 case 4: 
 var $16=HEAP32[((42512)>>2)];
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 var $19=($18|0)!=41;
 var $21=$19;label=5;break;
 case 5: 
 var $21;
 if($21){label=6;break;}else{label=12;break;}
 case 6: 
 var $23=_regpiece($flags);
 $latest=$23;
 var $24=$latest;
 var $25=($24|0)==0;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=15;break;
 case 8: 
 var $28=HEAP32[(($flags)>>2)];
 var $29=$28&1;
 var $30=$2;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31|$29;
 HEAP32[(($30)>>2)]=$32;
 var $33=$chain;
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=HEAP32[(($flags)>>2)];
 var $37=$36&4;
 var $38=$2;
 var $39=HEAP32[(($38)>>2)];
 var $40=$39|$37;
 HEAP32[(($38)>>2)]=$40;
 label=11;break;
 case 10: 
 var $42=$chain;
 var $43=$latest;
 _regtail($42,$43);
 label=11;break;
 case 11: 
 var $45=$latest;
 $chain=$45;
 label=2;break;
 case 12: 
 var $47=$chain;
 var $48=($47|0)==0;
 if($48){label=13;break;}else{label=14;break;}
 case 13: 
 var $50=_regnode(9);
 label=14;break;
 case 14: 
 var $52=$ret;
 $1=$52;
 label=15;break;
 case 15: 
 var $54=$1;
 STACKTOP=sp;return $54;
  default: assert(0, "bad label: " + label);
 }

}


function _regtail($p,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $scan;
 var $temp;
 var $offset;
 $1=$p;
 $2=$val;
 var $3=$1;
 var $4=($3|0)==42544;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 label=11;break;
 case 3: 
 var $7=$1;
 $scan=$7;
 label=4;break;
 case 4: 
 var $9=$scan;
 var $10=_regnext($9);
 $temp=$10;
 var $11=$temp;
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 label=7;break;
 case 6: 
 var $15=$temp;
 $scan=$15;
 label=4;break;
 case 7: 
 var $17=$scan;
 var $18=HEAP8[($17)];
 var $19=(($18<<24)>>24);
 var $20=($19|0)==7;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 var $22=$scan;
 var $23=$2;
 var $24=$22;
 var $25=$23;
 var $26=((($24)-($25))|0);
 $offset=$26;
 label=10;break;
 case 9: 
 var $28=$2;
 var $29=$scan;
 var $30=$28;
 var $31=$29;
 var $32=((($30)-($31))|0);
 $offset=$32;
 label=10;break;
 case 10: 
 var $34=$offset;
 var $35=$34>>8;
 var $36=$35&255;
 var $37=(($36)&255);
 var $38=$scan;
 var $39=(($38+1)|0);
 HEAP8[($39)]=$37;
 var $40=$offset;
 var $41=$40&255;
 var $42=(($41)&255);
 var $43=$scan;
 var $44=(($43+2)|0);
 HEAP8[($44)]=$42;
 label=11;break;
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _regoptail($p,$val){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $1=$p;
 $2=$val;
 var $3=$1;
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=$1;
 var $7=($6|0)==42544;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$1;
 var $10=HEAP8[($9)];
 var $11=(($10<<24)>>24);
 var $12=($11|0)!=6;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 label=6;break;
 case 5: 
 var $15=$1;
 var $16=(($15+3)|0);
 var $17=$2;
 _regtail($16,$17);
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _regmatch($prog){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $scan;
 var $next;
 var $len;
 var $opnd;
 var $no;
 var $save;
 var $no1;
 var $save2;
 var $save3;
 var $nextch;
 var $no4;
 var $save5;
 var $min;
 $2=$prog;
 var $3=$2;
 $scan=$3;
 label=2;break;
 case 2: 
 var $5=$scan;
 var $6=($5|0)!=0;
 if($6){label=3;break;}else{label=64;break;}
 case 3: 
 var $8=$scan;
 var $9=_regnext($8);
 $next=$9;
 var $10=$scan;
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24);
 switch(($12|0)){case 3:{ label=10;break;}case 8:{ label=13;break;}case 4:{ label=19;break;}case 5:{ label=23;break;}case 9:{ label=27;break;}case 7:{ label=28;break;}case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:{ label=29;break;}case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:{ label=34;break;}case 6:{ label=39;break;}case 1:{ label=4;break;}case 10:case 11:{ label=50;break;}case 0:{ label=61;break;}case 2:{ label=7;break;}default:{label=62;break;}}break;
 case 4: 
 var $14=HEAP32[((42528)>>2)];
 var $15=HEAP32[((42560)>>2)];
 var $16=($14|0)!=($15|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 $1=0;
 label=65;break;
 case 6: 
 label=63;break;
 case 7: 
 var $20=HEAP32[((42528)>>2)];
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24);
 var $23=($22|0)!=0;
 if($23){label=8;break;}else{label=9;break;}
 case 8: 
 $1=0;
 label=65;break;
 case 9: 
 label=63;break;
 case 10: 
 var $27=HEAP32[((42528)>>2)];
 var $28=HEAP8[($27)];
 var $29=(($28<<24)>>24);
 var $30=($29|0)==0;
 if($30){label=11;break;}else{label=12;break;}
 case 11: 
 $1=0;
 label=65;break;
 case 12: 
 var $33=HEAP32[((42528)>>2)];
 var $34=(($33+1)|0);
 HEAP32[((42528)>>2)]=$34;
 label=63;break;
 case 13: 
 var $36=$scan;
 var $37=(($36+3)|0);
 $opnd=$37;
 var $38=$opnd;
 var $39=HEAP8[($38)];
 var $40=(($39<<24)>>24);
 var $41=HEAP32[((42528)>>2)];
 var $42=HEAP8[($41)];
 var $43=(($42<<24)>>24);
 var $44=($40|0)!=($43|0);
 if($44){label=14;break;}else{label=15;break;}
 case 14: 
 $1=0;
 label=65;break;
 case 15: 
 var $47=$opnd;
 var $48=_strlen($47);
 $len=$48;
 var $49=$len;
 var $50=($49|0)>1;
 if($50){label=16;break;}else{label=18;break;}
 case 16: 
 var $52=$opnd;
 var $53=HEAP32[((42528)>>2)];
 var $54=$len;
 var $55=_strncmp($52,$53,$54);
 var $56=($55|0)!=0;
 if($56){label=17;break;}else{label=18;break;}
 case 17: 
 $1=0;
 label=65;break;
 case 18: 
 var $59=$len;
 var $60=HEAP32[((42528)>>2)];
 var $61=(($60+$59)|0);
 HEAP32[((42528)>>2)]=$61;
 label=63;break;
 case 19: 
 var $63=HEAP32[((42528)>>2)];
 var $64=HEAP8[($63)];
 var $65=(($64<<24)>>24);
 var $66=($65|0)==0;
 if($66){label=21;break;}else{label=20;break;}
 case 20: 
 var $68=$scan;
 var $69=(($68+3)|0);
 var $70=HEAP32[((42528)>>2)];
 var $71=HEAP8[($70)];
 var $72=(($71<<24)>>24);
 var $73=_strchr($69,$72);
 var $74=($73|0)==0;
 if($74){label=21;break;}else{label=22;break;}
 case 21: 
 $1=0;
 label=65;break;
 case 22: 
 var $77=HEAP32[((42528)>>2)];
 var $78=(($77+1)|0);
 HEAP32[((42528)>>2)]=$78;
 label=63;break;
 case 23: 
 var $80=HEAP32[((42528)>>2)];
 var $81=HEAP8[($80)];
 var $82=(($81<<24)>>24);
 var $83=($82|0)==0;
 if($83){label=25;break;}else{label=24;break;}
 case 24: 
 var $85=$scan;
 var $86=(($85+3)|0);
 var $87=HEAP32[((42528)>>2)];
 var $88=HEAP8[($87)];
 var $89=(($88<<24)>>24);
 var $90=_strchr($86,$89);
 var $91=($90|0)!=0;
 if($91){label=25;break;}else{label=26;break;}
 case 25: 
 $1=0;
 label=65;break;
 case 26: 
 var $94=HEAP32[((42528)>>2)];
 var $95=(($94+1)|0);
 HEAP32[((42528)>>2)]=$95;
 label=63;break;
 case 27: 
 label=63;break;
 case 28: 
 label=63;break;
 case 29: 
 var $99=$scan;
 var $100=HEAP8[($99)];
 var $101=(($100<<24)>>24);
 var $102=((($101)-(20))|0);
 $no=$102;
 var $103=HEAP32[((42528)>>2)];
 $save=$103;
 var $104=$next;
 var $105=_regmatch($104);
 var $106=($105|0)!=0;
 if($106){label=30;break;}else{label=33;break;}
 case 30: 
 var $108=$no;
 var $109=HEAP32[((42496)>>2)];
 var $110=(($109+($108<<2))|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=31;break;}else{label=32;break;}
 case 31: 
 var $114=$save;
 var $115=$no;
 var $116=HEAP32[((42496)>>2)];
 var $117=(($116+($115<<2))|0);
 HEAP32[(($117)>>2)]=$114;
 label=32;break;
 case 32: 
 $1=1;
 label=65;break;
 case 33: 
 $1=0;
 label=65;break;
 case 34: 
 var $121=$scan;
 var $122=HEAP8[($121)];
 var $123=(($122<<24)>>24);
 var $124=((($123)-(30))|0);
 $no1=$124;
 var $125=HEAP32[((42528)>>2)];
 $save2=$125;
 var $126=$next;
 var $127=_regmatch($126);
 var $128=($127|0)!=0;
 if($128){label=35;break;}else{label=38;break;}
 case 35: 
 var $130=$no1;
 var $131=HEAP32[((42536)>>2)];
 var $132=(($131+($130<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($133|0)==0;
 if($134){label=36;break;}else{label=37;break;}
 case 36: 
 var $136=$save2;
 var $137=$no1;
 var $138=HEAP32[((42536)>>2)];
 var $139=(($138+($137<<2))|0);
 HEAP32[(($139)>>2)]=$136;
 label=37;break;
 case 37: 
 $1=1;
 label=65;break;
 case 38: 
 $1=0;
 label=65;break;
 case 39: 
 var $143=$next;
 var $144=HEAP8[($143)];
 var $145=(($144<<24)>>24);
 var $146=($145|0)!=6;
 if($146){label=40;break;}else{label=41;break;}
 case 40: 
 var $148=$scan;
 var $149=(($148+3)|0);
 $next=$149;
 label=49;break;
 case 41: 
 label=42;break;
 case 42: 
 var $152=HEAP32[((42528)>>2)];
 $save3=$152;
 var $153=$scan;
 var $154=(($153+3)|0);
 var $155=_regmatch($154);
 var $156=($155|0)!=0;
 if($156){label=43;break;}else{label=44;break;}
 case 43: 
 $1=1;
 label=65;break;
 case 44: 
 var $159=$save3;
 HEAP32[((42528)>>2)]=$159;
 var $160=$scan;
 var $161=_regnext($160);
 $scan=$161;
 label=45;break;
 case 45: 
 var $163=$scan;
 var $164=($163|0)!=0;
 if($164){label=46;break;}else{var $171=0;label=47;break;}
 case 46: 
 var $166=$scan;
 var $167=HEAP8[($166)];
 var $168=(($167<<24)>>24);
 var $169=($168|0)==6;
 var $171=$169;label=47;break;
 case 47: 
 var $171;
 if($171){label=42;break;}else{label=48;break;}
 case 48: 
 $1=0;
 label=65;break;
 case 49: 
 label=63;break;
 case 50: 
 $nextch=0;
 var $175=$next;
 var $176=HEAP8[($175)];
 var $177=(($176<<24)>>24);
 var $178=($177|0)==8;
 if($178){label=51;break;}else{label=52;break;}
 case 51: 
 var $180=$next;
 var $181=(($180+3)|0);
 var $182=HEAP8[($181)];
 $nextch=$182;
 label=52;break;
 case 52: 
 var $184=$scan;
 var $185=HEAP8[($184)];
 var $186=(($185<<24)>>24);
 var $187=($186|0)==10;
 var $188=($187?0:1);
 $min=$188;
 var $189=HEAP32[((42528)>>2)];
 $save5=$189;
 var $190=$scan;
 var $191=(($190+3)|0);
 var $192=_regrepeat($191);
 $no4=$192;
 label=53;break;
 case 53: 
 var $194=$no4;
 var $195=$min;
 var $196=($194|0)>=($195|0);
 if($196){label=54;break;}else{label=60;break;}
 case 54: 
 var $198=$nextch;
 var $199=(($198<<24)>>24);
 var $200=($199|0)==0;
 if($200){label=56;break;}else{label=55;break;}
 case 55: 
 var $202=HEAP32[((42528)>>2)];
 var $203=HEAP8[($202)];
 var $204=(($203<<24)>>24);
 var $205=$nextch;
 var $206=(($205<<24)>>24);
 var $207=($204|0)==($206|0);
 if($207){label=56;break;}else{label=59;break;}
 case 56: 
 var $209=$next;
 var $210=_regmatch($209);
 var $211=($210|0)!=0;
 if($211){label=57;break;}else{label=58;break;}
 case 57: 
 $1=1;
 label=65;break;
 case 58: 
 label=59;break;
 case 59: 
 var $215=$no4;
 var $216=((($215)-(1))|0);
 $no4=$216;
 var $217=$save5;
 var $218=$no4;
 var $219=(($217+$218)|0);
 HEAP32[((42528)>>2)]=$219;
 label=53;break;
 case 60: 
 $1=0;
 label=65;break;
 case 61: 
 $1=1;
 label=65;break;
 case 62: 
 _raise_error(56,0,11832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=65;break;
 case 63: 
 var $224=$next;
 $scan=$224;
 label=2;break;
 case 64: 
 _raise_error(56,0,8888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=65;break;
 case 65: 
 var $227=$1;
 STACKTOP=sp;return $227;
  default: assert(0, "bad label: " + label);
 }

}


function _regpiece($flagp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 var $op;
 var $next;
 var $flags=sp;
 $2=$flagp;
 var $3=_regatom($flags);
 $ret=$3;
 var $4=$ret;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 $1=0;
 label=31;break;
 case 3: 
 var $8=HEAP32[((42512)>>2)];
 var $9=HEAP8[($8)];
 $op=$9;
 var $10=$op;
 var $11=(($10<<24)>>24);
 var $12=($11|0)==42;
 if($12){label=7;break;}else{label=4;break;}
 case 4: 
 var $14=$op;
 var $15=(($14<<24)>>24);
 var $16=($15|0)==43;
 if($16){label=7;break;}else{label=5;break;}
 case 5: 
 var $18=$op;
 var $19=(($18<<24)>>24);
 var $20=($19|0)==63;
 if($20){label=7;break;}else{label=6;break;}
 case 6: 
 var $22=HEAP32[(($flags)>>2)];
 var $23=$2;
 HEAP32[(($23)>>2)]=$22;
 var $24=$ret;
 $1=$24;
 label=31;break;
 case 7: 
 var $26=HEAP32[(($flags)>>2)];
 var $27=$26&1;
 var $28=($27|0)!=0;
 if($28){label=10;break;}else{label=8;break;}
 case 8: 
 var $30=$op;
 var $31=(($30<<24)>>24);
 var $32=($31|0)!=63;
 if($32){label=9;break;}else{label=10;break;}
 case 9: 
 _raise_error(56,0,29112,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=31;break;
 case 10: 
 var $35=$op;
 var $36=(($35<<24)>>24);
 var $37=($36|0)!=43;
 var $38=($37?4:1);
 var $39=$2;
 HEAP32[(($39)>>2)]=$38;
 var $40=$op;
 var $41=(($40<<24)>>24);
 var $42=($41|0)==42;
 if($42){label=11;break;}else{label=13;break;}
 case 11: 
 var $44=HEAP32[(($flags)>>2)];
 var $45=$44&2;
 var $46=($45|0)!=0;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $48=$ret;
 _reginsert(10,$48);
 label=26;break;
 case 13: 
 var $50=$op;
 var $51=(($50<<24)>>24);
 var $52=($51|0)==42;
 if($52){label=14;break;}else{label=15;break;}
 case 14: 
 var $54=$ret;
 _reginsert(6,$54);
 var $55=$ret;
 var $56=_regnode(7);
 _regoptail($55,$56);
 var $57=$ret;
 var $58=$ret;
 _regoptail($57,$58);
 var $59=$ret;
 var $60=_regnode(6);
 _regtail($59,$60);
 var $61=$ret;
 var $62=_regnode(9);
 _regtail($61,$62);
 label=25;break;
 case 15: 
 var $64=$op;
 var $65=(($64<<24)>>24);
 var $66=($65|0)==43;
 if($66){label=16;break;}else{label=18;break;}
 case 16: 
 var $68=HEAP32[(($flags)>>2)];
 var $69=$68&2;
 var $70=($69|0)!=0;
 if($70){label=17;break;}else{label=18;break;}
 case 17: 
 var $72=$ret;
 _reginsert(11,$72);
 label=24;break;
 case 18: 
 var $74=$op;
 var $75=(($74<<24)>>24);
 var $76=($75|0)==43;
 if($76){label=19;break;}else{label=20;break;}
 case 19: 
 var $78=_regnode(6);
 $next=$78;
 var $79=$ret;
 var $80=$next;
 _regtail($79,$80);
 var $81=_regnode(7);
 var $82=$ret;
 _regtail($81,$82);
 var $83=$next;
 var $84=_regnode(6);
 _regtail($83,$84);
 var $85=$ret;
 var $86=_regnode(9);
 _regtail($85,$86);
 label=23;break;
 case 20: 
 var $88=$op;
 var $89=(($88<<24)>>24);
 var $90=($89|0)==63;
 if($90){label=21;break;}else{label=22;break;}
 case 21: 
 var $92=$ret;
 _reginsert(6,$92);
 var $93=$ret;
 var $94=_regnode(6);
 _regtail($93,$94);
 var $95=_regnode(9);
 $next=$95;
 var $96=$ret;
 var $97=$next;
 _regtail($96,$97);
 var $98=$ret;
 var $99=$next;
 _regoptail($98,$99);
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 label=26;break;
 case 26: 
 var $105=HEAP32[((42512)>>2)];
 var $106=(($105+1)|0);
 HEAP32[((42512)>>2)]=$106;
 var $107=HEAP32[((42512)>>2)];
 var $108=HEAP8[($107)];
 var $109=(($108<<24)>>24);
 var $110=($109|0)==42;
 if($110){label=29;break;}else{label=27;break;}
 case 27: 
 var $112=HEAP32[((42512)>>2)];
 var $113=HEAP8[($112)];
 var $114=(($113<<24)>>24);
 var $115=($114|0)==43;
 if($115){label=29;break;}else{label=28;break;}
 case 28: 
 var $117=HEAP32[((42512)>>2)];
 var $118=HEAP8[($117)];
 var $119=(($118<<24)>>24);
 var $120=($119|0)==63;
 if($120){label=29;break;}else{label=30;break;}
 case 29: 
 _raise_error(56,0,27736,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=31;break;
 case 30: 
 var $123=$ret;
 $1=$123;
 label=31;break;
 case 31: 
 var $125=$1;
 STACKTOP=sp;return $125;
  default: assert(0, "bad label: " + label);
 }

}


function _regrepeat($p){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $count;
 var $scan;
 var $opnd;
 $1=$p;
 $count=0;
 var $2=HEAP32[((42528)>>2)];
 $scan=$2;
 var $3=$1;
 var $4=(($3+3)|0);
 $opnd=$4;
 var $5=$1;
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24);
 if(($7|0)==5){ label=13;break;}else if(($7|0)==3){ label=2;break;}else if(($7|0)==8){ label=3;break;}else if(($7|0)==4){ label=7;break;}else{label=19;break;}
 case 2: 
 var $9=$scan;
 var $10=_strlen($9);
 $count=$10;
 var $11=$count;
 var $12=$scan;
 var $13=(($12+$11)|0);
 $scan=$13;
 label=20;break;
 case 3: 
 label=4;break;
 case 4: 
 var $16=$opnd;
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24);
 var $19=$scan;
 var $20=HEAP8[($19)];
 var $21=(($20<<24)>>24);
 var $22=($18|0)==($21|0);
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=$count;
 var $25=((($24)+(1))|0);
 $count=$25;
 var $26=$scan;
 var $27=(($26+1)|0);
 $scan=$27;
 label=4;break;
 case 6: 
 label=20;break;
 case 7: 
 label=8;break;
 case 8: 
 var $31=$scan;
 var $32=HEAP8[($31)];
 var $33=(($32<<24)>>24);
 var $34=($33|0)!=0;
 if($34){label=9;break;}else{var $43=0;label=10;break;}
 case 9: 
 var $36=$opnd;
 var $37=$scan;
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=_strchr($36,$39);
 var $41=($40|0)!=0;
 var $43=$41;label=10;break;
 case 10: 
 var $43;
 if($43){label=11;break;}else{label=12;break;}
 case 11: 
 var $45=$count;
 var $46=((($45)+(1))|0);
 $count=$46;
 var $47=$scan;
 var $48=(($47+1)|0);
 $scan=$48;
 label=8;break;
 case 12: 
 label=20;break;
 case 13: 
 label=14;break;
 case 14: 
 var $52=$scan;
 var $53=HEAP8[($52)];
 var $54=(($53<<24)>>24);
 var $55=($54|0)!=0;
 if($55){label=15;break;}else{var $64=0;label=16;break;}
 case 15: 
 var $57=$opnd;
 var $58=$scan;
 var $59=HEAP8[($58)];
 var $60=(($59<<24)>>24);
 var $61=_strchr($57,$60);
 var $62=($61|0)==0;
 var $64=$62;label=16;break;
 case 16: 
 var $64;
 if($64){label=17;break;}else{label=18;break;}
 case 17: 
 var $66=$count;
 var $67=((($66)+(1))|0);
 $count=$67;
 var $68=$scan;
 var $69=(($68+1)|0);
 $scan=$69;
 label=14;break;
 case 18: 
 label=20;break;
 case 19: 
 _raise_error(56,0,6512,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $count=0;
 label=20;break;
 case 20: 
 var $73=$scan;
 HEAP32[((42528)>>2)]=$73;
 var $74=$count;
 STACKTOP=sp;return $74;
  default: assert(0, "bad label: " + label);
 }

}


function _regatom($flagp){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $ret;
 var $flags=sp;
 var $class;
 var $classend;
 var $len;
 var $ender;
 $2=$flagp;
 var $3=$2;
 HEAP32[(($3)>>2)]=0;
 var $4=HEAP32[((42512)>>2)];
 var $5=(($4+1)|0);
 HEAP32[((42512)>>2)]=$5;
 var $6=HEAP8[($4)];
 var $7=(($6<<24)>>24);
 switch(($7|0)){case 94:{ label=2;break;}case 36:{ label=3;break;}case 40:{ label=32;break;}case 0:case 124:case 41:{ label=35;break;}case 63:case 43:case 42:{ label=36;break;}case 92:{ label=37;break;}case 46:{ label=4;break;}case 91:{ label=5;break;}default:{label=40;break;}}break;
 case 2: 
 var $9=_regnode(1);
 $ret=$9;
 label=53;break;
 case 3: 
 var $11=_regnode(2);
 $ret=$11;
 label=53;break;
 case 4: 
 var $13=_regnode(3);
 $ret=$13;
 var $14=$2;
 var $15=HEAP32[(($14)>>2)];
 var $16=$15|3;
 HEAP32[(($14)>>2)]=$16;
 label=53;break;
 case 5: 
 var $18=HEAP32[((42512)>>2)];
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 var $21=($20|0)==94;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=_regnode(5);
 $ret=$23;
 var $24=HEAP32[((42512)>>2)];
 var $25=(($24+1)|0);
 HEAP32[((42512)>>2)]=$25;
 label=8;break;
 case 7: 
 var $27=_regnode(4);
 $ret=$27;
 label=8;break;
 case 8: 
 var $29=HEAP32[((42512)>>2)];
 var $30=HEAP8[($29)];
 var $31=(($30<<24)>>24);
 var $32=($31|0)==93;
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $34=HEAP32[((42512)>>2)];
 var $35=HEAP8[($34)];
 var $36=(($35<<24)>>24);
 var $37=($36|0)==45;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=HEAP32[((42512)>>2)];
 var $40=(($39+1)|0);
 HEAP32[((42512)>>2)]=$40;
 var $41=HEAP8[($39)];
 var $42=(($41<<24)>>24);
 _regc($42);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $45=HEAP32[((42512)>>2)];
 var $46=HEAP8[($45)];
 var $47=(($46<<24)>>24);
 var $48=($47|0)!=0;
 if($48){label=13;break;}else{var $55=0;label=14;break;}
 case 13: 
 var $50=HEAP32[((42512)>>2)];
 var $51=HEAP8[($50)];
 var $52=(($51<<24)>>24);
 var $53=($52|0)!=93;
 var $55=$53;label=14;break;
 case 14: 
 var $55;
 if($55){label=15;break;}else{label=29;break;}
 case 15: 
 var $57=HEAP32[((42512)>>2)];
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24);
 var $60=($59|0)==45;
 if($60){label=16;break;}else{label=27;break;}
 case 16: 
 var $62=HEAP32[((42512)>>2)];
 var $63=(($62+1)|0);
 HEAP32[((42512)>>2)]=$63;
 var $64=HEAP32[((42512)>>2)];
 var $65=HEAP8[($64)];
 var $66=(($65<<24)>>24);
 var $67=($66|0)==93;
 if($67){label=18;break;}else{label=17;break;}
 case 17: 
 var $69=HEAP32[((42512)>>2)];
 var $70=HEAP8[($69)];
 var $71=(($70<<24)>>24);
 var $72=($71|0)==0;
 if($72){label=18;break;}else{label=19;break;}
 case 18: 
 _regc(45);
 label=26;break;
 case 19: 
 var $75=HEAP32[((42512)>>2)];
 var $76=((($75)-(2))|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=((($78)+(1))|0);
 $class=$79;
 var $80=HEAP32[((42512)>>2)];
 var $81=HEAP8[($80)];
 var $82=($81&255);
 $classend=$82;
 var $83=$class;
 var $84=$classend;
 var $85=((($84)+(1))|0);
 var $86=($83|0)>($85|0);
 if($86){label=20;break;}else{label=21;break;}
 case 20: 
 _raise_error(56,0,26888,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=54;break;
 case 21: 
 label=22;break;
 case 22: 
 var $90=$class;
 var $91=$classend;
 var $92=($90|0)<=($91|0);
 if($92){label=23;break;}else{label=25;break;}
 case 23: 
 var $94=$class;
 _regc($94);
 label=24;break;
 case 24: 
 var $96=$class;
 var $97=((($96)+(1))|0);
 $class=$97;
 label=22;break;
 case 25: 
 var $99=HEAP32[((42512)>>2)];
 var $100=(($99+1)|0);
 HEAP32[((42512)>>2)]=$100;
 label=26;break;
 case 26: 
 label=28;break;
 case 27: 
 var $103=HEAP32[((42512)>>2)];
 var $104=(($103+1)|0);
 HEAP32[((42512)>>2)]=$104;
 var $105=HEAP8[($103)];
 var $106=(($105<<24)>>24);
 _regc($106);
 label=28;break;
 case 28: 
 label=12;break;
 case 29: 
 _regc(0);
 var $109=HEAP32[((42512)>>2)];
 var $110=HEAP8[($109)];
 var $111=(($110<<24)>>24);
 var $112=($111|0)!=93;
 if($112){label=30;break;}else{label=31;break;}
 case 30: 
 _raise_error(56,0,25896,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=54;break;
 case 31: 
 var $115=HEAP32[((42512)>>2)];
 var $116=(($115+1)|0);
 HEAP32[((42512)>>2)]=$116;
 var $117=$2;
 var $118=HEAP32[(($117)>>2)];
 var $119=$118|3;
 HEAP32[(($117)>>2)]=$119;
 label=53;break;
 case 32: 
 var $121=_reg(1,$flags);
 $ret=$121;
 var $122=$ret;
 var $123=($122|0)==0;
 if($123){label=33;break;}else{label=34;break;}
 case 33: 
 $1=0;
 label=54;break;
 case 34: 
 var $126=HEAP32[(($flags)>>2)];
 var $127=$126&5;
 var $128=$2;
 var $129=HEAP32[(($128)>>2)];
 var $130=$129|$127;
 HEAP32[(($128)>>2)]=$130;
 label=53;break;
 case 35: 
 _raise_error(56,0,25064,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=54;break;
 case 36: 
 _raise_error(56,0,24480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=54;break;
 case 37: 
 var $134=HEAP32[((42512)>>2)];
 var $135=HEAP8[($134)];
 var $136=(($135<<24)>>24);
 var $137=($136|0)==0;
 if($137){label=38;break;}else{label=39;break;}
 case 38: 
 _raise_error(56,0,23800,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=54;break;
 case 39: 
 var $140=_regnode(8);
 $ret=$140;
 var $141=HEAP32[((42512)>>2)];
 var $142=(($141+1)|0);
 HEAP32[((42512)>>2)]=$142;
 var $143=HEAP8[($141)];
 var $144=(($143<<24)>>24);
 _regc($144);
 _regc(0);
 var $145=$2;
 var $146=HEAP32[(($145)>>2)];
 var $147=$146|3;
 HEAP32[(($145)>>2)]=$147;
 label=53;break;
 case 40: 
 var $149=HEAP32[((42512)>>2)];
 var $150=((($149)-(1))|0);
 HEAP32[((42512)>>2)]=$150;
 var $151=HEAP32[((42512)>>2)];
 var $152=_strcspn($151,23344);
 $len=$152;
 var $153=$len;
 var $154=($153|0)<=0;
 if($154){label=41;break;}else{label=42;break;}
 case 41: 
 _raise_error(56,0,22992,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 $1=0;
 label=54;break;
 case 42: 
 var $157=HEAP32[((42512)>>2)];
 var $158=$len;
 var $159=(($157+$158)|0);
 var $160=HEAP8[($159)];
 $ender=$160;
 var $161=$len;
 var $162=($161|0)>1;
 if($162){label=43;break;}else{label=47;break;}
 case 43: 
 var $164=$ender;
 var $165=(($164<<24)>>24);
 var $166=($165|0)==42;
 if($166){label=46;break;}else{label=44;break;}
 case 44: 
 var $168=$ender;
 var $169=(($168<<24)>>24);
 var $170=($169|0)==43;
 if($170){label=46;break;}else{label=45;break;}
 case 45: 
 var $172=$ender;
 var $173=(($172<<24)>>24);
 var $174=($173|0)==63;
 if($174){label=46;break;}else{label=47;break;}
 case 46: 
 var $176=$len;
 var $177=((($176)-(1))|0);
 $len=$177;
 label=47;break;
 case 47: 
 var $179=$2;
 var $180=HEAP32[(($179)>>2)];
 var $181=$180|1;
 HEAP32[(($179)>>2)]=$181;
 var $182=$len;
 var $183=($182|0)==1;
 if($183){label=48;break;}else{label=49;break;}
 case 48: 
 var $185=$2;
 var $186=HEAP32[(($185)>>2)];
 var $187=$186|2;
 HEAP32[(($185)>>2)]=$187;
 label=49;break;
 case 49: 
 var $189=_regnode(8);
 $ret=$189;
 label=50;break;
 case 50: 
 var $191=$len;
 var $192=($191|0)>0;
 if($192){label=51;break;}else{label=52;break;}
 case 51: 
 var $194=HEAP32[((42512)>>2)];
 var $195=(($194+1)|0);
 HEAP32[((42512)>>2)]=$195;
 var $196=HEAP8[($194)];
 var $197=(($196<<24)>>24);
 _regc($197);
 var $198=$len;
 var $199=((($198)-(1))|0);
 $len=$199;
 label=50;break;
 case 52: 
 _regc(0);
 label=53;break;
 case 53: 
 var $202=$ret;
 $1=$202;
 label=54;break;
 case 54: 
 var $204=$1;
 STACKTOP=sp;return $204;
  default: assert(0, "bad label: " + label);
 }

}


function _reginsert($0,$opnd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2;
 var $3;
 var $src;
 var $dst;
 var $place;
 var $op=(($0)&255);
 $2=$op;
 $3=$opnd;
 var $4=HEAP32[((42552)>>2)];
 var $5=($4|0)==42544;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=HEAP32[((42504)>>2)];
 var $8=((($7)+(3))|0);
 HEAP32[((42504)>>2)]=$8;
 label=7;break;
 case 3: 
 var $10=HEAP32[((42552)>>2)];
 $src=$10;
 var $11=HEAP32[((42552)>>2)];
 var $12=(($11+3)|0);
 HEAP32[((42552)>>2)]=$12;
 var $13=HEAP32[((42552)>>2)];
 $dst=$13;
 label=4;break;
 case 4: 
 var $15=$src;
 var $16=$3;
 var $17=($15>>>0)>($16>>>0);
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$src;
 var $20=((($19)-(1))|0);
 $src=$20;
 var $21=HEAP8[($20)];
 var $22=$dst;
 var $23=((($22)-(1))|0);
 $dst=$23;
 HEAP8[($23)]=$21;
 label=4;break;
 case 6: 
 var $25=$3;
 $place=$25;
 var $26=$2;
 var $27=$place;
 var $28=(($27+1)|0);
 $place=$28;
 HEAP8[($27)]=$26;
 var $29=$place;
 var $30=(($29+1)|0);
 $place=$30;
 HEAP8[($29)]=0;
 var $31=$place;
 var $32=(($31+1)|0);
 $place=$32;
 HEAP8[($31)]=0;
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((51600)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((51640+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((51640+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((51600)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((51616)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((51608)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((51640+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((51640+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((51600)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((51616)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum67=$8|4;
 var $113=(($109+$_sum67)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((51608)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((51620)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((51640+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((51600)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((51600)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre=((51640+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((51640+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((51616)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((51608)>>2)]=$106;
 HEAP32[((51620)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((51604)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((51904+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((51616)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((51904+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((51604)>>2)];
 var $252=$251&$250;
 HEAP32[((51604)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((51616)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((51616)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((51616)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((51616)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i41=$8|4;
 var $311=(($192+$_sum_i41)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((51608)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((51620)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((51640+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((51600)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((51600)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((51640+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((51640+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((51616)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((51608)>>2)]=$rsize_0_i;
 HEAP32[((51620)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $mem_0=$343;label=341;break;
 case 78: 
 var $345=($bytes>>>0)>4294967231;
 if($345){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $347=((($bytes)+(11))|0);
 var $348=$347&-8;
 var $349=HEAP32[((51604)>>2)];
 var $350=($349|0)==0;
 if($350){var $nb_0=$348;label=160;break;}else{label=80;break;}
 case 80: 
 var $352=(((-$348))|0);
 var $353=$347>>>8;
 var $354=($353|0)==0;
 if($354){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $356=($348>>>0)>16777215;
 if($356){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $358=((($353)+(1048320))|0);
 var $359=$358>>>16;
 var $360=$359&8;
 var $361=$353<<$360;
 var $362=((($361)+(520192))|0);
 var $363=$362>>>16;
 var $364=$363&4;
 var $365=$364|$360;
 var $366=$361<<$364;
 var $367=((($366)+(245760))|0);
 var $368=$367>>>16;
 var $369=$368&2;
 var $370=$365|$369;
 var $371=(((14)-($370))|0);
 var $372=$366<<$369;
 var $373=$372>>>15;
 var $374=((($371)+($373))|0);
 var $375=$374<<1;
 var $376=((($374)+(7))|0);
 var $377=$348>>>($376>>>0);
 var $378=$377&1;
 var $379=$378|$375;
 var $idx_0_i=$379;label=83;break;
 case 83: 
 var $idx_0_i;
 var $381=((51904+($idx_0_i<<2))|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=($382|0)==0;
 if($383){var $v_2_i=0;var $rsize_2_i=$352;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $385=($idx_0_i|0)==31;
 if($385){var $390=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $387=$idx_0_i>>>1;
 var $388=(((25)-($387))|0);
 var $390=$388;label=86;break;
 case 86: 
 var $390;
 var $391=$348<<$390;
 var $v_0_i18=0;var $rsize_0_i17=$352;var $t_0_i16=$382;var $sizebits_0_i=$391;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $393=(($t_0_i16+4)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$394&-8;
 var $396=((($395)-($348))|0);
 var $397=($396>>>0)<($rsize_0_i17>>>0);
 if($397){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $399=($395|0)==($348|0);
 if($399){var $v_2_i=$t_0_i16;var $rsize_2_i=$396;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$396;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $401=(($t_0_i16+20)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=$sizebits_0_i>>>31;
 var $404=(($t_0_i16+16+($403<<2))|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=($402|0)==0;
 var $407=($402|0)==($405|0);
 var $or_cond21_i=$406|$407;
 var $rst_1_i=($or_cond21_i?$rst_0_i:$402);
 var $408=($405|0)==0;
 var $409=$sizebits_0_i<<1;
 if($408){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$405;var $sizebits_0_i=$409;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $410=($t_1_i|0)==0;
 var $411=($v_2_i|0)==0;
 var $or_cond_i=$410&$411;
 if($or_cond_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $413=2<<$idx_0_i;
 var $414=(((-$413))|0);
 var $415=$413|$414;
 var $416=$349&$415;
 var $417=($416|0)==0;
 if($417){var $nb_0=$348;label=160;break;}else{label=92;break;}
 case 92: 
 var $419=(((-$416))|0);
 var $420=$416&$419;
 var $421=((($420)-(1))|0);
 var $422=$421>>>12;
 var $423=$422&16;
 var $424=$421>>>($423>>>0);
 var $425=$424>>>5;
 var $426=$425&8;
 var $427=$426|$423;
 var $428=$424>>>($426>>>0);
 var $429=$428>>>2;
 var $430=$429&4;
 var $431=$427|$430;
 var $432=$428>>>($430>>>0);
 var $433=$432>>>1;
 var $434=$433&2;
 var $435=$431|$434;
 var $436=$432>>>($434>>>0);
 var $437=$436>>>1;
 var $438=$437&1;
 var $439=$435|$438;
 var $440=$436>>>($438>>>0);
 var $441=((($439)+($440))|0);
 var $442=((51904+($441<<2))|0);
 var $443=HEAP32[(($442)>>2)];
 var $t_2_ph_i=$443;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $444=($t_2_ph_i|0)==0;
 if($444){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_232_i=$t_2_ph_i;var $rsize_333_i=$rsize_2_i;var $v_334_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_334_i;
 var $rsize_333_i;
 var $t_232_i;
 var $445=(($t_232_i+4)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=$446&-8;
 var $448=((($447)-($348))|0);
 var $449=($448>>>0)<($rsize_333_i>>>0);
 var $_rsize_3_i=($449?$448:$rsize_333_i);
 var $t_2_v_3_i=($449?$t_232_i:$v_334_i);
 var $450=(($t_232_i+16)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=($451|0)==0;
 if($452){label=95;break;}else{var $t_232_i=$451;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $453=(($t_232_i+20)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=($454|0)==0;
 if($455){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_232_i=$454;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $456=($v_3_lcssa_i|0)==0;
 if($456){var $nb_0=$348;label=160;break;}else{label=97;break;}
 case 97: 
 var $458=HEAP32[((51608)>>2)];
 var $459=((($458)-($348))|0);
 var $460=($rsize_3_lcssa_i>>>0)<($459>>>0);
 if($460){label=98;break;}else{var $nb_0=$348;label=160;break;}
 case 98: 
 var $462=$v_3_lcssa_i;
 var $463=HEAP32[((51616)>>2)];
 var $464=($462>>>0)<($463>>>0);
 if($464){label=158;break;}else{label=99;break;}
 case 99: 
 var $466=(($462+$348)|0);
 var $467=$466;
 var $468=($462>>>0)<($466>>>0);
 if($468){label=100;break;}else{label=158;break;}
 case 100: 
 var $470=(($v_3_lcssa_i+24)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=(($v_3_lcssa_i+12)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($473|0)==($v_3_lcssa_i|0);
 if($474){label=106;break;}else{label=101;break;}
 case 101: 
 var $476=(($v_3_lcssa_i+8)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=$477;
 var $479=($478>>>0)<($463>>>0);
 if($479){label=105;break;}else{label=102;break;}
 case 102: 
 var $481=(($477+12)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=($482|0)==($v_3_lcssa_i|0);
 if($483){label=103;break;}else{label=105;break;}
 case 103: 
 var $485=(($473+8)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=($486|0)==($v_3_lcssa_i|0);
 if($487){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($481)>>2)]=$473;
 HEAP32[(($485)>>2)]=$477;
 var $R_1_i22=$473;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $490=(($v_3_lcssa_i+20)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=($491|0)==0;
 if($492){label=107;break;}else{var $R_0_i20=$491;var $RP_0_i19=$490;label=108;break;}
 case 107: 
 var $494=(($v_3_lcssa_i+16)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=($495|0)==0;
 if($496){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$495;var $RP_0_i19=$494;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $497=(($R_0_i20+20)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=($498|0)==0;
 if($499){label=109;break;}else{var $R_0_i20=$498;var $RP_0_i19=$497;label=108;break;}
 case 109: 
 var $501=(($R_0_i20+16)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=($502|0)==0;
 if($503){label=110;break;}else{var $R_0_i20=$502;var $RP_0_i19=$501;label=108;break;}
 case 110: 
 var $505=$RP_0_i19;
 var $506=($505>>>0)<($463>>>0);
 if($506){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $510=($471|0)==0;
 if($510){label=133;break;}else{label=114;break;}
 case 114: 
 var $512=(($v_3_lcssa_i+28)|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=((51904+($513<<2))|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=($v_3_lcssa_i|0)==($515|0);
 if($516){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($514)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $518=HEAP32[(($512)>>2)];
 var $519=1<<$518;
 var $520=$519^-1;
 var $521=HEAP32[((51604)>>2)];
 var $522=$521&$520;
 HEAP32[((51604)>>2)]=$522;
 label=133;break;
 case 117: 
 var $524=$471;
 var $525=HEAP32[((51616)>>2)];
 var $526=($524>>>0)<($525>>>0);
 if($526){label=121;break;}else{label=118;break;}
 case 118: 
 var $528=(($471+16)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=($529|0)==($v_3_lcssa_i|0);
 if($530){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($528)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $533=(($471+20)|0);
 HEAP32[(($533)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $536=($R_1_i22|0)==0;
 if($536){label=133;break;}else{label=123;break;}
 case 123: 
 var $538=$R_1_i22;
 var $539=HEAP32[((51616)>>2)];
 var $540=($538>>>0)<($539>>>0);
 if($540){label=132;break;}else{label=124;break;}
 case 124: 
 var $542=(($R_1_i22+24)|0);
 HEAP32[(($542)>>2)]=$471;
 var $543=(($v_3_lcssa_i+16)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=($544|0)==0;
 if($545){label=128;break;}else{label=125;break;}
 case 125: 
 var $547=$544;
 var $548=HEAP32[((51616)>>2)];
 var $549=($547>>>0)<($548>>>0);
 if($549){label=127;break;}else{label=126;break;}
 case 126: 
 var $551=(($R_1_i22+16)|0);
 HEAP32[(($551)>>2)]=$544;
 var $552=(($544+24)|0);
 HEAP32[(($552)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $555=(($v_3_lcssa_i+20)|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=($556|0)==0;
 if($557){label=133;break;}else{label=129;break;}
 case 129: 
 var $559=$556;
 var $560=HEAP32[((51616)>>2)];
 var $561=($559>>>0)<($560>>>0);
 if($561){label=131;break;}else{label=130;break;}
 case 130: 
 var $563=(($R_1_i22+20)|0);
 HEAP32[(($563)>>2)]=$556;
 var $564=(($556+24)|0);
 HEAP32[(($564)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $568=($rsize_3_lcssa_i>>>0)<16;
 if($568){label=134;break;}else{label=135;break;}
 case 134: 
 var $570=((($rsize_3_lcssa_i)+($348))|0);
 var $571=$570|3;
 var $572=(($v_3_lcssa_i+4)|0);
 HEAP32[(($572)>>2)]=$571;
 var $_sum19_i=((($570)+(4))|0);
 var $573=(($462+$_sum19_i)|0);
 var $574=$573;
 var $575=HEAP32[(($574)>>2)];
 var $576=$575|1;
 HEAP32[(($574)>>2)]=$576;
 label=159;break;
 case 135: 
 var $578=$348|3;
 var $579=(($v_3_lcssa_i+4)|0);
 HEAP32[(($579)>>2)]=$578;
 var $580=$rsize_3_lcssa_i|1;
 var $_sum_i2540=$348|4;
 var $581=(($462+$_sum_i2540)|0);
 var $582=$581;
 HEAP32[(($582)>>2)]=$580;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
 var $583=(($462+$_sum1_i26)|0);
 var $584=$583;
 HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
 var $585=$rsize_3_lcssa_i>>>3;
 var $586=($rsize_3_lcssa_i>>>0)<256;
 if($586){label=136;break;}else{label=141;break;}
 case 136: 
 var $588=$585<<1;
 var $589=((51640+($588<<2))|0);
 var $590=$589;
 var $591=HEAP32[((51600)>>2)];
 var $592=1<<$585;
 var $593=$591&$592;
 var $594=($593|0)==0;
 if($594){label=137;break;}else{label=138;break;}
 case 137: 
 var $596=$591|$592;
 HEAP32[((51600)>>2)]=$596;
 var $_sum15_pre_i=((($588)+(2))|0);
 var $_pre_i27=((51640+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$590;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($588)+(2))|0);
 var $598=((51640+($_sum18_i<<2))|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=$599;
 var $601=HEAP32[((51616)>>2)];
 var $602=($600>>>0)<($601>>>0);
 if($602){label=139;break;}else{var $F5_0_i=$599;var $_pre_phi_i28=$598;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$467;
 var $605=(($F5_0_i+12)|0);
 HEAP32[(($605)>>2)]=$467;
 var $_sum16_i=((($348)+(8))|0);
 var $606=(($462+$_sum16_i)|0);
 var $607=$606;
 HEAP32[(($607)>>2)]=$F5_0_i;
 var $_sum17_i=((($348)+(12))|0);
 var $608=(($462+$_sum17_i)|0);
 var $609=$608;
 HEAP32[(($609)>>2)]=$590;
 label=159;break;
 case 141: 
 var $611=$466;
 var $612=$rsize_3_lcssa_i>>>8;
 var $613=($612|0)==0;
 if($613){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $615=($rsize_3_lcssa_i>>>0)>16777215;
 if($615){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $617=((($612)+(1048320))|0);
 var $618=$617>>>16;
 var $619=$618&8;
 var $620=$612<<$619;
 var $621=((($620)+(520192))|0);
 var $622=$621>>>16;
 var $623=$622&4;
 var $624=$623|$619;
 var $625=$620<<$623;
 var $626=((($625)+(245760))|0);
 var $627=$626>>>16;
 var $628=$627&2;
 var $629=$624|$628;
 var $630=(((14)-($629))|0);
 var $631=$625<<$628;
 var $632=$631>>>15;
 var $633=((($630)+($632))|0);
 var $634=$633<<1;
 var $635=((($633)+(7))|0);
 var $636=$rsize_3_lcssa_i>>>($635>>>0);
 var $637=$636&1;
 var $638=$637|$634;
 var $I7_0_i=$638;label=144;break;
 case 144: 
 var $I7_0_i;
 var $640=((51904+($I7_0_i<<2))|0);
 var $_sum2_i=((($348)+(28))|0);
 var $641=(($462+$_sum2_i)|0);
 var $642=$641;
 HEAP32[(($642)>>2)]=$I7_0_i;
 var $_sum3_i29=((($348)+(16))|0);
 var $643=(($462+$_sum3_i29)|0);
 var $_sum4_i30=((($348)+(20))|0);
 var $644=(($462+$_sum4_i30)|0);
 var $645=$644;
 HEAP32[(($645)>>2)]=0;
 var $646=$643;
 HEAP32[(($646)>>2)]=0;
 var $647=HEAP32[((51604)>>2)];
 var $648=1<<$I7_0_i;
 var $649=$647&$648;
 var $650=($649|0)==0;
 if($650){label=145;break;}else{label=146;break;}
 case 145: 
 var $652=$647|$648;
 HEAP32[((51604)>>2)]=$652;
 HEAP32[(($640)>>2)]=$611;
 var $653=$640;
 var $_sum5_i=((($348)+(24))|0);
 var $654=(($462+$_sum5_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$653;
 var $_sum6_i=((($348)+(12))|0);
 var $656=(($462+$_sum6_i)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$611;
 var $_sum7_i=((($348)+(8))|0);
 var $658=(($462+$_sum7_i)|0);
 var $659=$658;
 HEAP32[(($659)>>2)]=$611;
 label=159;break;
 case 146: 
 var $661=HEAP32[(($640)>>2)];
 var $662=($I7_0_i|0)==31;
 if($662){var $667=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $664=$I7_0_i>>>1;
 var $665=(((25)-($664))|0);
 var $667=$665;label=148;break;
 case 148: 
 var $667;
 var $668=(($661+4)|0);
 var $669=HEAP32[(($668)>>2)];
 var $670=$669&-8;
 var $671=($670|0)==($rsize_3_lcssa_i|0);
 if($671){var $T_0_lcssa_i=$661;label=155;break;}else{label=149;break;}
 case 149: 
 var $672=$rsize_3_lcssa_i<<$667;
 var $T_028_i=$661;var $K12_029_i=$672;label=151;break;
 case 150: 
 var $674=$K12_029_i<<1;
 var $675=(($682+4)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=$676&-8;
 var $678=($677|0)==($rsize_3_lcssa_i|0);
 if($678){var $T_0_lcssa_i=$682;label=155;break;}else{var $T_028_i=$682;var $K12_029_i=$674;label=151;break;}
 case 151: 
 var $K12_029_i;
 var $T_028_i;
 var $680=$K12_029_i>>>31;
 var $681=(($T_028_i+16+($680<<2))|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=($682|0)==0;
 if($683){label=152;break;}else{label=150;break;}
 case 152: 
 var $685=$681;
 var $686=HEAP32[((51616)>>2)];
 var $687=($685>>>0)<($686>>>0);
 if($687){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($681)>>2)]=$611;
 var $_sum12_i=((($348)+(24))|0);
 var $689=(($462+$_sum12_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$T_028_i;
 var $_sum13_i=((($348)+(12))|0);
 var $691=(($462+$_sum13_i)|0);
 var $692=$691;
 HEAP32[(($692)>>2)]=$611;
 var $_sum14_i=((($348)+(8))|0);
 var $693=(($462+$_sum14_i)|0);
 var $694=$693;
 HEAP32[(($694)>>2)]=$611;
 label=159;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $696=(($T_0_lcssa_i+8)|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$T_0_lcssa_i;
 var $699=HEAP32[((51616)>>2)];
 var $700=($698>>>0)>=($699>>>0);
 var $701=$697;
 var $702=($701>>>0)>=($699>>>0);
 var $or_cond26_i=$700&$702;
 if($or_cond26_i){label=156;break;}else{label=157;break;}
 case 156: 
 var $704=(($697+12)|0);
 HEAP32[(($704)>>2)]=$611;
 HEAP32[(($696)>>2)]=$611;
 var $_sum9_i=((($348)+(8))|0);
 var $705=(($462+$_sum9_i)|0);
 var $706=$705;
 HEAP32[(($706)>>2)]=$697;
 var $_sum10_i=((($348)+(12))|0);
 var $707=(($462+$_sum10_i)|0);
 var $708=$707;
 HEAP32[(($708)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($348)+(24))|0);
 var $709=(($462+$_sum11_i)|0);
 var $710=$709;
 HEAP32[(($710)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $712=(($v_3_lcssa_i+8)|0);
 var $713=$712;
 var $mem_0=$713;label=341;break;
 case 160: 
 var $nb_0;
 var $714=HEAP32[((51608)>>2)];
 var $715=($714>>>0)<($nb_0>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 var $717=((($714)-($nb_0))|0);
 var $718=HEAP32[((51620)>>2)];
 var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 var $721=$718;
 var $722=(($721+$nb_0)|0);
 var $723=$722;
 HEAP32[((51620)>>2)]=$723;
 HEAP32[((51608)>>2)]=$717;
 var $724=$717|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $725=(($721+$_sum2)|0);
 var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 var $727=(($721+$714)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 var $729=$nb_0|3;
 var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((51608)>>2)]=0;
 HEAP32[((51620)>>2)]=0;
 var $732=$714|3;
 var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 var $734=$718;
 var $_sum1=((($714)+(4))|0);
 var $735=(($734+$_sum1)|0);
 var $736=$735;
 var $737=HEAP32[(($736)>>2)];
 var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 var $740=(($718+8)|0);
 var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 var $743=HEAP32[((51612)>>2)];
 var $744=($743>>>0)>($nb_0>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 var $746=((($743)-($nb_0))|0);
 HEAP32[((51612)>>2)]=$746;
 var $747=HEAP32[((51624)>>2)];
 var $748=$747;
 var $749=(($748+$nb_0)|0);
 var $750=$749;
 HEAP32[((51624)>>2)]=$750;
 var $751=$746|1;
 var $_sum=((($nb_0)+(4))|0);
 var $752=(($748+$_sum)|0);
 var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 var $754=$nb_0|3;
 var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 var $756=(($747+8)|0);
 var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 var $759=HEAP32[((42640)>>2)];
 var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 var $762=_sysconf(30);
 var $763=((($762)-(1))|0);
 var $764=$763&$762;
 var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((42648)>>2)]=$762;
 HEAP32[((42644)>>2)]=$762;
 HEAP32[((42652)>>2)]=-1;
 HEAP32[((42656)>>2)]=-1;
 HEAP32[((42660)>>2)]=0;
 HEAP32[((52044)>>2)]=0;
 var $767=_time(0);
 var $768=$767&-16;
 var $769=$768^1431655768;
 HEAP32[((42640)>>2)]=$769;
 label=171;break;
 case 171: 
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((42648)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $779=HEAP32[((52040)>>2)];
 var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 var $782=HEAP32[((52032)>>2)];
 var $783=((($782)+($776))|0);
 var $784=($783>>>0)<=($782>>>0);
 var $785=($783>>>0)>($779>>>0);
 var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $787=HEAP32[((52044)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $791=HEAP32[((51624)>>2)];
 var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 var $794=$791;
 var $sp_0_i_i=52048;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $796=(($sp_0_i_i)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 var $800=(($sp_0_i_i+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($797+$801)|0);
 var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 var $805=(($sp_0_i_i+8)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 var $809=_sbrk(0);
 var $810=($809|0)==-1;
 if($810){var $tsize_03141_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $812=$809;
 var $813=HEAP32[((42644)>>2)];
 var $814=((($813)-(1))|0);
 var $815=$814&$812;
 var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 var $818=((($814)+($812))|0);
 var $819=(((-$813))|0);
 var $820=$818&$819;
 var $821=((($776)-($812))|0);
 var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $824=HEAP32[((52032)>>2)];
 var $825=((($824)+($ssize_0_i))|0);
 var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 var $827=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$826&$827;
 if($or_cond_i31){label=185;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 185: 
 var $829=HEAP32[((52040)>>2)];
 var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 var $832=($825>>>0)<=($824>>>0);
 var $833=($825>>>0)>($829>>>0);
 var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_03141_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $835=_sbrk($ssize_0_i);
 var $836=($835|0)==($809|0);
 if($836){var $br_0_i=$809;var $ssize_1_i=$ssize_0_i;label=190;break;}else{var $ssize_129_i=$ssize_0_i;var $br_030_i=$835;label=191;break;}
 case 188: 
 var $838=HEAP32[((51612)>>2)];
 var $839=((($774)-($838))|0);
 var $840=$839&$775;
 var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 189: 
 var $843=_sbrk($840);
 var $844=HEAP32[(($796)>>2)];
 var $845=HEAP32[(($800)>>2)];
 var $846=(($844+$845)|0);
 var $847=($843|0)==($846|0);
 if($847){var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;}else{var $ssize_129_i=$840;var $br_030_i=$843;label=191;break;}
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $849=($br_0_i|0)==-1;
 if($849){var $tsize_03141_i=$ssize_1_i;label=197;break;}else{var $tsize_244_i=$ssize_1_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 191: 
 var $br_030_i;
 var $ssize_129_i;
 var $850=(((-$ssize_129_i))|0);
 var $851=($br_030_i|0)!=-1;
 var $852=($ssize_129_i>>>0)<2147483647;
 var $or_cond5_i=$851&$852;
 var $853=($771>>>0)>($ssize_129_i>>>0);
 var $or_cond4_i=$or_cond5_i&$853;
 if($or_cond4_i){label=192;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 192: 
 var $855=HEAP32[((42648)>>2)];
 var $856=((($773)-($ssize_129_i))|0);
 var $857=((($856)+($855))|0);
 var $858=(((-$855))|0);
 var $859=$857&$858;
 var $860=($859>>>0)<2147483647;
 if($860){label=193;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 193: 
 var $862=_sbrk($859);
 var $863=($862|0)==-1;
 if($863){label=195;break;}else{label=194;break;}
 case 194: 
 var $865=((($859)+($ssize_129_i))|0);
 var $ssize_2_i=$865;label=196;break;
 case 195: 
 var $866=_sbrk($850);
 var $tsize_03141_i=0;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $868=($br_030_i|0)==-1;
 if($868){var $tsize_03141_i=0;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_030_i;label=201;break;}
 case 197: 
 var $tsize_03141_i;
 var $869=HEAP32[((52044)>>2)];
 var $870=$869|4;
 HEAP32[((52044)>>2)]=$870;
 var $tsize_1_i=$tsize_03141_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $872=($776>>>0)<2147483647;
 if($872){label=199;break;}else{label=340;break;}
 case 199: 
 var $874=_sbrk($776);
 var $875=_sbrk(0);
 var $876=($874|0)!=-1;
 var $877=($875|0)!=-1;
 var $or_cond3_i=$876&$877;
 var $878=($874>>>0)<($875>>>0);
 var $or_cond6_i=$or_cond3_i&$878;
 if($or_cond6_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $880=$875;
 var $881=$874;
 var $882=((($880)-($881))|0);
 var $883=((($nb_0)+(40))|0);
 var $884=($882>>>0)>($883>>>0);
 var $_tsize_1_i=($884?$882:$tsize_1_i);
 if($884){var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$874;label=201;break;}else{label=340;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $885=HEAP32[((52032)>>2)];
 var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((52032)>>2)]=$886;
 var $887=HEAP32[((52036)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((52036)>>2)]=$886;
 label=203;break;
 case 203: 
 var $891=HEAP32[((51624)>>2)];
 var $892=($891|0)==0;
 if($892){label=204;break;}else{var $sp_073_i=52048;label=211;break;}
 case 204: 
 var $894=HEAP32[((51616)>>2)];
 var $895=($894|0)==0;
 var $896=($tbase_245_i>>>0)<($894>>>0);
 var $or_cond8_i=$895|$896;
 if($or_cond8_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((51616)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((52048)>>2)]=$tbase_245_i;
 HEAP32[((52052)>>2)]=$tsize_244_i;
 HEAP32[((52060)>>2)]=0;
 var $899=HEAP32[((42640)>>2)];
 HEAP32[((51636)>>2)]=$899;
 HEAP32[((51632)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $901=$i_02_i_i<<1;
 var $902=((51640+($901<<2))|0);
 var $903=$902;
 var $_sum_i_i=((($901)+(3))|0);
 var $904=((51640+($_sum_i_i<<2))|0);
 HEAP32[(($904)>>2)]=$903;
 var $_sum1_i_i=((($901)+(2))|0);
 var $905=((51640+($_sum1_i_i<<2))|0);
 HEAP32[(($905)>>2)]=$903;
 var $906=((($i_02_i_i)+(1))|0);
 var $907=($906>>>0)<32;
 if($907){var $i_02_i_i=$906;label=207;break;}else{label=208;break;}
 case 208: 
 var $908=((($tsize_244_i)-(40))|0);
 var $909=(($tbase_245_i+8)|0);
 var $910=$909;
 var $911=$910&7;
 var $912=($911|0)==0;
 if($912){var $916=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $914=(((-$910))|0);
 var $915=$914&7;
 var $916=$915;label=210;break;
 case 210: 
 var $916;
 var $917=(($tbase_245_i+$916)|0);
 var $918=$917;
 var $919=((($908)-($916))|0);
 HEAP32[((51624)>>2)]=$918;
 HEAP32[((51612)>>2)]=$919;
 var $920=$919|1;
 var $_sum_i12_i=((($916)+(4))|0);
 var $921=(($tbase_245_i+$_sum_i12_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=$920;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $923=(($tbase_245_i+$_sum2_i_i)|0);
 var $924=$923;
 HEAP32[(($924)>>2)]=40;
 var $925=HEAP32[((42656)>>2)];
 HEAP32[((51628)>>2)]=$925;
 label=338;break;
 case 211: 
 var $sp_073_i;
 var $926=(($sp_073_i)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($sp_073_i+4)|0);
 var $929=HEAP32[(($928)>>2)];
 var $930=(($927+$929)|0);
 var $931=($tbase_245_i|0)==($930|0);
 if($931){label=213;break;}else{label=212;break;}
 case 212: 
 var $933=(($sp_073_i+8)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=($934|0)==0;
 if($935){label=218;break;}else{var $sp_073_i=$934;label=211;break;}
 case 213: 
 var $936=(($sp_073_i+12)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=$937&8;
 var $939=($938|0)==0;
 if($939){label=214;break;}else{label=218;break;}
 case 214: 
 var $941=$891;
 var $942=($941>>>0)>=($927>>>0);
 var $943=($941>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$942&$943;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $945=((($929)+($tsize_244_i))|0);
 HEAP32[(($928)>>2)]=$945;
 var $946=HEAP32[((51624)>>2)];
 var $947=HEAP32[((51612)>>2)];
 var $948=((($947)+($tsize_244_i))|0);
 var $949=$946;
 var $950=(($946+8)|0);
 var $951=$950;
 var $952=$951&7;
 var $953=($952|0)==0;
 if($953){var $957=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $955=(((-$951))|0);
 var $956=$955&7;
 var $957=$956;label=217;break;
 case 217: 
 var $957;
 var $958=(($949+$957)|0);
 var $959=$958;
 var $960=((($948)-($957))|0);
 HEAP32[((51624)>>2)]=$959;
 HEAP32[((51612)>>2)]=$960;
 var $961=$960|1;
 var $_sum_i16_i=((($957)+(4))|0);
 var $962=(($949+$_sum_i16_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=$961;
 var $_sum2_i17_i=((($948)+(4))|0);
 var $964=(($949+$_sum2_i17_i)|0);
 var $965=$964;
 HEAP32[(($965)>>2)]=40;
 var $966=HEAP32[((42656)>>2)];
 HEAP32[((51628)>>2)]=$966;
 label=338;break;
 case 218: 
 var $967=HEAP32[((51616)>>2)];
 var $968=($tbase_245_i>>>0)<($967>>>0);
 if($968){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((51616)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 var $970=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_166_i=52048;label=221;break;
 case 221: 
 var $sp_166_i;
 var $972=(($sp_166_i)|0);
 var $973=HEAP32[(($972)>>2)];
 var $974=($973|0)==($970|0);
 if($974){label=223;break;}else{label=222;break;}
 case 222: 
 var $976=(($sp_166_i+8)|0);
 var $977=HEAP32[(($976)>>2)];
 var $978=($977|0)==0;
 if($978){label=304;break;}else{var $sp_166_i=$977;label=221;break;}
 case 223: 
 var $979=(($sp_166_i+12)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=$980&8;
 var $982=($981|0)==0;
 if($982){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($972)>>2)]=$tbase_245_i;
 var $984=(($sp_166_i+4)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=((($985)+($tsize_244_i))|0);
 HEAP32[(($984)>>2)]=$986;
 var $987=(($tbase_245_i+8)|0);
 var $988=$987;
 var $989=$988&7;
 var $990=($989|0)==0;
 if($990){var $995=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $992=(((-$988))|0);
 var $993=$992&7;
 var $995=$993;label=226;break;
 case 226: 
 var $995;
 var $996=(($tbase_245_i+$995)|0);
 var $_sum102_i=((($tsize_244_i)+(8))|0);
 var $997=(($tbase_245_i+$_sum102_i)|0);
 var $998=$997;
 var $999=$998&7;
 var $1000=($999|0)==0;
 if($1000){var $1005=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $1002=(((-$998))|0);
 var $1003=$1002&7;
 var $1005=$1003;label=228;break;
 case 228: 
 var $1005;
 var $_sum103_i=((($1005)+($tsize_244_i))|0);
 var $1006=(($tbase_245_i+$_sum103_i)|0);
 var $1007=$1006;
 var $1008=$1006;
 var $1009=$996;
 var $1010=((($1008)-($1009))|0);
 var $_sum_i19_i=((($995)+($nb_0))|0);
 var $1011=(($tbase_245_i+$_sum_i19_i)|0);
 var $1012=$1011;
 var $1013=((($1010)-($nb_0))|0);
 var $1014=$nb_0|3;
 var $_sum1_i20_i=((($995)+(4))|0);
 var $1015=(($tbase_245_i+$_sum1_i20_i)|0);
 var $1016=$1015;
 HEAP32[(($1016)>>2)]=$1014;
 var $1017=HEAP32[((51624)>>2)];
 var $1018=($1007|0)==($1017|0);
 if($1018){label=229;break;}else{label=230;break;}
 case 229: 
 var $1020=HEAP32[((51612)>>2)];
 var $1021=((($1020)+($1013))|0);
 HEAP32[((51612)>>2)]=$1021;
 HEAP32[((51624)>>2)]=$1012;
 var $1022=$1021|1;
 var $_sum46_i_i=((($_sum_i19_i)+(4))|0);
 var $1023=(($tbase_245_i+$_sum46_i_i)|0);
 var $1024=$1023;
 HEAP32[(($1024)>>2)]=$1022;
 label=303;break;
 case 230: 
 var $1026=HEAP32[((51620)>>2)];
 var $1027=($1007|0)==($1026|0);
 if($1027){label=231;break;}else{label=232;break;}
 case 231: 
 var $1029=HEAP32[((51608)>>2)];
 var $1030=((($1029)+($1013))|0);
 HEAP32[((51608)>>2)]=$1030;
 HEAP32[((51620)>>2)]=$1012;
 var $1031=$1030|1;
 var $_sum44_i_i=((($_sum_i19_i)+(4))|0);
 var $1032=(($tbase_245_i+$_sum44_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1031;
 var $_sum45_i_i=((($1030)+($_sum_i19_i))|0);
 var $1034=(($tbase_245_i+$_sum45_i_i)|0);
 var $1035=$1034;
 HEAP32[(($1035)>>2)]=$1030;
 label=303;break;
 case 232: 
 var $_sum2_i21_i=((($tsize_244_i)+(4))|0);
 var $_sum104_i=((($_sum2_i21_i)+($1005))|0);
 var $1037=(($tbase_245_i+$_sum104_i)|0);
 var $1038=$1037;
 var $1039=HEAP32[(($1038)>>2)];
 var $1040=$1039&3;
 var $1041=($1040|0)==1;
 if($1041){label=233;break;}else{var $oldfirst_0_i_i=$1007;var $qsize_0_i_i=$1013;label=280;break;}
 case 233: 
 var $1043=$1039&-8;
 var $1044=$1039>>>3;
 var $1045=($1039>>>0)<256;
 if($1045){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1005|8;
 var $_sum114_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1047=(($tbase_245_i+$_sum114_i)|0);
 var $1048=$1047;
 var $1049=HEAP32[(($1048)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum115_i=((($_sum41_i_i)+($1005))|0);
 var $1050=(($tbase_245_i+$_sum115_i)|0);
 var $1051=$1050;
 var $1052=HEAP32[(($1051)>>2)];
 var $1053=$1044<<1;
 var $1054=((51640+($1053<<2))|0);
 var $1055=$1054;
 var $1056=($1049|0)==($1055|0);
 if($1056){label=237;break;}else{label=235;break;}
 case 235: 
 var $1058=$1049;
 var $1059=HEAP32[((51616)>>2)];
 var $1060=($1058>>>0)<($1059>>>0);
 if($1060){label=245;break;}else{label=236;break;}
 case 236: 
 var $1062=(($1049+12)|0);
 var $1063=HEAP32[(($1062)>>2)];
 var $1064=($1063|0)==($1007|0);
 if($1064){label=237;break;}else{label=245;break;}
 case 237: 
 var $1065=($1052|0)==($1049|0);
 if($1065){label=238;break;}else{label=239;break;}
 case 238: 
 var $1067=1<<$1044;
 var $1068=$1067^-1;
 var $1069=HEAP32[((51600)>>2)];
 var $1070=$1069&$1068;
 HEAP32[((51600)>>2)]=$1070;
 label=279;break;
 case 239: 
 var $1072=($1052|0)==($1055|0);
 if($1072){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre62_i_i=(($1052+8)|0);
 var $_pre_phi63_i_i=$_pre62_i_i;label=243;break;
 case 241: 
 var $1074=$1052;
 var $1075=HEAP32[((51616)>>2)];
 var $1076=($1074>>>0)<($1075>>>0);
 if($1076){label=244;break;}else{label=242;break;}
 case 242: 
 var $1078=(($1052+8)|0);
 var $1079=HEAP32[(($1078)>>2)];
 var $1080=($1079|0)==($1007|0);
 if($1080){var $_pre_phi63_i_i=$1078;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi63_i_i;
 var $1081=(($1049+12)|0);
 HEAP32[(($1081)>>2)]=$1052;
 HEAP32[(($_pre_phi63_i_i)>>2)]=$1049;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1083=$1006;
 var $_sum34_i_i=$1005|24;
 var $_sum105_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1084=(($tbase_245_i+$_sum105_i)|0);
 var $1085=$1084;
 var $1086=HEAP32[(($1085)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum5_i_i)+($1005))|0);
 var $1087=(($tbase_245_i+$_sum106_i)|0);
 var $1088=$1087;
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=($1089|0)==($1083|0);
 if($1090){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1005|8;
 var $_sum107_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1092=(($tbase_245_i+$_sum107_i)|0);
 var $1093=$1092;
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=$1094;
 var $1096=HEAP32[((51616)>>2)];
 var $1097=($1095>>>0)<($1096>>>0);
 if($1097){label=251;break;}else{label=248;break;}
 case 248: 
 var $1099=(($1094+12)|0);
 var $1100=HEAP32[(($1099)>>2)];
 var $1101=($1100|0)==($1083|0);
 if($1101){label=249;break;}else{label=251;break;}
 case 249: 
 var $1103=(($1089+8)|0);
 var $1104=HEAP32[(($1103)>>2)];
 var $1105=($1104|0)==($1083|0);
 if($1105){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1099)>>2)]=$1089;
 HEAP32[(($1103)>>2)]=$1094;
 var $R_1_i_i=$1089;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1005|16;
 var $_sum112_i=((($_sum2_i21_i)+($_sum67_i_i))|0);
 var $1108=(($tbase_245_i+$_sum112_i)|0);
 var $1109=$1108;
 var $1110=HEAP32[(($1109)>>2)];
 var $1111=($1110|0)==0;
 if($1111){label=253;break;}else{var $R_0_i_i=$1110;var $RP_0_i_i=$1109;label=254;break;}
 case 253: 
 var $_sum113_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1113=(($tbase_245_i+$_sum113_i)|0);
 var $1114=$1113;
 var $1115=HEAP32[(($1114)>>2)];
 var $1116=($1115|0)==0;
 if($1116){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1115;var $RP_0_i_i=$1114;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1117=(($R_0_i_i+20)|0);
 var $1118=HEAP32[(($1117)>>2)];
 var $1119=($1118|0)==0;
 if($1119){label=255;break;}else{var $R_0_i_i=$1118;var $RP_0_i_i=$1117;label=254;break;}
 case 255: 
 var $1121=(($R_0_i_i+16)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=($1122|0)==0;
 if($1123){label=256;break;}else{var $R_0_i_i=$1122;var $RP_0_i_i=$1121;label=254;break;}
 case 256: 
 var $1125=$RP_0_i_i;
 var $1126=HEAP32[((51616)>>2)];
 var $1127=($1125>>>0)<($1126>>>0);
 if($1127){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1131=($1086|0)==0;
 if($1131){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum108_i=((($_sum31_i_i)+($1005))|0);
 var $1133=(($tbase_245_i+$_sum108_i)|0);
 var $1134=$1133;
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=((51904+($1135<<2))|0);
 var $1137=HEAP32[(($1136)>>2)];
 var $1138=($1083|0)==($1137|0);
 if($1138){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1136)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1140=HEAP32[(($1134)>>2)];
 var $1141=1<<$1140;
 var $1142=$1141^-1;
 var $1143=HEAP32[((51604)>>2)];
 var $1144=$1143&$1142;
 HEAP32[((51604)>>2)]=$1144;
 label=279;break;
 case 263: 
 var $1146=$1086;
 var $1147=HEAP32[((51616)>>2)];
 var $1148=($1146>>>0)<($1147>>>0);
 if($1148){label=267;break;}else{label=264;break;}
 case 264: 
 var $1150=(($1086+16)|0);
 var $1151=HEAP32[(($1150)>>2)];
 var $1152=($1151|0)==($1083|0);
 if($1152){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1150)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1155=(($1086+20)|0);
 HEAP32[(($1155)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1158=($R_1_i_i|0)==0;
 if($1158){label=279;break;}else{label=269;break;}
 case 269: 
 var $1160=$R_1_i_i;
 var $1161=HEAP32[((51616)>>2)];
 var $1162=($1160>>>0)<($1161>>>0);
 if($1162){label=278;break;}else{label=270;break;}
 case 270: 
 var $1164=(($R_1_i_i+24)|0);
 HEAP32[(($1164)>>2)]=$1086;
 var $_sum3233_i_i=$1005|16;
 var $_sum109_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1165=(($tbase_245_i+$_sum109_i)|0);
 var $1166=$1165;
 var $1167=HEAP32[(($1166)>>2)];
 var $1168=($1167|0)==0;
 if($1168){label=274;break;}else{label=271;break;}
 case 271: 
 var $1170=$1167;
 var $1171=HEAP32[((51616)>>2)];
 var $1172=($1170>>>0)<($1171>>>0);
 if($1172){label=273;break;}else{label=272;break;}
 case 272: 
 var $1174=(($R_1_i_i+16)|0);
 HEAP32[(($1174)>>2)]=$1167;
 var $1175=(($1167+24)|0);
 HEAP32[(($1175)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum110_i=((($_sum2_i21_i)+($_sum3233_i_i))|0);
 var $1178=(($tbase_245_i+$_sum110_i)|0);
 var $1179=$1178;
 var $1180=HEAP32[(($1179)>>2)];
 var $1181=($1180|0)==0;
 if($1181){label=279;break;}else{label=275;break;}
 case 275: 
 var $1183=$1180;
 var $1184=HEAP32[((51616)>>2)];
 var $1185=($1183>>>0)<($1184>>>0);
 if($1185){label=277;break;}else{label=276;break;}
 case 276: 
 var $1187=(($R_1_i_i+20)|0);
 HEAP32[(($1187)>>2)]=$1180;
 var $1188=(($1180+24)|0);
 HEAP32[(($1188)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1043|$1005;
 var $_sum111_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1192=(($tbase_245_i+$_sum111_i)|0);
 var $1193=$1192;
 var $1194=((($1043)+($1013))|0);
 var $oldfirst_0_i_i=$1193;var $qsize_0_i_i=$1194;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1196=(($oldfirst_0_i_i+4)|0);
 var $1197=HEAP32[(($1196)>>2)];
 var $1198=$1197&-2;
 HEAP32[(($1196)>>2)]=$1198;
 var $1199=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i19_i)+(4))|0);
 var $1200=(($tbase_245_i+$_sum10_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$1199;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i19_i))|0);
 var $1202=(($tbase_245_i+$_sum11_i_i)|0);
 var $1203=$1202;
 HEAP32[(($1203)>>2)]=$qsize_0_i_i;
 var $1204=$qsize_0_i_i>>>3;
 var $1205=($qsize_0_i_i>>>0)<256;
 if($1205){label=281;break;}else{label=286;break;}
 case 281: 
 var $1207=$1204<<1;
 var $1208=((51640+($1207<<2))|0);
 var $1209=$1208;
 var $1210=HEAP32[((51600)>>2)];
 var $1211=1<<$1204;
 var $1212=$1210&$1211;
 var $1213=($1212|0)==0;
 if($1213){label=282;break;}else{label=283;break;}
 case 282: 
 var $1215=$1210|$1211;
 HEAP32[((51600)>>2)]=$1215;
 var $_sum27_pre_i_i=((($1207)+(2))|0);
 var $_pre_i22_i=((51640+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1209;var $_pre_phi_i23_i=$_pre_i22_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1207)+(2))|0);
 var $1217=((51640+($_sum30_i_i<<2))|0);
 var $1218=HEAP32[(($1217)>>2)];
 var $1219=$1218;
 var $1220=HEAP32[((51616)>>2)];
 var $1221=($1219>>>0)<($1220>>>0);
 if($1221){label=284;break;}else{var $F4_0_i_i=$1218;var $_pre_phi_i23_i=$1217;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i23_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i23_i)>>2)]=$1012;
 var $1224=(($F4_0_i_i+12)|0);
 HEAP32[(($1224)>>2)]=$1012;
 var $_sum28_i_i=((($_sum_i19_i)+(8))|0);
 var $1225=(($tbase_245_i+$_sum28_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i19_i)+(12))|0);
 var $1227=(($tbase_245_i+$_sum29_i_i)|0);
 var $1228=$1227;
 HEAP32[(($1228)>>2)]=$1209;
 label=303;break;
 case 286: 
 var $1230=$1011;
 var $1231=$qsize_0_i_i>>>8;
 var $1232=($1231|0)==0;
 if($1232){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1234=($qsize_0_i_i>>>0)>16777215;
 if($1234){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1236=((($1231)+(1048320))|0);
 var $1237=$1236>>>16;
 var $1238=$1237&8;
 var $1239=$1231<<$1238;
 var $1240=((($1239)+(520192))|0);
 var $1241=$1240>>>16;
 var $1242=$1241&4;
 var $1243=$1242|$1238;
 var $1244=$1239<<$1242;
 var $1245=((($1244)+(245760))|0);
 var $1246=$1245>>>16;
 var $1247=$1246&2;
 var $1248=$1243|$1247;
 var $1249=(((14)-($1248))|0);
 var $1250=$1244<<$1247;
 var $1251=$1250>>>15;
 var $1252=((($1249)+($1251))|0);
 var $1253=$1252<<1;
 var $1254=((($1252)+(7))|0);
 var $1255=$qsize_0_i_i>>>($1254>>>0);
 var $1256=$1255&1;
 var $1257=$1256|$1253;
 var $I7_0_i_i=$1257;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1259=((51904+($I7_0_i_i<<2))|0);
 var $_sum12_i24_i=((($_sum_i19_i)+(28))|0);
 var $1260=(($tbase_245_i+$_sum12_i24_i)|0);
 var $1261=$1260;
 HEAP32[(($1261)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i19_i)+(16))|0);
 var $1262=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i19_i)+(20))|0);
 var $1263=(($tbase_245_i+$_sum14_i_i)|0);
 var $1264=$1263;
 HEAP32[(($1264)>>2)]=0;
 var $1265=$1262;
 HEAP32[(($1265)>>2)]=0;
 var $1266=HEAP32[((51604)>>2)];
 var $1267=1<<$I7_0_i_i;
 var $1268=$1266&$1267;
 var $1269=($1268|0)==0;
 if($1269){label=290;break;}else{label=291;break;}
 case 290: 
 var $1271=$1266|$1267;
 HEAP32[((51604)>>2)]=$1271;
 HEAP32[(($1259)>>2)]=$1230;
 var $1272=$1259;
 var $_sum15_i_i=((($_sum_i19_i)+(24))|0);
 var $1273=(($tbase_245_i+$_sum15_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1272;
 var $_sum16_i_i=((($_sum_i19_i)+(12))|0);
 var $1275=(($tbase_245_i+$_sum16_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1230;
 var $_sum17_i_i=((($_sum_i19_i)+(8))|0);
 var $1277=(($tbase_245_i+$_sum17_i_i)|0);
 var $1278=$1277;
 HEAP32[(($1278)>>2)]=$1230;
 label=303;break;
 case 291: 
 var $1280=HEAP32[(($1259)>>2)];
 var $1281=($I7_0_i_i|0)==31;
 if($1281){var $1286=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1283=$I7_0_i_i>>>1;
 var $1284=(((25)-($1283))|0);
 var $1286=$1284;label=293;break;
 case 293: 
 var $1286;
 var $1287=(($1280+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){var $T_0_lcssa_i26_i=$1280;label=300;break;}else{label=294;break;}
 case 294: 
 var $1291=$qsize_0_i_i<<$1286;
 var $T_056_i_i=$1280;var $K8_057_i_i=$1291;label=296;break;
 case 295: 
 var $1293=$K8_057_i_i<<1;
 var $1294=(($1301+4)|0);
 var $1295=HEAP32[(($1294)>>2)];
 var $1296=$1295&-8;
 var $1297=($1296|0)==($qsize_0_i_i|0);
 if($1297){var $T_0_lcssa_i26_i=$1301;label=300;break;}else{var $T_056_i_i=$1301;var $K8_057_i_i=$1293;label=296;break;}
 case 296: 
 var $K8_057_i_i;
 var $T_056_i_i;
 var $1299=$K8_057_i_i>>>31;
 var $1300=(($T_056_i_i+16+($1299<<2))|0);
 var $1301=HEAP32[(($1300)>>2)];
 var $1302=($1301|0)==0;
 if($1302){label=297;break;}else{label=295;break;}
 case 297: 
 var $1304=$1300;
 var $1305=HEAP32[((51616)>>2)];
 var $1306=($1304>>>0)<($1305>>>0);
 if($1306){label=299;break;}else{label=298;break;}
 case 298: 
 HEAP32[(($1300)>>2)]=$1230;
 var $_sum24_i_i=((($_sum_i19_i)+(24))|0);
 var $1308=(($tbase_245_i+$_sum24_i_i)|0);
 var $1309=$1308;
 HEAP32[(($1309)>>2)]=$T_056_i_i;
 var $_sum25_i_i=((($_sum_i19_i)+(12))|0);
 var $1310=(($tbase_245_i+$_sum25_i_i)|0);
 var $1311=$1310;
 HEAP32[(($1311)>>2)]=$1230;
 var $_sum26_i_i=((($_sum_i19_i)+(8))|0);
 var $1312=(($tbase_245_i+$_sum26_i_i)|0);
 var $1313=$1312;
 HEAP32[(($1313)>>2)]=$1230;
 label=303;break;
 case 299: 
 _abort();
 throw "Reached an unreachable!";
 case 300: 
 var $T_0_lcssa_i26_i;
 var $1315=(($T_0_lcssa_i26_i+8)|0);
 var $1316=HEAP32[(($1315)>>2)];
 var $1317=$T_0_lcssa_i26_i;
 var $1318=HEAP32[((51616)>>2)];
 var $1319=($1317>>>0)>=($1318>>>0);
 var $1320=$1316;
 var $1321=($1320>>>0)>=($1318>>>0);
 var $or_cond_i27_i=$1319&$1321;
 if($or_cond_i27_i){label=301;break;}else{label=302;break;}
 case 301: 
 var $1323=(($1316+12)|0);
 HEAP32[(($1323)>>2)]=$1230;
 HEAP32[(($1315)>>2)]=$1230;
 var $_sum21_i_i=((($_sum_i19_i)+(8))|0);
 var $1324=(($tbase_245_i+$_sum21_i_i)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=$1316;
 var $_sum22_i_i=((($_sum_i19_i)+(12))|0);
 var $1326=(($tbase_245_i+$_sum22_i_i)|0);
 var $1327=$1326;
 HEAP32[(($1327)>>2)]=$T_0_lcssa_i26_i;
 var $_sum23_i_i=((($_sum_i19_i)+(24))|0);
 var $1328=(($tbase_245_i+$_sum23_i_i)|0);
 var $1329=$1328;
 HEAP32[(($1329)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$995|8;
 var $1330=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1330;label=341;break;
 case 304: 
 var $1331=$891;
 var $sp_0_i_i_i=52048;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1333=(($sp_0_i_i_i)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=($1334>>>0)>($1331>>>0);
 if($1335){label=307;break;}else{label=306;break;}
 case 306: 
 var $1337=(($sp_0_i_i_i+4)|0);
 var $1338=HEAP32[(($1337)>>2)];
 var $1339=(($1334+$1338)|0);
 var $1340=($1339>>>0)>($1331>>>0);
 if($1340){label=308;break;}else{label=307;break;}
 case 307: 
 var $1342=(($sp_0_i_i_i+8)|0);
 var $1343=HEAP32[(($1342)>>2)];
 var $sp_0_i_i_i=$1343;label=305;break;
 case 308: 
 var $_sum_i13_i=((($1338)-(47))|0);
 var $_sum1_i14_i=((($1338)-(39))|0);
 var $1344=(($1334+$_sum1_i14_i)|0);
 var $1345=$1344;
 var $1346=$1345&7;
 var $1347=($1346|0)==0;
 if($1347){var $1352=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1349=(((-$1345))|0);
 var $1350=$1349&7;
 var $1352=$1350;label=310;break;
 case 310: 
 var $1352;
 var $_sum2_i15_i=((($_sum_i13_i)+($1352))|0);
 var $1353=(($1334+$_sum2_i15_i)|0);
 var $1354=(($891+16)|0);
 var $1355=$1354;
 var $1356=($1353>>>0)<($1355>>>0);
 var $1357=($1356?$1331:$1353);
 var $1358=(($1357+8)|0);
 var $1359=$1358;
 var $1360=((($tsize_244_i)-(40))|0);
 var $1361=(($tbase_245_i+8)|0);
 var $1362=$1361;
 var $1363=$1362&7;
 var $1364=($1363|0)==0;
 if($1364){var $1368=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1366=(((-$1362))|0);
 var $1367=$1366&7;
 var $1368=$1367;label=312;break;
 case 312: 
 var $1368;
 var $1369=(($tbase_245_i+$1368)|0);
 var $1370=$1369;
 var $1371=((($1360)-($1368))|0);
 HEAP32[((51624)>>2)]=$1370;
 HEAP32[((51612)>>2)]=$1371;
 var $1372=$1371|1;
 var $_sum_i_i_i=((($1368)+(4))|0);
 var $1373=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1374=$1373;
 HEAP32[(($1374)>>2)]=$1372;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1375=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1376=$1375;
 HEAP32[(($1376)>>2)]=40;
 var $1377=HEAP32[((42656)>>2)];
 HEAP32[((51628)>>2)]=$1377;
 var $1378=(($1357+4)|0);
 var $1379=$1378;
 HEAP32[(($1379)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1358)>>2)]=HEAP32[((52048)>>2)];HEAP32[((($1358)+(4))>>2)]=HEAP32[((52052)>>2)];HEAP32[((($1358)+(8))>>2)]=HEAP32[((52056)>>2)];HEAP32[((($1358)+(12))>>2)]=HEAP32[((52060)>>2)];
 HEAP32[((52048)>>2)]=$tbase_245_i;
 HEAP32[((52052)>>2)]=$tsize_244_i;
 HEAP32[((52060)>>2)]=0;
 HEAP32[((52056)>>2)]=$1359;
 var $1380=(($1357+28)|0);
 var $1381=$1380;
 HEAP32[(($1381)>>2)]=7;
 var $1382=(($1357+32)|0);
 var $1383=($1382>>>0)<($1339>>>0);
 if($1383){var $1384=$1381;label=313;break;}else{label=314;break;}
 case 313: 
 var $1384;
 var $1385=(($1384+4)|0);
 HEAP32[(($1385)>>2)]=7;
 var $1386=(($1384+8)|0);
 var $1387=$1386;
 var $1388=($1387>>>0)<($1339>>>0);
 if($1388){var $1384=$1385;label=313;break;}else{label=314;break;}
 case 314: 
 var $1389=($1357|0)==($1331|0);
 if($1389){label=338;break;}else{label=315;break;}
 case 315: 
 var $1391=$1357;
 var $1392=$891;
 var $1393=((($1391)-($1392))|0);
 var $1394=(($1331+$1393)|0);
 var $_sum3_i_i=((($1393)+(4))|0);
 var $1395=(($1331+$_sum3_i_i)|0);
 var $1396=$1395;
 var $1397=HEAP32[(($1396)>>2)];
 var $1398=$1397&-2;
 HEAP32[(($1396)>>2)]=$1398;
 var $1399=$1393|1;
 var $1400=(($891+4)|0);
 HEAP32[(($1400)>>2)]=$1399;
 var $1401=$1394;
 HEAP32[(($1401)>>2)]=$1393;
 var $1402=$1393>>>3;
 var $1403=($1393>>>0)<256;
 if($1403){label=316;break;}else{label=321;break;}
 case 316: 
 var $1405=$1402<<1;
 var $1406=((51640+($1405<<2))|0);
 var $1407=$1406;
 var $1408=HEAP32[((51600)>>2)];
 var $1409=1<<$1402;
 var $1410=$1408&$1409;
 var $1411=($1410|0)==0;
 if($1411){label=317;break;}else{label=318;break;}
 case 317: 
 var $1413=$1408|$1409;
 HEAP32[((51600)>>2)]=$1413;
 var $_sum11_pre_i_i=((($1405)+(2))|0);
 var $_pre_i_i=((51640+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1407;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1405)+(2))|0);
 var $1415=((51640+($_sum12_i_i<<2))|0);
 var $1416=HEAP32[(($1415)>>2)];
 var $1417=$1416;
 var $1418=HEAP32[((51616)>>2)];
 var $1419=($1417>>>0)<($1418>>>0);
 if($1419){label=319;break;}else{var $F_0_i_i=$1416;var $_pre_phi_i_i=$1415;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$891;
 var $1422=(($F_0_i_i+12)|0);
 HEAP32[(($1422)>>2)]=$891;
 var $1423=(($891+8)|0);
 HEAP32[(($1423)>>2)]=$F_0_i_i;
 var $1424=(($891+12)|0);
 HEAP32[(($1424)>>2)]=$1407;
 label=338;break;
 case 321: 
 var $1426=$891;
 var $1427=$1393>>>8;
 var $1428=($1427|0)==0;
 if($1428){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1430=($1393>>>0)>16777215;
 if($1430){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1432=((($1427)+(1048320))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&8;
 var $1435=$1427<<$1434;
 var $1436=((($1435)+(520192))|0);
 var $1437=$1436>>>16;
 var $1438=$1437&4;
 var $1439=$1438|$1434;
 var $1440=$1435<<$1438;
 var $1441=((($1440)+(245760))|0);
 var $1442=$1441>>>16;
 var $1443=$1442&2;
 var $1444=$1439|$1443;
 var $1445=(((14)-($1444))|0);
 var $1446=$1440<<$1443;
 var $1447=$1446>>>15;
 var $1448=((($1445)+($1447))|0);
 var $1449=$1448<<1;
 var $1450=((($1448)+(7))|0);
 var $1451=$1393>>>($1450>>>0);
 var $1452=$1451&1;
 var $1453=$1452|$1449;
 var $I1_0_i_i=$1453;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1455=((51904+($I1_0_i_i<<2))|0);
 var $1456=(($891+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1456)>>2)]=$I1_0_c_i_i;
 var $1457=(($891+20)|0);
 HEAP32[(($1457)>>2)]=0;
 var $1458=(($891+16)|0);
 HEAP32[(($1458)>>2)]=0;
 var $1459=HEAP32[((51604)>>2)];
 var $1460=1<<$I1_0_i_i;
 var $1461=$1459&$1460;
 var $1462=($1461|0)==0;
 if($1462){label=325;break;}else{label=326;break;}
 case 325: 
 var $1464=$1459|$1460;
 HEAP32[((51604)>>2)]=$1464;
 HEAP32[(($1455)>>2)]=$1426;
 var $1465=(($891+24)|0);
 var $_c_i_i=$1455;
 HEAP32[(($1465)>>2)]=$_c_i_i;
 var $1466=(($891+12)|0);
 HEAP32[(($1466)>>2)]=$891;
 var $1467=(($891+8)|0);
 HEAP32[(($1467)>>2)]=$891;
 label=338;break;
 case 326: 
 var $1469=HEAP32[(($1455)>>2)];
 var $1470=($I1_0_i_i|0)==31;
 if($1470){var $1475=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1472=$I1_0_i_i>>>1;
 var $1473=(((25)-($1472))|0);
 var $1475=$1473;label=328;break;
 case 328: 
 var $1475;
 var $1476=(($1469+4)|0);
 var $1477=HEAP32[(($1476)>>2)];
 var $1478=$1477&-8;
 var $1479=($1478|0)==($1393|0);
 if($1479){var $T_0_lcssa_i_i=$1469;label=335;break;}else{label=329;break;}
 case 329: 
 var $1480=$1393<<$1475;
 var $T_015_i_i=$1469;var $K2_016_i_i=$1480;label=331;break;
 case 330: 
 var $1482=$K2_016_i_i<<1;
 var $1483=(($1490+4)|0);
 var $1484=HEAP32[(($1483)>>2)];
 var $1485=$1484&-8;
 var $1486=($1485|0)==($1393|0);
 if($1486){var $T_0_lcssa_i_i=$1490;label=335;break;}else{var $T_015_i_i=$1490;var $K2_016_i_i=$1482;label=331;break;}
 case 331: 
 var $K2_016_i_i;
 var $T_015_i_i;
 var $1488=$K2_016_i_i>>>31;
 var $1489=(($T_015_i_i+16+($1488<<2))|0);
 var $1490=HEAP32[(($1489)>>2)];
 var $1491=($1490|0)==0;
 if($1491){label=332;break;}else{label=330;break;}
 case 332: 
 var $1493=$1489;
 var $1494=HEAP32[((51616)>>2)];
 var $1495=($1493>>>0)<($1494>>>0);
 if($1495){label=334;break;}else{label=333;break;}
 case 333: 
 HEAP32[(($1489)>>2)]=$1426;
 var $1497=(($891+24)|0);
 var $T_0_c8_i_i=$T_015_i_i;
 HEAP32[(($1497)>>2)]=$T_0_c8_i_i;
 var $1498=(($891+12)|0);
 HEAP32[(($1498)>>2)]=$891;
 var $1499=(($891+8)|0);
 HEAP32[(($1499)>>2)]=$891;
 label=338;break;
 case 334: 
 _abort();
 throw "Reached an unreachable!";
 case 335: 
 var $T_0_lcssa_i_i;
 var $1501=(($T_0_lcssa_i_i+8)|0);
 var $1502=HEAP32[(($1501)>>2)];
 var $1503=$T_0_lcssa_i_i;
 var $1504=HEAP32[((51616)>>2)];
 var $1505=($1503>>>0)>=($1504>>>0);
 var $1506=$1502;
 var $1507=($1506>>>0)>=($1504>>>0);
 var $or_cond_i_i=$1505&$1507;
 if($or_cond_i_i){label=336;break;}else{label=337;break;}
 case 336: 
 var $1509=(($1502+12)|0);
 HEAP32[(($1509)>>2)]=$1426;
 HEAP32[(($1501)>>2)]=$1426;
 var $1510=(($891+8)|0);
 var $_c7_i_i=$1502;
 HEAP32[(($1510)>>2)]=$_c7_i_i;
 var $1511=(($891+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1511)>>2)]=$T_0_c_i_i;
 var $1512=(($891+24)|0);
 HEAP32[(($1512)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1513=HEAP32[((51612)>>2)];
 var $1514=($1513>>>0)>($nb_0>>>0);
 if($1514){label=339;break;}else{label=340;break;}
 case 339: 
 var $1516=((($1513)-($nb_0))|0);
 HEAP32[((51612)>>2)]=$1516;
 var $1517=HEAP32[((51624)>>2)];
 var $1518=$1517;
 var $1519=(($1518+$nb_0)|0);
 var $1520=$1519;
 HEAP32[((51624)>>2)]=$1520;
 var $1521=$1516|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1522=(($1518+$_sum_i34)|0);
 var $1523=$1522;
 HEAP32[(($1523)>>2)]=$1521;
 var $1524=$nb_0|3;
 var $1525=(($1517+4)|0);
 HEAP32[(($1525)>>2)]=$1524;
 var $1526=(($1517+8)|0);
 var $1527=$1526;
 var $mem_0=$1527;label=341;break;
 case 340: 
 var $1528=___errno_location();
 HEAP32[(($1528)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((51616)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((51620)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((51640+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((51600)>>2)];
 var $57=$56&$55;
 HEAP32[((51600)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre82=(($40+8)|0);
 var $_pre_phi83=$_pre82;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi83=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi83;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi83)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((51904+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((51604)>>2)];
 var $128=$127&$126;
 HEAP32[((51604)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((51616)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((51616)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $149=(($mem+$_sum42)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((51616)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $162=(($mem+$_sum43)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((51616)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $176=(($mem+$_sum4)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((51608)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $185=(($mem+$_sum35)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $192=(($mem+$_sum34)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((51624)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((51612)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((51612)>>2)]=$204;
 HEAP32[((51624)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((51620)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((51620)>>2)]=0;
 HEAP32[((51608)>>2)]=0;
 label=140;break;
 case 62: 
 var $211=HEAP32[((51620)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((51608)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((51608)>>2)]=$215;
 HEAP32[((51620)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum2829=$14|4;
 var $229=(($mem+$_sum2829)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((51640+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((51616)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((51600)>>2)];
 var $249=$248&$247;
 HEAP32[((51600)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre80=(($231+8)|0);
 var $_pre_phi81=$_pre80;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((51616)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi81=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi81;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi81)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum6=((($14)+(16))|0);
 var $263=(($mem+$_sum6)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum78=$14|4;
 var $266=(($mem+$_sum78)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((51616)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $287=(($mem+$_sum10)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $292=(($mem+$_sum9)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((51616)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $312=(($mem+$_sum21)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((51904+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((51604)>>2)];
 var $323=$322&$321;
 HEAP32[((51604)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((51616)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((51616)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum22=((($14)+(8))|0);
 var $344=(($mem+$_sum22)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((51616)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $357=(($mem+$_sum23)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((51616)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((51620)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((51608)>>2)]=$222;
 label=140;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((51640+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((51600)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((51600)>>2)]=$396;
 var $_sum19_pre=((($388)+(2))|0);
 var $_pre=((51640+($_sum19_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($388)+(2))|0);
 var $398=((51640+($_sum20<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((51616)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((51904+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((51604)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((51604)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=(($452+4)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=$460&-8;
 var $462=($461|0)==($psize_1|0);
 if($462){var $T_0_lcssa=$452;label=133;break;}else{label=127;break;}
 case 127: 
 var $463=$psize_1<<$458;
 var $T_072=$452;var $K19_073=$463;label=129;break;
 case 128: 
 var $465=$K19_073<<1;
 var $466=(($473+4)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=$467&-8;
 var $469=($468|0)==($psize_1|0);
 if($469){var $T_0_lcssa=$473;label=133;break;}else{var $T_072=$473;var $K19_073=$465;label=129;break;}
 case 129: 
 var $K19_073;
 var $T_072;
 var $471=$K19_073>>>31;
 var $472=(($T_072+16+($471<<2))|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($473|0)==0;
 if($474){label=130;break;}else{label=128;break;}
 case 130: 
 var $476=$472;
 var $477=HEAP32[((51616)>>2)];
 var $478=($476>>>0)<($477>>>0);
 if($478){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($472)>>2)]=$409;
 var $480=(($p_0+24)|0);
 var $T_0_c16=$T_072;
 HEAP32[(($480)>>2)]=$T_0_c16;
 var $481=(($p_0+12)|0);
 HEAP32[(($481)>>2)]=$p_0;
 var $482=(($p_0+8)|0);
 HEAP32[(($482)>>2)]=$p_0;
 label=136;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $484=(($T_0_lcssa+8)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=$T_0_lcssa;
 var $487=HEAP32[((51616)>>2)];
 var $488=($486>>>0)>=($487>>>0);
 var $489=$485;
 var $490=($489>>>0)>=($487>>>0);
 var $or_cond=$488&$490;
 if($or_cond){label=134;break;}else{label=135;break;}
 case 134: 
 var $492=(($485+12)|0);
 HEAP32[(($492)>>2)]=$409;
 HEAP32[(($484)>>2)]=$409;
 var $493=(($p_0+8)|0);
 var $_c15=$485;
 HEAP32[(($493)>>2)]=$_c15;
 var $494=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($494)>>2)]=$T_0_c;
 var $495=(($p_0+24)|0);
 HEAP32[(($495)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $497=HEAP32[((51632)>>2)];
 var $498=((($497)-(1))|0);
 HEAP32[((51632)>>2)]=$498;
 var $499=($498|0)==0;
 if($499){var $sp_0_in_i=52056;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $500=($sp_0_i|0)==0;
 var $501=(($sp_0_i+8)|0);
 if($500){label=138;break;}else{var $sp_0_in_i=$501;label=137;break;}
 case 138: 
 HEAP32[((51632)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;


// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];
  console.log(args);

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



